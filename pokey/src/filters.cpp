#include "filters.h"
#include <cmath>
#include <algorithm>

// Constants for filter coefficients
const std::vector<float> FIR_HALF_BAND = {
    0.006631578542146366f, 0.0f, -0.051031250383516566f, 0.0f, 
    0.29440207570898513f, 0.5f, 0.29440207570898513f, 0.0f, 
    -0.051031250383516566f, 0.0f, 0.006631578542146366f
};

const std::vector<float> FIR_5_TO_1 = {
    2.2055693741469678e-05f, 0.00016140587951149585f, 0.0004455947025289253f, 0.0010027491986913189f, 0.0019249046528200598f, 0.003292700177846668f, 0.005127062345683061f, 0.007360044107222422f, 0.009812053207538326f, 0.012190930665028552f, 0.014119154130111888f, 0.015191082320631741f, 0.015053869269425509f, 0.013497498642671905f, 0.010532963553996738f, 0.006435844129913317f, 0.0017367094269457202f, -0.0028500511841174306f, -0.006552965686958489f, -0.008703832465625354f, -0.008897095134987279f, -0.007108265775657866f, -0.003735936739822901f, 0.0004535423291632218f, 0.0044768183812528076f, 0.007352674908280225f, 0.008340990245320049f, 0.007142213251758996f, 0.004001258158233128f, -0.0003205602839678702f, -0.004710546325493503f, -0.007975622821472588f, -0.009156281544343947f, -0.007802711848847073f, -0.00413496541919464f, 0.000966745057404005f, 0.006154220399241479f, 0.009949084817547832f, 0.011146126195162328f, 0.00917646467750611f, 0.004325693794929819f, -0.0022670044295789137f, -0.008849484017916917f, -0.013493348526984732f, -0.014624220110211335f, -0.011508122236123242f, -0.004554623510358881f, 0.004666013275846754f, 0.013726246796241974f, 0.019917492427708898f, 0.020972903387322855f, 0.015760095424924746f, 0.004758484551244897f, -0.009825300616758409f, -0.024369438665459646f, -0.03453989694364911f, -0.036245472521959685f, -0.02663411123433674f, -0.004893820187556659f, 0.027345440347776473f, 0.06612941205977459f, 0.10581952392674725f, 0.14013585322134517f, 0.16338524385008033f, 0.1716074988924923f, 0.16338524385008033f, 0.14013585322134517f, 0.10581952392674725f, 0.06612941205977459f, 0.027345440347776473f, -0.004893820187556659f, -0.02663411123433674f, -0.036245472521959685f, -0.03453989694364911f, -0.024369438665459646f, -0.009825300616758409f, 0.004758484551244897f, 0.015760095424924746f, 0.020972903387322855f, 0.019917492427708898f, 0.013726246796241974f, 0.004666013275846754f, -0.004554623510358881f, -0.011508122236123242f, -0.014624220110211335f, -0.013493348526984732f, -0.008849484017916917f, -0.0022670044295789137f, 0.004325693794929819f, 0.00917646467750611f, 0.011146126195162328f, 0.009949084817547832f, 0.006154220399241479f, 0.000966745057404005f, -0.00413496541919464f, -0.007802711848847073f, -0.009156281544343947f, -0.007975622821472588f, -0.004710546325493503f, -0.0003205602839678702f, 0.004001258158233128f, 0.007142213251758996f, 0.008340990245320049f, 0.007352674908280225f, 0.0044768183812528076f, 0.0004535423291632218f, -0.003735936739822901f, -0.007108265775657866f, -0.008897095134987279f, -0.008703832465625354f, -0.006552965686958489f, -0.0028500511841174306f, 0.0017367094269457202f, 0.006435844129913317f, 0.010532963553996738f, 0.013497498642671905f, 0.015053869269425509f, 0.015191082320631741f, 0.014119154130111888f, 0.012190930665028552f, 0.009812053207538326f, 0.007360044107222422f, 0.005127062345683061f, 0.003292700177846668f, 0.0019249046528200598f, 0.0010027491986913189f, 0.0004455947025289253f, 0.00016140587951149585f, 2.2055693741469678e-05f
};

const std::vector<float> FIR_37_to_1 = {
    -0.09349821507735248f, 0.003666910567355903f, 0.0036151277883324537f, 0.0035799221411175353f, 0.003552242647927605f, 0.003542827033881285f, 0.0035426515413241907f, 0.0035520735940582087f, 0.003569618013347629f, 0.0035974373631003486f, 0.003632708493515057f, 0.0036738655873837325f, 0.0037189575861326573f, 0.0037681053189869747f, 0.003819940339882748f, 0.0038732029974407676f, 0.003926241364999738f, 0.0039780781033141015f, 0.004027204953874909f, 0.004072093429640854f, 0.004111633482933724f, 0.004145008295488616f, 0.004171330704066523f, 0.004189024633557977f, 0.004197313249896553f, 0.004195049333993395f, 0.004181436710680956f, 0.004154188589397751f, 0.004113548632279398f, 0.004059419988684275f, 0.003993299227443386f, 0.003910807222983513f, 0.003811898654149772f, 0.0036944665141468605f, 0.003570389880502825f, 0.0034251083331524102f, 0.0032891969007221066f, 0.0029434362816407223f, 0.0029359689430925088f, 0.0027372083348269627f, 0.0024994585198891057f, 0.0022389914495120605f, 0.001972732848411926f, 0.001697343014595121f, 0.001414783902719725f, 0.0011247825923963559f, 0.0008304109705764811f, 0.0005304666712575737f, 0.00022504290225006584f, -0.00008589242788670133f, -0.00040018439806973987f, -0.0007168318959069872f, -0.0010345781126983354f, -0.001352288789958951f, -0.0016679911664585927f, -0.0019799853146573536f, -0.0022865329986336193f, -0.002585370288116768f, -0.0028740990267505048f, -0.0031504956628552066f, -0.0034133098994903795f, -0.0036603785887257922f, -0.0038899840990163485f, -0.0040999182032089975f, -0.004289874078047064f, -0.004456711316352827f, -0.004597927496009218f, -0.004709172105291624f, -0.004793945555080395f, -0.004850934034146558f, -0.004882226702754321f, -0.0048676915880072336f, -0.004830724267858526f, -0.004744211670717836f, -0.004679845752613664f, -0.0044872209617146264f, -0.00430234915359917f, -0.00409038228776031f, -0.003844927750717906f, -0.0035544479131191156f, -0.0032232880186703053f, -0.002852046995559706f, -0.0024431940709126166f, -0.0019959453275516293f, -0.001513042408400861f, -0.0009960858912993393f, -0.0004468586472420972f, 0.00013468497575733034f, 0.000747343502326168f, 0.0013898357056942158f, 0.002060545939187186f, 0.0027583339521850565f, 0.0034815655317932417f, 0.0042282532497063706f, 0.004996676470669485f, 0.005784833181478376f, 0.006590326243003574f, 0.007409498803939983f, 0.008239792436886467f, 0.009078269029911153f, 0.009922770498384883f, 0.01076893124527478f, 0.011615595553595912f, 0.012460805625966303f, 0.013305023583902025f, 0.014138892161398034f, 0.014958547931464929f, 0.015754734373077763f, 0.016556371762352782f, 0.017321310785546867f, 0.01807662270944155f, 0.018778566736118836f, 0.019493785943272113f, 0.020160473805793944f, 0.020789547478532025f, 0.021381320969019128f, 0.021942018077760837f, 0.02246557368980795f, 0.022949096520486198f, 0.023388683621208155f, 0.023784029052037404f, 0.02413238032215285f, 0.024432325076989975f, 0.02468253796689992f, 0.02488349665568337f, 0.02503473364515759f, 0.02513582054039397f, 0.025186284074643815f, 0.025186284074643815f, 0.02513582054039397f, 0.02503473364515759f, 0.02488349665568337f, 0.02468253796689992f, 0.024432325076989975f, 0.02413238032215285f, 0.023784029052037404f, 0.023388683621208155f, 0.022949096520486198f, 0.02246557368980795f, 0.021942018077760837f, 0.021381320969019128f, 0.020789547478532025f, 0.020160473805793944f, 0.019493785943272113f, 0.018778566736118836f, 0.01807662270944155f, 0.017321310785546867f, 0.016556371762352782f, 0.015754734373077763f, 0.014958547931464929f, 0.014138892161398034f, 0.013305023583902025f, 0.012460805625966303f, 0.011615595553595912f, 0.01076893124527478f, 0.009922770498384883f, 0.009078269029911153f, 0.008239792436886467f, 0.007409498803939983f, 0.006590326243003574f, 0.005784833181478376f, 0.004996676470669485f, 0.0042282532497063706f, 0.0034815655317932417f, 0.0027583339521850565f, 0.002060545939187186f, 0.0013898357056942158f, 0.000747343502326168f, 0.00013468497575733034f, -0.0004468586472420972f, -0.0009960858912993393f, -0.001513042408400861f, -0.0019959453275516293f, -0.0024431940709126166f, -0.002852046995559706f, -0.0032232880186703053f, -0.0035544479131191156f, -0.003844927750717906f, -0.00409038228776031f, -0.00430234915359917f, -0.0044872209617146264f, -0.004679845752613664f, -0.004744211670717836f, -0.004830724267858526f, -0.0048676915880072336f, -0.004882226702754321f, -0.004850934034146558f, -0.004793945555080395f, -0.004709172105291624f, -0.004597927496009218f, -0.004456711316352827f, -0.004289874078047064f, -0.0040999182032089975f, -0.0038899840990163485f, -0.0036603785887257922f, -0.0034133098994903795f, -0.0031504956628552066f, -0.0028740990267505048f, -0.002585370288116768f, -0.0022865329986336193f, -0.0019799853146573536f, -0.0016679911664585927f, -0.001352288789958951f, -0.0010345781126983354f, -0.0007168318959069872f, -0.00040018439806973987f, -0.00008589242788670133f, 0.00022504290225006584f, 0.0005304666712575737f, 0.0008304109705764811f, 0.0011247825923963559f, 0.001414783902719725f, 0.001697343014595121f, 0.001972732848411926f, 0.0022389914495120605f, 0.0024994585198891057f, 0.0027372083348269627f, 0.0029359689430925088f, 0.0029434362816407223f, 0.0032891969007221066f, 0.0034251083331524102f, 0.003570389880502825f, 0.0036944665141468605f, 0.003811898654149772f, 0.003910807222983513f, 0.003993299227443386f, 0.004059419988684275f, 0.004113548632279398f, 0.004154188589397751f, 0.004181436710680956f, 0.004195049333993395f, 0.004197313249896553f, 0.004189024633557977f, 0.004171330704066523f, 0.004145008295488616f, 0.004111633482933724f, 0.004072093429640854f, 0.004027204953874909f, 0.0039780781033141015f, 0.003926241364999738f, 0.0038732029974407676f, 0.003819940339882748f, 0.0037681053189869747f, 0.0037189575861326573f, 0.0036738655873837325f, 0.003632708493515057f, 0.0035974373631003486f, 0.003569618013347629f, 0.0035520735940582087f, 0.0035426515413241907f, 0.003542827033881285f, 0.003552242647927605f, 0.0035799221411175353f, 0.0036151277883324537f, 0.003666910567355903f, -0.09349821507735248f
};

// HighPassFilter implementation
HighPassFilter::HighPassFilter(double time_const, int freq) : 
    prev_input(0.0f), prev_output(0.0f) {
    alpha = std::exp((-1.0 / (time_const * freq)));
}

float HighPassFilter::get(float input) {
    prev_output = alpha * (prev_output + input - prev_input);
    prev_input = input;
    return prev_output;
}

// FIRFilter implementation
FIRFilter::FIRFilter(const std::vector<float>& coeffs) : 
    coefficients(coeffs), 
    buffer(coeffs.size(), 0.0f), 
    current_pos(0) {
}

void FIRFilter::add_sample(float value) {
    buffer[current_pos] = value;
    current_pos = (current_pos + 1) % buffer.size();
}

float FIRFilter::get_last() {
    return buffer[(current_pos + buffer.size() - 1) % buffer.size()];
}

float FIRFilter::get() {
    float acc = 0.0f;
    int len = buffer.size();
    int j = current_pos;
    
    for (int i = 0; i < len; i++) {
        acc += coefficients[i] * buffer[j];
        j = (j + 1) % len;
    }
    
    return acc;
}

// FIRHalfBandFilter implementation
FIRHalfBandFilter::FIRHalfBandFilter(const std::vector<float>& coeffs) : 
    FIRFilter(coeffs) {
}

float FIRHalfBandFilter::get() {
    int len = buffer.size();
    int mid = len / 2;
    
    float acc = 0.5f * buffer[(current_pos + mid) % len];
    int j = current_pos;
    int k = (current_pos + buffer.size() - 1) % buffer.size();
    
    for (int i = 0; i < mid; i += 2) {
        acc += coefficients[i] * (buffer[j] + buffer[k]);
        j = (j + 2) % len;
        k = (k - 2 + len) % len;
    }
    
    return acc;
}

// Filter_Cascade_40_1 implementation
Filter_Cascade_40_1::Filter_Cascade_40_1() : 
    FIRFilter(std::vector<float>()), // Empty coefficients since we're overriding behavior
    sample_cnt(0) {
    fir2_1 = std::make_unique<FIRHalfBandFilter>(FIR_HALF_BAND);
    fir2_2 = std::make_unique<FIRHalfBandFilter>(FIR_HALF_BAND);
    fir2_3 = std::make_unique<FIRHalfBandFilter>(FIR_HALF_BAND);
    fir5 = std::make_unique<FIRFilter>(FIR_5_TO_1);
}

void Filter_Cascade_40_1::add_sample(float value) {
    int i = ++sample_cnt;
    fir2_1->add_sample(value);
    
    if (i % 2 == 0) {
        fir2_2->add_sample(fir2_1->get());
        
        if (i % 4 == 0) {
            fir2_3->add_sample(fir2_2->get());
            
            if (i % 8 == 0) {
                fir5->add_sample(fir2_3->get());
            }
        }
    }
}

float Filter_Cascade_40_1::get() {
    return fir5->get();
}

// Filter_Cascade_32_1 implementation
Filter_Cascade_32_1::Filter_Cascade_32_1() : 
    FIRFilter(std::vector<float>()), // Empty coefficients since we're overriding behavior
    sample_cnt(0) {
    // Coefficients from the JS code
    const std::vector<float> filter1_coeffs = {
        -0.03171533865036624f, 0.0f, 0.28171337137114716f, 0.5f, 
        0.28171337137114716f, 0.0f, -0.03171533865036624f
    };
    
    const std::vector<float> filter3_coeffs = {
        0.006463652883377436f, 0.0f, -0.05057086353201489f, 0.0f, 
        0.2941083869114641f, 0.5f, 0.2941083869114641f, 0.0f, 
        -0.05057086353201489f, 0.0f, 0.006463652883377436f
    };
    
    const std::vector<float> filter4_coeffs = {
        0.008617456033360315f, 0.0f, -0.055858590442562465f, 0.0f, 
        0.2973198443911924f, 0.5f, 0.2973198443911924f, 0.0f, 
        -0.055858590442562465f, 0.0f, 0.008617456033360315f
    };
    
    const std::vector<float> filter5_coeffs = {
        -0.0008703171065093733f, -0.001111550243261059f, 0.0016791763634718098f, 0.0065629513301804256f, 0.006930696420325587f, -0.0012804774882072276f, -0.009570033303475958f, -0.004193346911575355f, 0.011788903142794962f, 0.014881338450761158f, -0.0069419479777090305f, -0.026869669528549692f, -0.008274709225594066f, 0.0347121911105144f, 0.03696484438079057f, -0.029171360239427818f, -0.08456317480317924f, -0.011142070661437575f, 0.1959897407866437f, 0.3830518681272077f, 0.3830518681272077f, 0.1959897407866437f, -0.011142070661437575f, -0.08456317480317924f, -0.029171360239427818f, 0.03696484438079057f, 0.0347121911105144f, -0.008274709225594066f, -0.026869669528549692f, -0.0069419479777090305f, 0.014881338450761158f, 0.011788903142794962f, -0.004193346911575355f, -0.009570033303475958f, -0.0012804774882072276f, 0.006930696420325587f, 0.0065629513301804256f, 0.0016791763634718098f, -0.001111550243261059f, -0.0008703171065093733f
    };
    
    fir2_1 = std::make_unique<FIRHalfBandFilter>(filter1_coeffs);
    fir2_2 = std::make_unique<FIRHalfBandFilter>(filter1_coeffs);
    fir2_3 = std::make_unique<FIRHalfBandFilter>(filter3_coeffs);
    fir2_4 = std::make_unique<FIRHalfBandFilter>(filter4_coeffs);
    fir2_5 = std::make_unique<FIRFilter>(filter5_coeffs);
}

void Filter_Cascade_32_1::add_sample(float value) {
    int i = ++sample_cnt;
    fir2_1->add_sample(value);
    
    if (i % 2 == 0) {
        fir2_2->add_sample(fir2_1->get());
        
        if (i % 4 == 0) {
            fir2_3->add_sample(fir2_2->get());
            
            if (i % 8 == 0) {
                fir2_4->add_sample(fir2_3->get());
                
                if (i % 16 == 0) {
                    fir2_5->add_sample(fir2_4->get());
                }
            }
        }
    }
}

float Filter_Cascade_32_1::get() {
    return fir2_5->get();
}