PC     Output      Line
040000             0001  
040000             0002  ;
040000             0003  ; ###########################################
040000             0004  ; Combined file nurples.cmb.asm
040000             0005  ; ###########################################
040000             0006  ;
040000             0007  
040000             0008  ; macro files generally want to go here, before any of the other includes
040000             0009  ; which call the macro, otherwise the assembler won't have the macro
040000             0010  ; available to run when it is called, and will fail with something
040000             0011  ; along the lines of 'invalid label' at such and such a line
040000             0012  
040000             0013  ;
040000             0014  ; ###########################################
040000             0015  ; Included from: ../agon_api/asm/macros.inc
040000             0016  ; ###########################################
040000             0017  ;
040000             0018  
040000             0019  ; https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
040000             0020  ; Macro for loading bitmaps to VDP buffers
040000             0021  	macro LOADBMP n,width,height,file
040000             0022  	db 23,27,0  ; VDU 23, 27, 0 select bitmap
040000             0023  	db n      ; specify target bitmap number (8-bits)
040000             0024  	db 23,27,1  ; load bitmap data
040000             0025      dw width    ; in pixels
040000             0026      dw height   ; in pixels
040000             0027  	incbin file ; path to file containing binary bitmap data
040000             0028  	endmacro
040000             0029  
040000             0030  ; https://discord.com/channels/1158535358624039014/1158536809916149831/1208492884861653145
040000             0031  	; load an rgba2222 bitmap to a 16-bit bufferId
040000             0032  	macro LOADBMPBUFFER2 bufferId,width,height,file
040000             0033  
040000             0034      ; Clear buffer
040000             0035      db 23,0,0xA0
040000             0036      dw bufferId
040000             0037      db 2
040000             0038  
040000             0039      db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
040000             0040      dw bufferId
040000             0041  
040000             0042      ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
040000             0043      db 23,0,0xA0
040000             0044      dw bufferId
040000             0045      db 0
040000             0046  	dw width * height ; length of data in bytes
040000             0047      incbin file ; bitmap data
040000             0048  
040000             0049      ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
040000             0050      db 23,27,0x21
040000             0051      dw width ; in pixels
040000             0052      dw height ; in pixels
040000             0053      db 1 ; bitmap format: 1 = RGBA2222 (1-bytes per pixel)
040000             0054      endmacro
040000             0055  
040000             0056  	; load an rgba8888 bitmap to a 16-bit bufferId
040000             0057  	macro LOADBMPBUFFER8 bufferId,width,height,file
040000             0058  
040000             0059      ; Clear buffer
040000             0060      db 23,0,0xA0
040000             0061      dw bufferId
040000             0062      db 2
040000             0063  
040000             0064      db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
040000             0065      dw bufferId
040000             0066  
040000             0067      ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
040000             0068      db 23,0,0xA0
040000             0069      dw bufferId
040000             0070      db 0
040000             0071  	dw width * height * 4 ; length of data in bytes
040000             0072      incbin file ; bitmap data
040000             0073  
040000             0074      ;Create bitmap from selected buffer :: VDU 23, 27, &21, w; h; format
040000             0075      db 23,27,0x21
040000             0076      dw width ; in pixels
040000             0077      dw height ; in pixels
040000             0078      db 0 ; bitmap format: 0 = RGBA8888 (4-bytes per pixel)
040000             0079      endmacro
040000             0080  ;
040000             0081  ; ###########################################
040000             0082  ; Continuing nurples.asm
040000             0083  ; ###########################################
040000             0084  ;
040000             0085  
040000             0086  ;MOS INITIALIATION MUST GO HERE BEFORE ANY OTHER CODE
040000             0087      .assume adl=1
040000             0088      .org 0x040000
040000             0089  
040000 C3 45 00 04 0090      jp start
040004             0091  
040004 FF FF FF FF 0092      .align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0093      .db "MOS"
040043 00          0094      .db 00h
040044 01          0095      .db 01h
040045             0096  
040045             0097  start:
040045 F5          0098      push af
040046 C5          0099      push bc
040047 D5          0100      push de
040048 DD E5       0101      push ix
04004A FD E5       0102      push iy
04004C             0103  
04004C             0104  ; ###############################################
04004C             0105  ; ez80asmLinker.py loader code goes here if used.
04004C             0106      ; 0x01: mos_load
04004C             0107      ; Load a file from SD card
04004C             0108      ; Parameters:
04004C             0109      ;     HL(U): Address of filename (zero terminated)
04004C             0110      ;     DE(U): Address at which to load
04004C             0111      ;     BC(U): Maximum allowed size (bytes)
04004C             0112      ; Returns:
04004C             0113      ;     A: File error, or 0 if OK
04004C             0114      ;     F: Carry reset if no room for file, otherwise set
04004C             0115      ; mos_load:            EQU    01h
04004C             0116  
04004C 21 70 00 04 0117      ld hl,nurples_init_file
040050             0118  nurples_init_addr:
040050 11 00 00 04 0119      ld de,0x040000
040054             0120  nurples_init_bytes:
040054 01 00 00 00 0121      ld bc,0x000000
040058 3E 01       0122      LD A,01h ; mos_load constant
04005A 5B CF       0123      RST.LIL 08h ; execute MOS function
04005C             0124  
04005C 21 81 00 04 0125      ld hl,nurples_main_file
040060             0126  nurples_main_addr:
040060 11 00 00 04 0127      ld de,0x040000
040064             0128  nurples_main_bytes:
040064 01 00 00 00 0129      ld bc,0x000000
040068 3E 01       0130      LD A,01h ; mos_load constant
04006A 5B CF       0131      RST.LIL 08h ; execute MOS function
04006C             0132  
04006C C3 92 00 04 0133      jp end_ez80asmLinker_loader
040070             0134  
040070             0135  
040070 6E 75 72 70 0136  nurples_init_file: db "nurples_init.bin",0
       6C 65 73 5F 
       69 6E 69 74 
       2E 62 69 6E 
       00          
040081             0137  
040081             0138  
040081 6E 75 72 70 0139  nurples_main_file: db "nurples_main.bin",0
       6C 65 73 5F 
       6D 61 69 6E 
       2E 62 69 6E 
       00          
040092             0140  
040092             0141  end_ez80asmLinker_loader:
040092             0142  ; ###############################################
040092             0143  
040092             0144  ; ###############################################
040092 CD B9 52 04 0145  	call	init			; Initialization code
040096 CD 97 6B 04 0146  	call 	main			; Call the main function
04009A             0147  ; ###############################################
04009A             0148  
04009A             0149  exit:
04009A             0150  
04009A FD E1       0151      pop iy                              ; Pop all registers back from the stack
04009C DD E1       0152      pop ix
04009E D1          0153      pop de
04009F C1          0154      pop bc
0400A0 F1          0155      pop af
0400A1 21 00 00 00 0156      ld hl,0                             ; Load the MOS API return code (0) for no errors.
0400A5             0157  
0400A5 C9          0158      ret                                 ; Return MOS
0400A6             0159  
0400A6             0160  
0400A6             0161  ;
0400A6             0162  ; ###########################################
0400A6             0163  ; Combined file nurples_init.cmb.asm
0400A6             0164  ; ###########################################
0400A6             0165  ;
0400A6             0166  
0400A6             0167  ; after this we can put includes in any order we wish, even in between
0400A6             0168  ; code blocks if there is any program-dependent or asethetic reason to do so
0400A6             0169  
0400A6             0170  ;
0400A6             0171  ; ###########################################
0400A6             0172  ; Included from: images2.asm
0400A6             0173  ; ###########################################
0400A6             0174  ;
0400A6             0175  ; Bitmap indices:
0400A6             0176  BUF_0TILE_EMPTY: equ $0100
0400A6             0177  BUF_1TILE_CROSS: equ $0101
0400A6             0178  BUF_2TILE_HORIZ: equ $0102
0400A6             0179  BUF_3TILE_VERT: equ $0103
0400A6             0180  BUF_4TILE_SQUARE: equ $0104
0400A6             0181  BUF_5TILE_CIRCLE: equ $0105
0400A6             0182  BUF_6TILE_PAD: equ $0106
0400A6             0183  BUF_7TILE_TURRET: equ $0107
0400A6             0184  BUF_CIRCLE: equ $0108
0400A6             0185  BUF_CRATER: equ $0109
0400A6             0186  BUF_EXPLOSION_A: equ $010A
0400A6             0187  BUF_EXPLOSION_B: equ $010B
0400A6             0188  BUF_EXPLOSION_C: equ $010C
0400A6             0189  BUF_EXPLOSION_D: equ $010D
0400A6             0190  BUF_EXPLOSION_E: equ $010E
0400A6             0191  BUF_FIREBALL_A: equ $010F
0400A6             0192  BUF_FIREBALL_B: equ $0110
0400A6             0193  BUF_LASER_A: equ $0111
0400A6             0194  BUF_LASER_B: equ $0112
0400A6             0195  BUF_PAD: equ $0113
0400A6             0196  BUF_SEEKER_000: equ $0114
0400A6             0197  BUF_SEEKER_001: equ $0115
0400A6             0198  BUF_SEEKER_002: equ $0116
0400A6             0199  BUF_SEEKER_003: equ $0117
0400A6             0200  BUF_SEEKER_004: equ $0118
0400A6             0201  BUF_SEEKER_005: equ $0119
0400A6             0202  BUF_SEEKER_006: equ $011A
0400A6             0203  BUF_SEEKER_007: equ $011B
0400A6             0204  BUF_SEEKER_008: equ $011C
0400A6             0205  BUF_SEEKER_009: equ $011D
0400A6             0206  BUF_SEEKER_010: equ $011E
0400A6             0207  BUF_SEEKER_011: equ $011F
0400A6             0208  BUF_SEEKER_012: equ $0120
0400A6             0209  BUF_SEEKER_013: equ $0121
0400A6             0210  BUF_SEEKER_014: equ $0122
0400A6             0211  BUF_SEEKER_015: equ $0123
0400A6             0212  BUF_SEEKER_016: equ $0124
0400A6             0213  BUF_SEEKER_017: equ $0125
0400A6             0214  BUF_SEEKER_018: equ $0126
0400A6             0215  BUF_SEEKER_019: equ $0127
0400A6             0216  BUF_SEEKER_020: equ $0128
0400A6             0217  BUF_SEEKER_021: equ $0129
0400A6             0218  BUF_SEEKER_022: equ $012A
0400A6             0219  BUF_SEEKER_023: equ $012B
0400A6             0220  BUF_SEEKER_024: equ $012C
0400A6             0221  BUF_SEEKER_025: equ $012D
0400A6             0222  BUF_SEEKER_026: equ $012E
0400A6             0223  BUF_SEEKER_027: equ $012F
0400A6             0224  BUF_SEEKER_028: equ $0130
0400A6             0225  BUF_SEEKER_029: equ $0131
0400A6             0226  BUF_SEEKER_030: equ $0132
0400A6             0227  BUF_SEEKER_031: equ $0133
0400A6             0228  BUF_SHIP_0L: equ $0134
0400A6             0229  BUF_SHIP_1C: equ $0135
0400A6             0230  BUF_SHIP_2R: equ $0136
0400A6             0231  BUF_SHIP_SMALL: equ $0137
0400A6             0232  BUF_STAR: equ $0138
0400A6             0233  BUF_TURRET: equ $0139
0400A6             0234  BUF_TURRET_ROT: equ $013A
0400A6             0235  
0400A6             0236  ; import .rgba bitmap files and load them into VDP buffers
0400A6             0237  bmp2_init:
0400A6 21 B1 00 04 0238  	ld hl, @cmd
0400AA 01 76 3C 00 0239  	ld bc, @end-@cmd
0400AE 5B DF       0240  	rst.lil $18
0400B0 C9          0241  	ret
0400B1             0242  @cmd:
0400B1             0243  	LOADBMPBUFFER2 BUF_0TILE_EMPTY,16,16,"../rgba2/0tile_empty.rgba2"
0400B1             0001M 
0400B1             0002M     ; Clear buffer
0400B1 17 00 A0    0003M     db 23,0,0xA0
0400B4 00 01       0004M     dw bufferId
0400B6 02          0005M     db 2
0400B7             0006M 
0400B7 17 1B 20    0007M     db 23,27,0x20 ; select buffer VDU 23, 27, &20, bufferId;
0400BA 00 01       0008M     dw bufferId
0400BC             0009M 
0400BC             0010M     ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
0400BC 17 00 A0    0011M     db 23,0,0xA0
0400BF 00 01       0012M     dw bufferId
0400C1 00          0013M     db 0
0400C2 00 00       0014M 	dw width * height ; length of data in bytes
