PC     Output      Line
040000             0001       include "organ/src/asm/mos_api.asm"
040000             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.asm
040000             0002*  ; Title:	AGON MOS - API for user projects
040000             0003*  ; Author:	Dean Belfield
040000             0004*  ;			Adapted for agon-ez80asm by Jeroen Venema
040000             0005*  ;			Added MOS error codes for return in HL
040000             0006*  ; Created:	03/08/2022
040000             0007*  ; Last Updated:	10/08/2023
040000             0008*  ;
040000             0009*  ; Modinfo:
040000             0010*  ; 05/08/2022:	Added mos_feof
040000             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040000             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040000             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040000             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040000             0015*  ; 13/10/2022:	Added mos_oscli
040000             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040000             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040000             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040000             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040000             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040000             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040000             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040000             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040000             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040000             0025*  ; 19/05/2023:	Added sysvar_scrMode
040000             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040000             0027*  ; 03/08/2023:	Added mos_setkbvector
040000             0028*  ; 10/08/2023:	Added mos_getkbmap
040000             0029*  
040000             0030*  ; VDP control (VDU 23, 0, n)
040000             0031*  ;
040000             0032*  vdp_gp:				EQU 80h
040000             0033*  vdp_keycode:		EQU 81h
040000             0034*  vdp_cursor:			EQU	82h
040000             0035*  vdp_scrchar:		EQU	83h
040000             0036*  vdp_scrpixel:		EQU	84h
040000             0037*  vdp_audio:			EQU	85h
040000             0038*  vdp_mode:			EQU	86h
040000             0039*  vdp_rtc:			EQU	87h
040000             0040*  vdp_keystate:		EQU	88h
040000             0041*  vdp_logicalcoords:	EQU	C0h
040000             0042*  vdp_terminalmode:	EQU	FFh
040000             0043*  
040000             0044*  ; MOS high level functions
040000             0045*  ;
040000             0046*  mos_getkey:			EQU	00h
040000             0047*  mos_load:			EQU	01h
040000             0048*  mos_save:			EQU	02h
040000             0049*  mos_cd:				EQU	03h
040000             0050*  mos_dir:			EQU	04h
040000             0051*  mos_del:			EQU	05h
040000             0052*  mos_ren:			EQU	06h
040000             0053*  mos_mkdir:			EQU	07h
040000             0054*  mos_sysvars:		EQU	08h
040000             0055*  mos_editline:		EQU	09h
040000             0056*  mos_fopen:			EQU	0Ah
040000             0057*  mos_fclose:			EQU	0Bh
040000             0058*  mos_fgetc:			EQU	0Ch
040000             0059*  mos_fputc:			EQU	0Dh
040000             0060*  mos_feof:			EQU	0Eh
040000             0061*  mos_getError:		EQU	0Fh
040000             0062*  mos_oscli:			EQU	10h
040000             0063*  mos_copy:			EQU	11h
040000             0064*  mos_getrtc:			EQU	12h
040000             0065*  mos_setrtc:			EQU	13h
040000             0066*  mos_setintvector:	EQU	14h
040000             0067*  mos_uopen:			EQU	15h
040000             0068*  mos_uclose:			EQU	16h
040000             0069*  mos_ugetc:			EQU	17h
040000             0070*  mos_uputc:			EQU	18h
040000             0071*  mos_getfil:			EQU	19h
040000             0072*  mos_fread:			EQU	1Ah
040000             0073*  mos_fwrite:			EQU	1Bh
040000             0074*  mos_flseek:			EQU	1Ch
040000             0075*  mos_setkbvector:	EQU	1Dh
040000             0076*  mos_getkbmap:		EQU	1Eh
040000             0077*  
040000             0078*  ; MOS program exit codes
040000             0079*  ;
040000             0080*  EXIT_OK:				EQU  0;	"OK",
040000             0081*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040000             0082*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040000             0083*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040000             0084*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040000             0085*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040000             0086*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040000             0087*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040000             0088*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040000             0089*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040000             0090*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040000             0091*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040000             0092*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040000             0093*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040000             0094*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040000             0095*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040000             0096*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040000             0097*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040000             0098*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040000             0099*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040000             0100*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040000             0101*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040000             0102*  ; FatFS file access functions
040000             0103*  ;
040000             0104*  ffs_fopen:			EQU	80h
040000             0105*  ffs_fclose:			EQU	81h
040000             0106*  ffs_fread:			EQU	82h
040000             0107*  ffs_fwrite:			EQU	83h
040000             0108*  ffs_flseek:			EQU	84h
040000             0109*  ffs_ftruncate:		EQU	85h
040000             0110*  ffs_fsync:			EQU	86h
040000             0111*  ffs_fforward:		EQU	87h
040000             0112*  ffs_fexpand:		EQU	88h
040000             0113*  ffs_fgets:			EQU	89h
040000             0114*  ffs_fputc:			EQU	8Ah
040000             0115*  ffs_fputs:			EQU	8Bh
040000             0116*  ffs_fprintf:		EQU	8Ch
040000             0117*  ffs_ftell:			EQU	8Dh
040000             0118*  ffs_feof:			EQU	8Eh
040000             0119*  ffs_fsize:			EQU	8Fh
040000             0120*  ffs_ferror:			EQU	90h
040000             0121*  
040000             0122*  ; FatFS directory access functions
040000             0123*  ;
040000             0124*  ffs_dopen:			EQU	91h
040000             0125*  ffs_dclose:			EQU	92h
040000             0126*  ffs_dread:			EQU	93h
040000             0127*  ffs_dfindfirst:		EQU	94h
040000             0128*  ffs_dfindnext:		EQU	95h
040000             0129*  
040000             0130*  ; FatFS file and directory management functions
040000             0131*  ;
040000             0132*  ffs_stat:			EQU	96h
040000             0133*  ffs_unlink:			EQU	97h
040000             0134*  ffs_rename:			EQU	98h
040000             0135*  ffs_chmod:			EQU	99h
040000             0136*  ffs_utime:			EQU	9Ah
040000             0137*  ffs_mkdir:			EQU	9Bh
040000             0138*  ffs_chdir:			EQU	9Ch
040000             0139*  ffs_chdrive:		EQU	9Dh
040000             0140*  ffs_getcwd:			EQU	9Eh
040000             0141*  
040000             0142*  ; FatFS volume management and system configuration functions
040000             0143*  ;
040000             0144*  ffs_mount:			EQU	9Fh
040000             0145*  ffs_mkfs:			EQU	A0h
040000             0146*  ffs_fdisk:			EQU	A1h
040000             0147*  ffs_getfree:		EQU	A2h
040000             0148*  ffs_getlabel:		EQU	A3h
040000             0149*  ffs_setlabel:		EQU	A4h
040000             0150*  ffs_setcp:			EQU	A5h
040000             0151*  
040000             0152*  ; File access modes
040000             0153*  ;
040000             0154*  fa_read:			EQU	01h
040000             0155*  fa_write:			EQU	02h
040000             0156*  fa_open_existing:	EQU	00h
040000             0157*  fa_create_new:		EQU	04h
040000             0158*  fa_create_always:	EQU	08h
040000             0159*  fa_open_always:		EQU	10h
040000             0160*  fa_open_append:		EQU	30h
040000             0161*  
040000             0162*  ; System variable indexes for api_sysvars
040000             0163*  ; Index into _sysvars in globals.asm
040000             0164*  ;
040000             0165*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040000             0166*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040000             0167*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040000             0168*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040000             0169*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040000             0170*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040000             0171*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040000             0172*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040000             0173*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040000             0174*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040000             0175*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040000             0176*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040000             0177*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040000             0178*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040000             0179*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040000             0180*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040000             0181*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040000             0182*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040000             0183*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040000             0184*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040000             0185*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040000             0186*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040000             0187*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040000             0188*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040000             0189*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040000             0190*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040000             0191*  
040000             0192*  ; Flags for the VPD protocol
040000             0193*  ;
040000             0194*  vdp_pflag_cursor:		EQU	00000001b
040000             0195*  vdp_pflag_scrchar:		EQU	00000010b
040000             0196*  vdp_pflag_point:		EQU	00000100b
040000             0197*  vdp_pflag_audio:		EQU	00001000b
040000             0198*  vdp_pflag_mode:			EQU	00010000b
040000             0199*  vdp_pflag_rtc:			EQU	00100000b
040000             0200*  
040000             0201*  ;
040000             0202*  ; FatFS structures
040000             0203*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040000             0204*  ;
040000             0205*  ; Object ID and allocation information (FFOBJID)
040000             0206*  ;
040000             0207*  ; Indexes into FFOBJID structure
040000             0208*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040000             0209*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040000             0210*  ffobjid_attr:		EQU	5	; 1: Object attribute
040000             0211*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040000             0212*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040000             0213*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040000             0214*  ;
040000             0215*  ; File object structure (FIL)
040000             0216*  ;
040000             0217*  ; Indexes into FIL structure
040000             0218*  fil_obj:		EQU 0	; 15: Object identifier
040000             0219*  fil_flag:		EQU	15 	;  1: File status flags
040000             0220*  fil_err:		EQU	16	;  1: Abort flag (error code)
040000             0221*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040000             0222*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040000             0223*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040000             0224*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040000             0225*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040000             0226*  ;
040000             0227*  ; Directory object structure (DIR)
040000             0228*  ; Indexes into DIR structure
040000             0229*  dir_obj:		EQU  0	; 15: Object identifier
040000             0230*  dir_dptr:		EQU	15	;  4: Current read/write offset
040000             0231*  dir_clust:		EQU	19	;  4: Current cluster
040000             0232*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040000             0233*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040000             0234*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040000             0235*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040000             0236*  ;
040000             0237*  ; File information structure (FILINFO)
040000             0238*  ;
040000             0239*  ; Indexes into FILINFO structure
040000             0240*  filinfo_fsize:		EQU 0	;   4: File size
040000             0241*  filinfo_fdate:		EQU	4	;   2: Modified date
040000             0242*  filinfo_ftime:		EQU	6	;   2: Modified time
040000             0243*  filinfo_fattrib:	EQU	8	;   1: File attribute
040000             0244*  filinfo_altname:	EQU	9	;  13: Alternative file name
040000             0245*  filinfo_fname:		EQU	22	; 256: Primary file name
040000             0246*  ;
040000             0247*  ; Macro for calling the API
040000             0248*  ; Parameters:
040000             0249*  ; - function: One of the function numbers listed above
040000             0250*  ;
040000             0251*  	MACRO	MOSCALL	function
040000             0252*  			LD	A, function
040000             0253*  			RST.LIL	08h
040000             0254*  	ENDMACRO
040000             0002   
040000             0003   ; Command 4: Set waveform
040000             0004   ; VDU 23, 0, &85, channel, 4, 8, bufferId;
040000             0005       MACRO WAVEFORM_SAMPLE channel, buffer_id
040000             0006       ld hl, @startChannel
040000             0007       ld bc, @endChannel - @startChannel
040000             0008       rst.lil $18
040000             0009       jr @endChannel
040000             0010   @startChannel:
040000             0011       .db 23,0,$85    ; do sound
040000             0012       .db channel,4,8 ; channel, command, waveform
040000             0013       .dw buffer_id
040000             0014   @endChannel:
040000             0015       ENDMACRO
040000             0016   
040000             0017   ;MOS INITIALIATION
040000             0018       .assume adl=1
040000             0019       .org 0x040000
040000             0020   
040000 C3 45 00 04 0021       jp start
040004             0022   
040004 FF FF FF FF 0023       .align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0024       .db "MOS"
040043 00          0025       .db 00h
040044 01          0026       .db 01h
040045             0027   
040045             0028   start:
040045 F5          0029       push af
040046 C5          0030       push bc
040047 D5          0031       push de
040048 DD E5       0032       push ix
04004A FD E5       0033       push iy
04004C             0034   
04004C             0035   ; ###############################################
04004C CD 64 00 04 0036   	call	init			; Initialization code
040050 CD B3 0D 04 0037   	call 	main			; Call the main function
040054             0038   ; ###############################################
040054             0039   
040054 CD 83 09 04 0040       call cursor_on
040058             0041   
040058             0042   exit:
040058 FD E1       0043       pop iy                              ; Pop all registers back from the stack
04005A DD E1       0044       pop ix
04005C D1          0045       pop de
04005D C1          0046       pop bc
04005E F1          0047       pop af
04005F 21 00 00 00 0048       ld hl,0                             ; Load the MOS API return code (0) for no errors.
040063             0049   
040063 C9          0050       ret                                 ; Return MOS
040064             0051   
040064             0052   ; ###############################################
040064             0053   ; Initialization
040064             0054   ; ###############################################
040064             0055   init:
040064             0056   ; enable all the channels
040064 21 72 00 04 0057       ld hl, enable_channels_cmd
040068 01 91 00 00 0058       ld bc, enable_channels_end - enable_channels_cmd
04006C 5B DF       0059       rst.lil $18
04006E C3 03 01 04 0060       jp enable_channels_end
040072             0061   enable_channels_cmd:
040072 17 00 85 03 0062       db 23, 0, $85, 3, 8
       08          
040077 17 00 85 04 0063       db 23, 0, $85, 4, 8
       08          
04007C 17 00 85 05 0064       db 23, 0, $85, 5, 8
       08          
040081 17 00 85 06 0065       db 23, 0, $85, 6, 8
       08          
040086 17 00 85 07 0066       db 23, 0, $85, 7, 8
       08          
04008B 17 00 85 08 0067       db 23, 0, $85, 8, 8
       08          
040090 17 00 85 09 0068       db 23, 0, $85, 9, 8
       08          
040095 17 00 85 0A 0069       db 23, 0, $85, 10, 8
       08          
04009A 17 00 85 0B 0070       db 23, 0, $85, 11, 8
       08          
04009F 17 00 85 0C 0071       db 23, 0, $85, 12, 8
       08          
0400A4 17 00 85 0D 0072       db 23, 0, $85, 13, 8
       08          
0400A9 17 00 85 0E 0073       db 23, 0, $85, 14, 8
       08          
0400AE 17 00 85 0F 0074       db 23, 0, $85, 15, 8
       08          
0400B3 17 00 85 10 0075       db 23, 0, $85, 16, 8
       08          
0400B8 17 00 85 11 0076       db 23, 0, $85, 17, 8
       08          
0400BD 17 00 85 12 0077       db 23, 0, $85, 18, 8
       08          
0400C2 17 00 85 13 0078       db 23, 0, $85, 19, 8
       08          
0400C7 17 00 85 14 0079       db 23, 0, $85, 20, 8
       08          
0400CC 17 00 85 15 0080       db 23, 0, $85, 21, 8
       08          
0400D1 17 00 85 16 0081       db 23, 0, $85, 22, 8
       08          
0400D6 17 00 85 17 0082       db 23, 0, $85, 23, 8
       08          
0400DB 17 00 85 18 0083       db 23, 0, $85, 24, 8
       08          
0400E0 17 00 85 19 0084       db 23, 0, $85, 25, 8
       08          
0400E5 17 00 85 1A 0085       db 23, 0, $85, 26, 8
       08          
0400EA 17 00 85 1B 0086       db 23, 0, $85, 27, 8
       08          
0400EF 17 00 85 1C 0087       db 23, 0, $85, 28, 8
       08          
0400F4 17 00 85 1D 0088       db 23, 0, $85, 29, 8
       08          
0400F9 17 00 85 1E 0089       db 23, 0, $85, 30, 8
       08          
0400FE 17 00 85 1F 0090       db 23, 0, $85, 31, 8
       08          
040103             0091   enable_channels_end:
040103             0092   
040103             0093   waveform_square: equ 0 ; square wave
040103             0094   waveform_triangle: equ 1 ; triangle wave
040103             0095   waveform_sawtooth: equ 2 ; sawtooth wave
040103             0096   waveform_sine: equ 3 ; sine wave
040103             0097   waveform_noise: equ 4 ; noise wave
040103             0098   waveform_vic_noise: equ 5 ; VIC noise wave
040103             0099   waveform_sample: equ 8 ; PCM sound sample
040103             0100   
040103             0101   waveform: equ waveform_sine
040103             0102   
040103             0103   ; set waveform for all channels
040103 21 11 01 04 0104       ld hl, waveform_channels_cmd
040107 01 C0 00 00 0105       ld bc, waveform_channels_end - waveform_channels_cmd
04010B 5B DF       0106       rst.lil $18
04010D C3 D1 01 04 0107       jp waveform_channels_end
040111             0108   waveform_channels_cmd:
040111 17 00 85 00 0109       db 23, 0, $85, 0, 4, waveform
       04 03       
040117 17 00 85 01 0110       db 23, 0, $85, 1, 4, waveform
       04 03       
04011D 17 00 85 02 0111       db 23, 0, $85, 2, 4, waveform
       04 03       
040123 17 00 85 03 0112       db 23, 0, $85, 3, 4, waveform
       04 03       
040129 17 00 85 04 0113       db 23, 0, $85, 4, 4, waveform
       04 03       
04012F 17 00 85 05 0114       db 23, 0, $85, 5, 4, waveform
       04 03       
040135 17 00 85 06 0115       db 23, 0, $85, 6, 4, waveform
       04 03       
04013B 17 00 85 07 0116       db 23, 0, $85, 7, 4, waveform
       04 03       
040141 17 00 85 08 0117       db 23, 0, $85, 8, 4, waveform
       04 03       
040147 17 00 85 09 0118       db 23, 0, $85, 9, 4, waveform
       04 03       
04014D 17 00 85 0A 0119       db 23, 0, $85, 10, 4, waveform
       04 03       
040153 17 00 85 0B 0120       db 23, 0, $85, 11, 4, waveform
       04 03       
040159 17 00 85 0C 0121       db 23, 0, $85, 12, 4, waveform
       04 03       
04015F 17 00 85 0D 0122       db 23, 0, $85, 13, 4, waveform
       04 03       
040165 17 00 85 0E 0123       db 23, 0, $85, 14, 4, waveform
       04 03       
04016B 17 00 85 0F 0124       db 23, 0, $85, 15, 4, waveform
       04 03       
040171 17 00 85 10 0125       db 23, 0, $85, 16, 4, waveform
       04 03       
040177 17 00 85 11 0126       db 23, 0, $85, 17, 4, waveform
       04 03       
04017D 17 00 85 12 0127       db 23, 0, $85, 18, 4, waveform
       04 03       
040183 17 00 85 13 0128       db 23, 0, $85, 19, 4, waveform
       04 03       
040189 17 00 85 14 0129       db 23, 0, $85, 20, 4, waveform
       04 03       
04018F 17 00 85 15 0130       db 23, 0, $85, 21, 4, waveform
       04 03       
040195 17 00 85 16 0131       db 23, 0, $85, 22, 4, waveform
       04 03       
04019B 17 00 85 17 0132       db 23, 0, $85, 23, 4, waveform
       04 03       
0401A1 17 00 85 18 0133       db 23, 0, $85, 24, 4, waveform
       04 03       
0401A7 17 00 85 19 0134       db 23, 0, $85, 25, 4, waveform
       04 03       
0401AD 17 00 85 1A 0135       db 23, 0, $85, 26, 4, waveform
       04 03       
0401B3 17 00 85 1B 0136       db 23, 0, $85, 27, 4, waveform
       04 03       
0401B9 17 00 85 1C 0137       db 23, 0, $85, 28, 4, waveform
       04 03       
0401BF 17 00 85 1D 0138       db 23, 0, $85, 29, 4, waveform
       04 03       
0401C5 17 00 85 1E 0139       db 23, 0, $85, 30, 4, waveform
       04 03       
0401CB 17 00 85 1F 0140       db 23, 0, $85, 31, 4, waveform
       04 03       
0401D1             0141   waveform_channels_end:
0401D1             0142   
0401D1 3E 03       0143       ld a,3
0401D3 CD 1A 08 04 0144       call vdu_set_screen_mode
0401D7             0145   
0401D7 CD 91 09 04 0146       call cursor_off
0401DB CD 8D 07 04 0147       call vdu_cls
0401DF C9          0148       ret
0401E0             0149   
0401E0             0150       include "organ/src/asm/functions.asm"
0401E0             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
0401E0             0002*  ; Print a zero-terminated string
0401E0             0003*  ; HL: Pointer to string
0401E0             0004*  printString:
0401E0 C5          0005*  	PUSH	BC
0401E1 01 00 00 00 0006*  	LD		BC,0
0401E5 3E 00       0007*  	LD 	 	A,0
0401E7 5B DF       0008*  	RST.LIL 18h
0401E9 C1          0009*  	POP		BC
0401EA C9          0010*  	RET
0401EB             0011*  ; print a VDU sequence
0401EB             0012*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
0401EB             0013*  sendVDUsequence:
0401EB C5          0014*  	PUSH	BC
0401EC 01 00 00 00 0015*  	LD		BC, 0
0401F0 4E          0016*  	LD		C, (HL)
0401F1 5B DF       0017*  	RST.LIL	18h
0401F3 C1          0018*  	POP		BC
0401F4 C9          0019*  	RET
0401F5             0020*  ; Print Newline sequence to VDP
0401F5             0021*  printNewline:
0401F5 3E 0D       0022*  	LD	A, '\r'
0401F7 5B D7       0023*  	RST.LIL 10h
0401F9 3E 0A       0024*  	LD	A, '\n'
0401FB 5B D7       0025*  	RST.LIL 10h
0401FD C9          0026*  	RET
0401FE             0027*  ; Print a 24-bit HEX number
0401FE             0028*  ; HLU: Number to print
0401FE             0029*  printHex24:
0401FE E5          0030*  	PUSH	HL
0401FF 21 02 00 00 0031*  	LD		HL, 2
040203 39          0032*  	ADD		HL, SP
040204 7E          0033*  	LD		A, (HL)
040205 E1          0034*  	POP		HL
040206 CD 10 02 04 0035*  	CALL	printHex8
04020A             0036*  ; Print a 16-bit HEX number
04020A             0037*  ; HL: Number to print
04020A             0038*  printHex16:
04020A 7C          0039*  	LD		A,H
04020B CD 10 02 04 0040*  	CALL	printHex8
04020F 7D          0041*  	LD		A,L
040210             0042*  ; Print an 8-bit HEX number
040210             0043*  ; A: Number to print
040210             0044*  printHex8:
040210 4F          0045*  	LD		C,A
040211 1F          0046*  	RRA
040212 1F          0047*  	RRA
040213 1F          0048*  	RRA
040214 1F          0049*  	RRA
040215 CD 1A 02 04 0050*  	CALL	@F
040219 79          0051*  	LD		A,C
04021A             0052*  @@:
04021A E6 0F       0053*  	AND		0Fh
04021C C6 90       0054*  	ADD		A,90h
04021E 27          0055*  	DAA
04021F CE 40       0056*  	ADC		A,40h
040221 27          0057*  	DAA
040222 5B D7       0058*  	RST.LIL	10h
040224 C9          0059*  	RET
040225             0060*  
040225             0061*  ; Print a 0x HEX prefix
040225             0062*  DisplayHexPrefix:
040225 3E 30       0063*  	LD	A, '0'
040227 5B D7       0064*  	RST.LIL 10h
040229 3E 78       0065*  	LD	A, 'x'
04022B 5B D7       0066*  	RST.LIL 10h
04022D C9          0067*  	RET
04022E             0068*  
04022E             0069*  ; Prints the decimal value in HL without leading zeroes
04022E             0070*  ; HL : Value to print
04022E             0071*  printDec:
04022E 11 3F 02 04 0072*  	LD	 DE, _printDecBuffer
040232 CD 48 02 04 0073*  	CALL Num2String
040236 21 3F 02 04 0074*  	LD	 HL, _printDecBuffer
04023A CD E0 01 04 0075*  	CALL printString
04023E C9          0076*  	RET
04023F             0077*  _printDecBuffer:
04023F             0078*  	DS 9
040248             0079*  ; This routine converts the value from HL into it's ASCII representation,
040248             0080*  ; starting to memory location pointing by DE, in decimal form and with trailing zeroes
040248             0081*  ; so it will allways be 5 characters length
040248             0082*  ; HL : Value to convert to string
040248             0083*  ; DE : pointer to buffer, at least 8 byte + 0
040248             0084*  Num2String:
040248 D5          0085*  	PUSH DE
040249 CD 67 02 04 0086*  	CALL Num2String_worker
04024D 3E 00       0087*  	LD	 A, 0
04024F 12          0088*  	LD	 (DE), A	; terminate string
040250 D1          0089*  	POP  DE
040251 D5          0090*  	PUSH DE
040252             0091*  @findfirstzero:
040252 1A          0092*  	LD	 A, (DE)
040253 FE 30       0093*  	CP	 '0'
040255 20 03       0094*  	JR	 NZ, @done
040257 13          0095*  	INC  DE
040258 18 F8       0096*  	JR	 @findfirstzero
04025A             0097*  @done:
04025A B7          0098*  	OR	 A	; end-of-string reached / was the value 0?
04025B 20 01       0099*  	JR	 NZ, @removezeroes
04025D 1B          0100*  	DEC  DE
04025E             0101*  @removezeroes:
04025E E1          0102*  	POP	 HL	; start of string, DE == start of first number
04025F             0103*  @copydigit:
04025F 1A          0104*  	LD	A, (DE)
040260 77          0105*  	LD	(HL), A
040261 B7          0106*  	OR  A
040262 C8          0107*  	RET	Z
040263 23          0108*  	INC	HL
040264 13          0109*  	INC DE
040265 18 F8       0110*  	JR	@copydigit
040267             0111*  
040267             0112*  Num2String_worker:
040267 01 80 69 67 0113*  	LD	 BC,-10000000
04026B CD 9E 02 04 0114*  	CALL OneDigit
04026F 01 C0 BD F0 0115*  	LD	 BC,-1000000
040273 CD 9E 02 04 0116*  	CALL OneDigit
040277 01 60 79 FE 0117*  	LD	 BC,-100000
04027B CD 9E 02 04 0118*  	CALL OneDigit
04027F 01 F0 D8 FF 0119*  	LD   BC,-10000
040283 CD 9E 02 04 0120*  	CALL OneDigit
040287 01 18 FC FF 0121*  	LD   BC,-1000
04028B CD 9E 02 04 0122*  	CALL OneDigit
04028F 01 9C FF FF 0123*  	LD   BC,-100
040293 CD 9E 02 04 0124*  	CALL OneDigit
040297 0E F6       0125*  	LD   C,-10
040299 CD 9E 02 04 0126*  	CALL OneDigit
04029D 48          0127*  	LD   C,B
04029E             0128*  OneDigit:
04029E 3E 2F       0129*  	LD   A,'0'-1
0402A0             0130*  DivideMe:
0402A0 3C          0131*  	INC  A
0402A1 09          0132*  	ADD  HL,BC
0402A2 38 FC       0133*  	JR   C,DivideMe
0402A4 ED 42       0134*  	SBC  HL,BC
0402A6 12          0135*  	LD   (DE),A
0402A7 13          0136*  	INC  DE
0402A8 C9          0137*  	RET
0402A9             0138*  
0402A9             0139*  
0402A9             0140*  ; #### new functions added by Brandon R. Gates ####
0402A9             0141*  
0402A9             0142*  ; print the binary representation of the 8-bit value in a
0402A9             0143*  ; destroys a, hl, bc
0402A9             0144*  printBin8:
0402A9 06 08       0145*      ld b,8      ; loop counter for 8 bits
0402AB 21 C6 02 04 0146*      ld hl,@cmd  ; set hl to the low byte of the output string
0402AF             0147*                  ; (which will be the high bit of the value in a)
0402AF             0148*  @loop:
0402AF 07          0149*      rlca ; put the next highest bit into carry
0402B0 38 04       0150*      jr c,@one
0402B2 36 30       0151*      ld (hl),'0'
0402B4 18 02       0152*      jr @next_bit
0402B6             0153*  @one:
0402B6 36 31       0154*      ld (hl),'1'
0402B8             0155*  @next_bit:
0402B8 23          0156*      inc hl
0402B9 10 F4       0157*      djnz @loop
0402BB             0158*  ; print it
0402BB 21 C6 02 04 0159*  	ld hl,@cmd
0402BF 01 08 00 00 0160*  	ld bc,@end-@cmd
0402C3 5B DF       0161*  	rst.lil $18
0402C5 C9          0162*  	ret
0402C6             0163*  @cmd: ds 8 ; eight bytes for eight bits
0402CE             0164*  @end:
0402CE             0165*  
0402CE             0166*  ; print the binary representation of the 8-bit value in a
0402CE             0167*  ; in reverse order (lsb first)
0402CE             0168*  ; destroys a, hl, bc
0402CE             0169*  printBin8Rev:
0402CE 06 08       0170*      ld b,8      ; loop counter for 8 bits
0402D0 21 EB 02 04 0171*      ld hl,@cmd  ; set hl to the low byte of the output string
0402D4             0172*                  ; (which will be the high bit of the value in a)
0402D4             0173*  @loop:
0402D4 0F          0174*      rrca ; put the next lowest bit into carry
0402D5 38 04       0175*      jr c,@one
0402D7 36 30       0176*      ld (hl),'0'
0402D9 18 02       0177*      jr @next_bit
0402DB             0178*  @one:
0402DB 36 31       0179*      ld (hl),'1'
0402DD             0180*  @next_bit:
0402DD 23          0181*      inc hl
0402DE 10 F4       0182*      djnz @loop
0402E0             0183*  ; print it
0402E0 21 EB 02 04 0184*  	ld hl,@cmd
0402E4 01 08 00 00 0185*  	ld bc,@end-@cmd
0402E8 5B DF       0186*  	rst.lil $18
0402EA C9          0187*  	ret
0402EB             0188*  @cmd: ds 8 ; eight bytes for eight bits
0402F3             0189*  @end:
0402F3             0190*  
0402F3             0191*  ; print registers to screen in hexidecimal format
0402F3             0192*  ; inputs: none
0402F3             0193*  ; outputs: values of every register printed to screen
0402F3             0194*  ;    values of each register in global scratch memory
0402F3             0195*  ; destroys: nothing
0402F3             0196*  stepRegistersHex:
0402F3             0197*  ; store everything in scratch
0402F3 22 F2 04 04 0198*      ld (uhl),hl
0402F7 ED 43 F5 04 0199*      ld (ubc),bc
       04          
0402FC ED 53 F8 04 0200*      ld (ude),de
       04          
040301 DD 22 FB 04 0201*      ld (uix),ix
       04          
040306 FD 22 FE 04 0202*      ld (uiy),iy
       04          
04030B F5          0203*      push af ; fml
04030C E1          0204*      pop hl  ; thanks, zilog
04030D 22 EF 04 04 0205*      ld (uaf),hl
040311 F5          0206*      push af ; dammit
040312             0207*  
040312             0208*  ; home the cursor
040312 CD C5 08 04 0209*      call vdu_home_cursor
040316             0210*  
040316             0211*  ; print each register
040316 21 7B 04 04 0212*      ld hl,str_afu
04031A CD E0 01 04 0213*      call printString
04031E 2A EF 04 04 0214*      ld hl,(uaf)
040322 CD FE 01 04 0215*      call printHex24
040326 CD F5 01 04 0216*      call printNewline
04032A             0217*  
04032A 21 7F 04 04 0218*      ld hl,str_hlu
04032E CD E0 01 04 0219*      call printString
040332 2A F2 04 04 0220*      ld hl,(uhl)
040336 CD FE 01 04 0221*      call printHex24
04033A CD F5 01 04 0222*      call printNewline
04033E             0223*  
04033E 21 83 04 04 0224*      ld hl,str_bcu
040342 CD E0 01 04 0225*      call printString
040346 2A F5 04 04 0226*      ld hl,(ubc)
04034A CD FE 01 04 0227*      call printHex24
04034E CD F5 01 04 0228*      call printNewline
040352             0229*  
040352 21 87 04 04 0230*      ld hl,str_deu
040356 CD E0 01 04 0231*      call printString
04035A 2A F8 04 04 0232*      ld hl,(ude)
04035E CD FE 01 04 0233*      call printHex24
040362 CD F5 01 04 0234*      call printNewline
040366             0235*  
040366 21 8B 04 04 0236*      ld hl,str_ixu
04036A CD E0 01 04 0237*      call printString
04036E 2A FB 04 04 0238*      ld hl,(uix)
040372 CD FE 01 04 0239*      call printHex24
040376 CD F5 01 04 0240*      call printNewline
04037A             0241*  
04037A 21 8F 04 04 0242*      ld hl,str_iyu
04037E CD E0 01 04 0243*      call printString
040382 2A FE 04 04 0244*      ld hl,(uiy)
040386 CD FE 01 04 0245*      call printHex24
04038A CD F5 01 04 0246*      call printNewline
04038E             0247*  
04038E             0248*      ; call vsync
04038E             0249*  
04038E CD F5 01 04 0250*      call printNewline
040392             0251*  
040392             0252*  ; check for escape key and quit if pressed
040392             0253*  	MOSCALL mos_getkbmap
040392 3E 1E       0001*M 			LD	A, function
040394 5B CF       0002*M 			RST.LIL	08h
040396             0254*  @stayhere:
040396             0255*  ; 113 Escape
040396 DD CB 0E 46 0256*      bit 0,(ix+14)
04039A 20 02       0257*      jr nz,@Escape
04039C 18 F8       0258*  	jr @stayhere
04039E             0259*  @Escape:
04039E DD CB 0E 86 0260*      res 0,(ix+14) ; debounce the key (hopefully)
0403A2 3E 80       0261*      ld a,%10000000
0403A4 CD EA 06 04 0262*      call multiPurposeDelay
0403A8             0263*  
0403A8             0264*  ; restore everything
0403A8 2A F2 04 04 0265*      ld hl, (uhl)
0403AC ED 4B F5 04 0266*      ld bc, (ubc)
       04          
0403B1 ED 5B F8 04 0267*      ld de, (ude)
       04          
0403B6 DD 2A FB 04 0268*      ld ix, (uix)
       04          
0403BB FD 2A FE 04 0269*      ld iy, (uiy)
       04          
0403C0 F1          0270*      pop af
0403C1             0271*  ; all done
0403C1 C9          0272*      ret
0403C2             0273*  
0403C2             0274*  ; print registers to screen in hexidecimal format
0403C2             0275*  ; inputs: none
0403C2             0276*  ; outputs: values of every register printed to screen
0403C2             0277*  ;    values of each register in global scratch memory
0403C2             0278*  ; destroys: nothing
0403C2             0279*  dumpRegistersHex:
0403C2             0280*  ; store everything in scratch
0403C2 22 F2 04 04 0281*      ld (uhl),hl
0403C6 ED 43 F5 04 0282*      ld (ubc),bc
       04          
0403CB ED 53 F8 04 0283*      ld (ude),de
       04          
0403D0 DD 22 FB 04 0284*      ld (uix),ix
       04          
0403D5 FD 22 FE 04 0285*      ld (uiy),iy
       04          
0403DA F5          0286*      push af ; fml
0403DB E1          0287*      pop hl  ; thanks, zilog
0403DC 22 EF 04 04 0288*      ld (uaf),hl
0403E0 F5          0289*      push af ; dammit
0403E1             0290*  
0403E1             0291*  ; home the cursor
0403E1             0292*      ; call vdu_home_cursor
0403E1             0293*  
0403E1             0294*  ; print each register
0403E1 21 7B 04 04 0295*      ld hl,str_afu
0403E5 CD E0 01 04 0296*      call printString
0403E9 2A EF 04 04 0297*      ld hl,(uaf)
0403ED CD FE 01 04 0298*      call printHex24
0403F1 CD F5 01 04 0299*      call printNewline
0403F5             0300*  
0403F5 21 7F 04 04 0301*      ld hl,str_hlu
0403F9 CD E0 01 04 0302*      call printString
0403FD 2A F2 04 04 0303*      ld hl,(uhl)
040401 CD FE 01 04 0304*      call printHex24
040405 CD F5 01 04 0305*      call printNewline
040409             0306*  
040409 21 83 04 04 0307*      ld hl,str_bcu
04040D CD E0 01 04 0308*      call printString
040411 2A F5 04 04 0309*      ld hl,(ubc)
040415 CD FE 01 04 0310*      call printHex24
040419 CD F5 01 04 0311*      call printNewline
04041D             0312*  
04041D 21 87 04 04 0313*      ld hl,str_deu
040421 CD E0 01 04 0314*      call printString
040425 2A F8 04 04 0315*      ld hl,(ude)
040429 CD FE 01 04 0316*      call printHex24
04042D CD F5 01 04 0317*      call printNewline
040431             0318*  
040431 21 8B 04 04 0319*      ld hl,str_ixu
040435 CD E0 01 04 0320*      call printString
040439 2A FB 04 04 0321*      ld hl,(uix)
04043D CD FE 01 04 0322*      call printHex24
040441 CD F5 01 04 0323*      call printNewline
040445             0324*  
040445 21 8F 04 04 0325*      ld hl,str_iyu
040449 CD E0 01 04 0326*      call printString
04044D 2A FE 04 04 0327*      ld hl,(uiy)
040451 CD FE 01 04 0328*      call printHex24
040455 CD F5 01 04 0329*      call printNewline
040459             0330*  
040459 CD 9F 09 04 0331*      call vdu_vblank
04045D             0332*  
04045D CD F5 01 04 0333*      call printNewline
040461             0334*  ; restore everything
040461 2A F2 04 04 0335*      ld hl, (uhl)
040465 ED 4B F5 04 0336*      ld bc, (ubc)
       04          
04046A ED 5B F8 04 0337*      ld de, (ude)
       04          
04046F DD 2A FB 04 0338*      ld ix, (uix)
       04          
040474 FD 2A FE 04 0339*      ld iy, (uiy)
       04          
040479 F1          0340*      pop af
04047A             0341*  ; all done
04047A C9          0342*      ret
04047B             0343*  
04047B 61 66 3D 00 0344*  str_afu: db "af=",0
04047F 68 6C 3D 00 0345*  str_hlu: db "hl=",0
040483 62 63 3D 00 0346*  str_bcu: db "bc=",0
040487 64 65 3D 00 0347*  str_deu: db "de=",0
04048B 69 78 3D 00 0348*  str_ixu: db "ix=",0
04048F 69 79 3D 00 0349*  str_iyu: db "iy=",0
040493             0350*  
040493             0351*  ; print udeuhl to screen in hexidecimal format
040493             0352*  ; inputs: none
040493             0353*  ; outputs: concatenated hexidecimal udeuhl
040493             0354*  ; destroys: nothing
040493             0355*  dumpUDEUHLHex:
040493             0356*  ; store everything in scratch
040493 22 F2 04 04 0357*      ld (uhl),hl
040497 ED 43 F5 04 0358*      ld (ubc),bc
       04          
04049C ED 53 F8 04 0359*      ld (ude),de
       04          
0404A1 DD 22 FB 04 0360*      ld (uix),ix
       04          
0404A6 FD 22 FE 04 0361*      ld (uiy),iy
       04          
0404AB F5          0362*      push af
0404AC             0363*  
0404AC             0364*  ; print each register
0404AC             0365*  
0404AC 21 E6 04 04 0366*      ld hl,str_udeuhl
0404B0 CD E0 01 04 0367*      call printString
0404B4 2A F8 04 04 0368*      ld hl,(ude)
0404B8 CD FE 01 04 0369*      call printHex24
0404BC 3E 2E       0370*  	ld a,'.'	; print a dot to separate the values
0404BE 5B D7       0371*  	rst.lil 10h
0404C0 2A F2 04 04 0372*      ld hl,(uhl)
0404C4 CD FE 01 04 0373*      call printHex24
0404C8 CD F5 01 04 0374*      call printNewline
0404CC             0375*  
0404CC             0376*  ; restore everything
0404CC 2A F2 04 04 0377*      ld hl, (uhl)
0404D0 ED 4B F5 04 0378*      ld bc, (ubc)
       04          
0404D5 ED 5B F8 04 0379*      ld de, (ude)
       04          
0404DA DD 2A FB 04 0380*      ld ix, (uix)
       04          
0404DF FD 2A FE 04 0381*      ld iy, (uiy)
       04          
0404E4 F1          0382*      pop af
0404E5             0383*  ; all done
0404E5 C9          0384*      ret
0404E6             0385*  
0404E6 75 64 65 2E 0386*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
0404EF             0387*  
0404EF             0388*  ; global scratch memory for registers
0404EF 00 00 00    0389*  uaf: dl 0
0404F2 00 00 00    0390*  uhl: dl 0
0404F5 00 00 00    0391*  ubc: dl 0
0404F8 00 00 00    0392*  ude: dl 0
0404FB 00 00 00    0393*  uix: dl 0
0404FE 00 00 00    0394*  uiy: dl 0
040501 00 00 00    0395*  usp: dl 0
040504 00 00 00    0396*  upc: dl 0
040507             0397*  
040507             0398*  ; inputs: whatever is in the flags register
040507             0399*  ; outputs: binary representation of flags
040507             0400*  ;          with a header so we know which is what
040507             0401*  ; destroys: nothing
040507             0402*  ; preserves: everything
040507             0403*  dumpFlags:
040507             0404*  ; first we curse zilog for not giving direct access to flags
040507 F5          0405*      push af ; this is so we can send it back unharmed
040508 F5          0406*      push af ; this is so we can pop it to hl
040509             0407*  ; store everything in scratch
040509 22 F2 04 04 0408*      ld (uhl),hl
04050D ED 43 F5 04 0409*      ld (ubc),bc
       04          
040512 ED 53 F8 04 0410*      ld (ude),de
       04          
040517 DD 22 FB 04 0411*      ld (uix),ix
       04          
04051C FD 22 FE 04 0412*      ld (uiy),iy
       04          
040521             0413*  ; next we print the header
040521 21 4D 05 04 0414*      ld hl,@header
040525 CD E0 01 04 0415*      call printString
040529 E1          0416*      pop hl ; flags are now in l
04052A 7D          0417*      ld a,l ; flags are now in a
04052B CD A9 02 04 0418*      call printBin8
04052F CD F5 01 04 0419*  	call printNewline
040533             0420*  ; restore everything
040533 2A F2 04 04 0421*      ld hl, (uhl)
040537 ED 4B F5 04 0422*      ld bc, (ubc)
       04          
04053C ED 5B F8 04 0423*      ld de, (ude)
       04          
040541 DD 2A FB 04 0424*      ld ix, (uix)
       04          
040546 FD 2A FE 04 0425*      ld iy, (uiy)
       04          
04054B F1          0426*      pop af ; send her home the way she came
04054C C9          0427*      ret
04054D             0428*  ; Bit 7 (S): Sign flag
04054D             0429*  ; Bit 6 (Z): Zero flag
04054D             0430*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
04054D             0431*  ; Bit 4 (H): Half Carry flag
04054D             0432*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
04054D             0433*  ; Bit 2 (PV): Parity/Overflow flag
04054D             0434*  ; Bit 1 (N): Subtract flag
04054D             0435*  ; Bit 0 (C): Carry flag
04054D 53 5A 78 48 0436*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
040558             0437*  
040558             0438*  ; set all the bits in the flag register
040558             0439*  ; more of an academic exercise than anything useful
040558             0440*  ; inputs; none
040558             0441*  ; outputs; a=0,f=255
040558             0442*  ; destroys: flags, hl
040558             0443*  ; preserves: a, because why not
040558             0444*  setAllFlags:
040558 21 FF 00 00 0445*      ld hl,255
04055C 67          0446*      ld h,a ; four cycles to preserve a is cheap
04055D E5          0447*      push hl
04055E F1          0448*      pop af
04055F C9          0449*      ret
040560             0450*  
040560             0451*  ; reset all the bits in the flag register
040560             0452*  ; unlike its inverse counterpart, this may actually be useful
040560             0453*  ; inputs; none
040560             0454*  ; outputs; a=0,f=0
040560             0455*  ; destroys: flags, hl
040560             0456*  ; preserves: a, because why not
040560             0457*  resetAllFlags:
040560 21 00 00 00 0458*      ld hl,0
040564 67          0459*      ld h,a ; four cycles to preserve a is cheap
040565 E5          0460*      push hl
040566 F1          0461*      pop af
040567 C9          0462*      ret
040568             0463*  
040568             0464*  
040568             0465*  ; print bytes from an address to the screen in hexidecimal format
040568             0466*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040568             0467*  ; outputs: values of each byte printed to screen separated by spaces
040568             0468*  ; destroys: nothing
040568             0469*  dumpMemoryHex:
040568             0470*  ; save all registers to the stack
040568 F5          0471*      push af
040569 C5          0472*      push bc
04056A D5          0473*      push de
04056B E5          0474*      push hl
04056C DD E5       0475*      push ix
04056E FD E5       0476*      push iy
040570             0477*  
040570             0478*  ; set b to be our loop counter
040570 47          0479*      ld b,a
040571             0480*  @loop:
040571             0481*  ; print the byte
040571 7E          0482*      ld a,(hl)
040572 CD 10 02 04 0483*      call printHex8
040576             0484*  ; print a space
040576 3E 20       0485*      ld a,' '
040578 5B D7       0486*      rst.lil 10h
04057A 23          0487*      inc hl
04057B 10 F4       0488*      djnz @loop
04057D CD F5 01 04 0489*      call printNewline
040581             0490*  
040581             0491*  ; restore everything
040581 FD E1       0492*      pop iy
040583 DD E1       0493*      pop ix
040585 E1          0494*      pop hl
040586 D1          0495*      pop de
040587 C1          0496*      pop bc
040588 F1          0497*      pop af
040589             0498*  ; all done
040589 C9          0499*      ret
04058A             0500*  
04058A             0501*  
04058A             0502*  ; print bytes from an address to the screen in binary format
04058A             0503*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04058A             0504*  ; outputs: values of each byte printed to screen separated by spaces
04058A             0505*  ; destroys: nothing
04058A             0506*  dumpMemoryBin:
04058A             0507*  ; save all registers to the stack
04058A F5          0508*      push af
04058B C5          0509*      push bc
04058C D5          0510*      push de
04058D E5          0511*      push hl
04058E DD E5       0512*      push ix
040590 FD E5       0513*      push iy
040592             0514*  
040592             0515*  ; set b to be our loop counter
040592 47          0516*      ld b,a
040593             0517*  @loop:
040593             0518*  ; print the byte
040593 7E          0519*      ld a,(hl)
040594 E5          0520*      push hl
040595 C5          0521*      push bc
040596 CD A9 02 04 0522*      call printBin8
04059A C1          0523*      pop bc
04059B             0524*  ; print a space
04059B 3E 20       0525*      ld a,' '
04059D 5B D7       0526*      rst.lil 10h
04059F E1          0527*      pop hl
0405A0 23          0528*      inc hl
0405A1 10 F0       0529*      djnz @loop
0405A3 CD F5 01 04 0530*      call printNewline
0405A7             0531*  
0405A7             0532*  ; restore everything
0405A7 FD E1       0533*      pop iy
0405A9 DD E1       0534*      pop ix
0405AB E1          0535*      pop hl
0405AC D1          0536*      pop de
0405AD C1          0537*      pop bc
0405AE F1          0538*      pop af
0405AF             0539*  ; all done
0405AF C9          0540*      ret
0405B0             0541*  
0405B0             0542*  ; print bytes from an address to the screen in binary format
0405B0             0543*  ; with the bits of each byte in reverse order (lsb first)
0405B0             0544*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0405B0             0545*  ; outputs: values of each byte printed to screen separated by spaces
0405B0             0546*  ; destroys: nothing
0405B0             0547*  dumpMemoryBinRev:
0405B0             0548*  ; save all registers to the stack
0405B0 F5          0549*      push af
0405B1 C5          0550*      push bc
0405B2 D5          0551*      push de
0405B3 E5          0552*      push hl
0405B4 DD E5       0553*      push ix
0405B6 FD E5       0554*      push iy
0405B8             0555*  
0405B8             0556*  ; set b to be our loop counter
0405B8 47          0557*      ld b,a
0405B9             0558*  @loop:
0405B9             0559*  ; print the byte
0405B9 7E          0560*      ld a,(hl)
0405BA E5          0561*      push hl
0405BB C5          0562*      push bc
0405BC CD CE 02 04 0563*      call printBin8Rev
0405C0 C1          0564*      pop bc
0405C1             0565*  ; print a space
0405C1 3E 20       0566*      ld a,' '
0405C3 5B D7       0567*      rst.lil 10h
0405C5 E1          0568*      pop hl
0405C6 23          0569*      inc hl
0405C7 10 F0       0570*      djnz @loop
0405C9 CD F5 01 04 0571*      call printNewline
0405CD             0572*  
0405CD             0573*  ; restore everything
0405CD FD E1       0574*      pop iy
0405CF DD E1       0575*      pop ix
0405D1 E1          0576*      pop hl
0405D2 D1          0577*      pop de
0405D3 C1          0578*      pop bc
0405D4 F1          0579*      pop af
0405D5             0580*  ; all done
0405D5 C9          0581*      ret
0405D6             0151       include "organ/src/asm/timer.asm"
0405D6             0001*  ; Table 32. Timer Control Registers
0405D6             0002*  ; this constant is the base address of the timer control registers
0405D6             0003*  ; each timer takes three bytes:
0405D6             0004*  ;   0: control register
0405D6             0005*  ;   1: low byte of timer reset value
0405D6             0006*  ;   2: high byte of timer reset value
0405D6             0007*  ; note that the value is only 8-bits, so we use in0/out0 i/o calls,
0405D6             0008*  ; which correctly force the high and upper bytes of the address bus to zero
0405D6             0009*  TMR_CTL:     equ 80h
0405D6             0010*  
0405D6             0011*  ; Timer Control Register Bit Definitions
0405D6             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0405D6             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
0405D6             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0405D6             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
0405D6             0016*                              ; the TMRx_CTL register is read.
0405D6             0017*  
0405D6             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0405D6             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0405D6             0020*  
0405D6             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0405D6             0022*                              ;  0, and counting stops when the end-of-count value is reached.
0405D6             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0405D6             0024*                              ; written to the counter when the end-of-count value is reached.
0405D6             0025*  
0405D6             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0405D6             0027*  CLK_DIV_256:  equ %00001100 ;
0405D6             0028*  CLK_DIV_64:   equ %00001000 ;
0405D6             0029*  CLK_DIV_16:   equ %00000100 ;
0405D6             0030*  CLK_DIV_4:    equ %00000000 ;
0405D6             0031*  
0405D6             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0405D6             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0405D6             0034*                              ; When a 1 is written to this bit, the values in the reload registers
0405D6             0035*                              ;  are loaded into the downcounter when the timer restarts. The
0405D6             0036*                              ; programmer must ensure that this bit is set to 1 each time
0405D6             0037*                              ; SINGLE-PASS mode is used.
0405D6             0038*  
0405D6             0039*  ; disable/enable the programmable reload timer
0405D6             0040*  PRT_EN_0:     equ %00000000 ;
0405D6             0041*  PRT_EN_1:     equ %00000001 ;
0405D6             0042*  
0405D6             0043*  ; Table 37. Timer Input Source Select Register
0405D6             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
0405D6             0045*  ; in little-endian order, with TMR0 using bits 0 and 1, TMR1 using bits 2 and 3, etc.
0405D6             0046*  ;   00: System clock / CLK_DIV
0405D6             0047*  ;   01: RTC / CLK_DIV
0405D6             0048*  ;   NOTE: these are the values given in the manual, but it may be a typo
0405D6             0049*  ;   10: GPIO port B pin 1.
0405D6             0050*  ;   11: GPIO port B pin 1.
0405D6             0051*  TMR_ISS:   equ 92h ; register address
0405D6             0052*  
0405D6             0053*  ; Table 51. Real-Time Clock Control Register
0405D6             0054*  RTC_CTRL: equ EDh ; register address
0405D6             0055*  
0405D6             0056*  ; alarm interrupt disable/enable
0405D6             0057*  RTC_ALARM_0:    equ %00000000
0405D6             0058*  RTC_ALARM_1:    equ %10000000
0405D6             0059*  
0405D6             0060*  ; interrupt on alarm disable/enable
0405D6             0061*  RTC_INT_ENT_0:  equ %00000000
0405D6             0062*  RTC_INT_ENT_1:  equ %01000000
0405D6             0063*  
0405D6             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0405D6             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0405D6             0066*  
0405D6             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0405D6             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
0405D6             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0405D6             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
0405D6             0071*  
0405D6             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0405D6             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0405D6             0074*  
0405D6             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0405D6             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0405D6             0077*  
0405D6             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0405D6             0079*                                  ; RTC counter is enabled.
0405D6             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0405D6             0081*                                  ; RTC counter is disabled.
0405D6             0082*  
0405D6             0083*  ; returns 0 if running on hardware, 1 if running on emulator
0405D6             0084*  prt_calibrate:
0405D6             0085*  ; set a MOS timer
0405D6 21 78 00 00 0086*      ld hl,120*1 ; 1 second
0405DA FD 21 E4 06 0087*      ld iy,timer_test
       04          
0405DF CD C2 06 04 0088*      call timer_set
0405E3             0089*  ; set a PRT timer
0405E3 21 E8 03 00 0090*      ld hl,1000
0405E7 22 66 06 04 0091*      ld (prt_reload),hl
0405EB CD 71 06 04 0092*      call prt_set
0405EF             0093*  @loop:
0405EF             0094*  ; check time remaining on MOS timer
0405EF CD D0 06 04 0095*      call timer_get
0405F3 CA FD 05 04 0096*      jp z,@done ; time expired, so quit
0405F7 FA FD 05 04 0097*      jp m,@done ; time past expiration (negative), so quit
0405FB 18 F2       0098*      jr @loop
0405FD             0099*  @done:
0405FD 01 00 12 00 0100*      ld bc,0x1200 ; default value for running on hardware
040601 ED 43 66 06 0101*      ld (prt_reload),bc
       04          
040606 ED 5B B7 06 0102*      ld de,(prt_irq_counter)
       04          
04060B 21 66 0F 00 0103*      ld hl,3942 ; halfway between 4608 for real hardware and 3276 for emulator
04060F AF          0104*      xor a; clear carry, zero is default value for running on hardware
040610 ED 52       0105*      sbc hl,de
040612 21 50 06 04 0106*      ld hl,on_hardware ; default message for running on hardware
040616 F8          0107*      ret m ; negative result means we're on hardware
040617 3C          0108*      inc a ; we're on emulator
040618 01 CC 0C 00 0109*      ld bc,0x0CCC
04061C ED 43 66 06 0110*      ld (prt_reload),bc
       04          
040621 21 3A 06 04 0111*      ld hl,on_emulator
040625 C9          0112*      ret
040626             0113*  
040626 43 61 6C 69 0114*  calibrating_timer: defb "Calibrating timer\r\n",0
       62 72 61 74 
       69 6E 67 20 
       74 69 6D 65 
       72 0D 0A 00 
04063A 52 75 6E 6E 0115*  on_emulator: defb "Running on emulator\r\n",0
       69 6E 67 20 
       6F 6E 20 65 
       6D 75 6C 61 
       74 6F 72 0D 
       0A 00       
040650 52 75 6E 6E 0116*  on_hardware: defb "Running on hardware\r\n",0
       69 6E 67 20 
       6F 6E 20 68 
       61 72 64 77 
       61 72 65 0D 
       0A 00       
040666             0117*  
040666             0118*  ; 3276d = 1,000 milliseconds on emulator
040666             0119*  ; 1200h = 1,000 milliseconds on hardware
040666 00 00 00    0120*  prt_reload: dl 0x000000
040669             0121*  prt_reload_str: ds 8
040671             0122*  
040671             0123*  ; set PRT timer
040671             0124*  prt_set:
040671             0125*  ; set PRT reload value
040671 2A 66 06 04 0126*      ld hl, (prt_reload)
040675 ED 29 84    0127*      out0 ($84), l
040678 ED 21 85    0128*  	out0 ($85), h
04067B             0129*  ; enable PRT, with interrupt and CONTINUOUS mode, clock divider 4
04067B 3E 53       0130*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_4 | RST_EN_1 | PRT_EN_1 ; 0x53
04067D ED 39 83    0131*  	out0 ($83), a
040680 C9          0132*      ret
040681             0133*  
040681             0134*  ; ===============================================
040681             0135*  ; PRT Timer Interrupt Handling
040681             0136*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.asm
040681             0137*  ; -----------------------------------------------
040681             0138*  prt_irq_init:
040681             0139*      ; set up interrupt vector table 2
040681 21 00 00 00 0140*  	ld hl, 0
040685 3A 0C 01 00 0141*  	ld a,($10c)
040689 6F          0142*  	ld l, a
04068A 3A 0D 01 00 0143*  	ld a,($10d)
04068E 67          0144*  	ld h, a
04068F             0145*  
04068F             0146*  	; skip over CALL ($c3)
04068F 23          0147*  	inc hl
040690             0148*  	; load address of jump into vector table 2 (in ram)
040690 ED 27       0149*  	ld hl,(hl)
040692             0150*  
040692             0151*  	; write CALL prt_irq_handler to vector table 2
040692 3E C3       0152*  	ld a, $c3
040694 77          0153*  	ld (hl), a
040695 23          0154*  	inc hl
040696 11 9D 06 04 0155*  	ld de, prt_irq_handler
04069A ED 1F       0156*  	ld (hl), de
04069C             0157*  
04069C C9          0158*      ret
04069D             0159*  
04069D             0160*  prt_irq_handler:
04069D F3          0161*  	di
04069E F5          0162*  	push af
04069F E5          0163*      push hl
0406A0 ED 38 83    0164*  	in0 a,($83)
0406A3 32 B6 06 04 0165*  	ld (prt_got_irq),a
0406A7 2A B7 06 04 0166*  	ld hl,(prt_irq_counter)
0406AB 23          0167*  	inc hl
0406AC 22 B7 06 04 0168*  	ld (prt_irq_counter),hl
0406B0 E1          0169*      pop hl
0406B1 F1          0170*  	pop af
0406B2 FB          0171*  	ei
0406B3 5B ED 4D    0172*  	reti.l
0406B6             0173*  
0406B6             0174*  prt_got_irq:
0406B6 00          0175*  	.db 0
0406B7             0176*  prt_irq_counter:
0406B7 00 00 00    0177*  	.dl 0
0406BA             0178*  prt_irq_counter_str: ds 8
0406C2             0179*  
0406C2             0180*  ; ===============================================
0406C2             0181*  ; Timer functions
0406C2             0182*  ; -----------------------------------------------
0406C2             0183*  ; set a countdown timer
0406C2             0184*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time, iy+3 = pointer to 3-byte buffer holding timer set value
0406C2             0185*  ; returns: hl = current time
0406C2             0186*  timer_set:
0406C2 FD 2F 03    0187*      ld (iy+3),hl            ; set time remaining
0406C5             0188*      MOSCALL mos_sysvars     ; ix points to syvars table
0406C5 3E 08       0001*M 			LD	A, function
0406C7 5B CF       0002*M 			RST.LIL	08h
0406C9 DD 27 00    0189*      ld hl,(ix+sysvar_time)  ; get current time
0406CC FD 2F 00    0190*      ld (iy+0),hl            ; set start time
0406CF C9          0191*      ret
0406D0             0192*  
0406D0             0193*  ; gets time remaining on a countdown timer
0406D0             0194*  ; inputs: iy = pointer to 3-byte buffer holding start time, iy+3 = pointer to 3-byte buffer holding timer set value
0406D0             0195*  ; returns: hl pos = time remaining in 1/120ths of a second, hl neg = time past expiration
0406D0             0196*  ;          sign flags: pos = time not expired, zero or neg = time expired
0406D0             0197*  timer_get:
0406D0             0198*      MOSCALL mos_sysvars     ; ix points to syvars table
0406D0 3E 08       0001*M 			LD	A, function
0406D2 5B CF       0002*M 			RST.LIL	08h
0406D4 DD 17 00    0199*      ld de,(ix+sysvar_time)  ; get current time
0406D7 FD 27 00    0200*      ld hl,(iy+0)            ; get start time
0406DA AF          0201*      xor a                   ; clear carry
0406DB ED 52       0202*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0406DD FD 17 03    0203*      ld de,(iy+3)            ; get timer set value
0406E0 AF          0204*      xor a                   ; clear carry
0406E1 ED 5A       0205*      adc hl,de               ; hl = time remaining
0406E3             0206*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0406E3 C9          0207*      ret
0406E4             0208*  
0406E4             0209*  timer_test: ds 6 ; example of a buffer to hold timer data
0406EA             0210*  
0406EA             0211*  
0406EA             0212*  ; ------------------
0406EA             0213*  ; delay routine
0406EA             0214*  ; Author: Richard Turrnidge
0406EA             0215*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.asm
0406EA             0216*  ; routine waits a fixed time, then returns
0406EA             0217*  ; arrive with A =  the delay byte. One bit to be set only.
0406EA             0218*  ; eg. ld A, 00000100b
0406EA             0219*  
0406EA             0220*  multiPurposeDelay:
0406EA F5          0221*      push af
0406EB C5          0222*      push bc
0406EC DD E5       0223*      push ix
0406EE 47          0224*      ld b, a
0406EF 3E 08       0225*      ld a,$08
0406F1 5B CF       0226*      RST.LIL	08h                 ; get IX pointer to sysvars
0406F3             0227*  
0406F3             0228*  waitLoop:
0406F3             0229*  
0406F3 DD 7E 00    0230*      ld a, (ix + 0)              ; ix+0h is lowest byte of clock timer
0406F6             0231*  
0406F6             0232*                                  ;   we check if bit set is same as last time we checked.
0406F6             0233*                                  ;   bit 0 - don't use
0406F6             0234*                                  ;   bit 1 - changes 64 times per second
0406F6             0235*                                  ;   bit 2 - changes 32 times per second
0406F6             0236*                                  ;   bit 3 - changes 16 times per second
0406F6             0237*  
0406F6             0238*                                  ;   bit 4 - changes 8 times per second
0406F6             0239*                                  ;   bit 5 - changes 4 times per second
0406F6             0240*                                  ;   bit 6 - changes 2 times per second
0406F6             0241*                                  ;   bit 7 - changes 1 times per second
0406F6 A0          0242*      and b
0406F7 4F          0243*      ld c,a
0406F8 3A 09 07 04 0244*      ld a, (oldTimeStamp)
0406FC B9          0245*      cp c                        ; is A same as last value?
0406FD 28 F4       0246*      jr z, waitLoop              ; loop here if it is
0406FF 79          0247*      ld a, c
040700 32 09 07 04 0248*      ld (oldTimeStamp), a        ; set new value
040704             0249*  
040704 DD E1       0250*      pop ix
040706 C1          0251*      pop bc
040707 F1          0252*      pop af
040708 C9          0253*      ret
040709             0254*  
040709 00          0255*  oldTimeStamp:   .db 00h
04070A             0152       include "organ/src/asm/maths.asm"
04070A 00 00 00 00 0001*  add_bcd_arg1: db #00,#00,#00,#00
04070E 00 00 00 00 0002*  add_bcd_arg2: db #00,#00,#00,#00
040712             0003*  
040712             0004*  ; set bcd values in a scratch memory address from registers bcde
040712             0005*  ; input: hl; scratch address,bcde; 8-place bcd number
040712             0006*  ; destroys ; hl
040712             0007*  set_bcd:
040712 73          0008*      ld (hl),e
040713 23          0009*      inc hl
040714 72          0010*      ld (hl),d
040715 23          0011*      inc hl
040716 71          0012*      ld (hl),c
040717 23          0013*      inc hl
040718 70          0014*      ld (hl),b
040719 C9          0015*      ret
04071A             0016*  
04071A             0017*  ; load bcd values from a scratch memory address to bcde
04071A             0018*  ; input: hl; scratch address
04071A             0019*  ; output: bcde; 8-place bcd number
04071A             0020*  ; destroys: hl
04071A             0021*  get_bcd:
04071A 5E          0022*      ld e,(hl)
04071B 23          0023*      inc hl
04071C 56          0024*      ld d,(hl)
04071D 23          0025*      inc hl
04071E 4E          0026*      ld c,(hl)
04071F 23          0027*      inc hl
040720 46          0028*      ld b,(hl)
040721 C9          0029*      ret
040722             0030*  
040722             0031*  ; BCD addition
040722             0032*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040722             0033*  ;       a is the number of bytes holding each number (number of places/2)
040722             0034*  ; outputs: (hl) + (de) --> (hl)
040722             0035*  ; destroys: a,b,de,hl
040722             0036*  add_bcd:
040722 47          0037*      ld b,a ; loop counter
040723 AF          0038*      xor a ; reset a, clear carry flag
040724             0039*  adcec:
040724 1A          0040*      ld a,(de) ; addend to acc
040725 8E          0041*      adc a,(hl) ; add (hl) to acc
040726 27          0042*      daa ; adjust result to bcd
040727 77          0043*      ld (hl),a ; store result
040728 23          0044*      inc hl ; advance memory pointers
040729 13          0045*      inc de
04072A 10 F8       0046*      djnz adcec ; loop until b == 0
04072C C9          0047*      ret
04072D             0048*  
04072D             0049*  ; BCD subtraction
04072D             0050*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04072D             0051*  ;       a is the number of bytes holding each number (number of places/2)
04072D             0052*  ; outputs: (hl) - (de) --> (hl)
04072D             0053*  ; destroys: a,b,de,hl
04072D             0054*  sub_bcd:
04072D 47          0055*      ld b,a ; loop counter
04072E AF          0056*      xor a ; reset a,clear carry flag
04072F             0057*  subdec:
04072F 1A          0058*      ld a,(de) ; subtrahend to acc
040730 9E          0059*      sbc a,(hl) ; subtract (hl) from acc
040731 27          0060*      daa ; adjust result to bcd
040732 77          0061*      ld (hl),a ; store result
040733 23          0062*      inc hl ; advance memory pointers
040734 13          0063*      inc de
040735 10 F8       0064*      djnz subdec ; loop until b == 0
040737 C9          0065*      ret
040738             0066*  
040738             0067*  ; http://www.z80.info/pseudo-random.txt
040738             0068*  rand_8:
040738 C5          0069*      push bc
040739 3A 4C 07 04 0070*      ld a,(r_seed)
04073D 4F          0071*      ld c,a
04073E             0072*  
04073E 0F          0073*      rrca ; multiply by 32
04073F 0F          0074*      rrca
040740 0F          0075*      rrca
040741 EE 1F       0076*      xor 0x1f
040743             0077*  
040743 81          0078*      add a,c
040744 DE FF       0079*      sbc a,255 ; carry
040746             0080*  
040746 32 4C 07 04 0081*      ld (r_seed),a
04074A C1          0082*      pop bc
04074B C9          0083*      ret
04074C 50          0084*  r_seed: defb $50
04074D             0153       include "organ/src/asm/organ_vdu.asm"
04074D             0001*  ; VDU 4: Write text at text cursor
04074D             0002*  ;     This causes text to be written at the current text cursor position.
04074D             0003*  ;     This is the default mode for text display.
04074D             0004*  ;     Text is written using the current text foreground and background colours.
04074D             0005*  ; inputs: a is the character to write to the screen
04074D             0006*  ; prerequisites: the text cursor at the intended position on screen
04074D             0007*  ; outputs: prints the character and moves text cursor right one position
04074D             0008*  ; destroys: a, hl, bc
04074D             0009*  vdu_char_to_text_cursor:
04074D 32 5D 07 04 0010*  	ld (@arg),a
040751 21 5C 07 04 0011*  	ld hl,@cmd
040755 01 02 00 00 0012*  	ld bc,@end-@cmd
040759 5B DF       0013*  	rst.lil $18
04075B C9          0014*  	ret
04075C 04          0015*  @cmd: db 4
04075D 00          0016*  @arg: db 0
04075E             0017*  @end:
04075E             0018*  
04075E             0019*  ; VDU 5: Write text at graphics cursor
04075E             0020*  ;     This causes text to be written at the current graphics cursor position.
04075E             0021*  ;     Using this, characters may be positioned at any graphics coordinate within
04075E             0022*  ;     the graphics viewport. This is useful for positioning text over graphics,
04075E             0023*  ;     or for positioning text at a specific location on the screen.
04075E             0024*  ;     Characters are plotted using the current graphics foreground colour,
04075E             0025*  ;     using the current graphics foreground plotting mode (see VDU 18).
04075E             0026*  ;     The character background is transparent, and will not overwrite any
04075E             0027*  ;     graphics that are already present at the character’s location.
04075E             0028*  ;     The exception to this is VDU 27, the “delete” character, which backspaces
04075E             0029*  ;     and deletes as per its usual behaviour, but will erase using the current
04075E             0030*  ;     graphics background colour.
04075E             0031*  ; inputs: a is the character to write to the screen
04075E             0032*  ; prerequisites: the graphics cursor at the intended position on screen
04075E             0033*  ; outputs: see the name of the function
04075E             0034*  ; destroys: a, hl, bc
04075E             0035*  vdu_char_to_gfx_cursor:
04075E 32 6E 07 04 0036*  	ld (@arg),a
040762 21 6D 07 04 0037*  	ld hl,@cmd
040766 01 02 00 00 0038*  	ld bc,@end-@cmd
04076A 5B DF       0039*  	rst.lil $18
04076C C9          0040*  	ret
04076D 05          0041*  @cmd: db 5
04076E 00          0042*  @arg: db 0
04076F             0043*  @end:
04076F             0044*  
04076F             0045*  ; VDU 6: Enable screen (opposite of VDU 21) §§
04076F             0046*  ;     This enables the screen, and re-enables VDU command processing,
04076F             0047*  ;     reversing the effect of VDU 21.
04076F             0048*  ; inputs: none
04076F             0049*  ; outputs: a functioning screen and VDU
04076F             0050*  ; destroys: a
04076F             0051*  vdu_enable_screen:
04076F 3E 06       0052*      ld a,6
040771 5B D7       0053*  	rst.lil $10
040773 C9          0054*  	ret
040774             0055*  
040774             0056*  ; PASSES
040774             0057*  ; VDU 7: Make a short beep (BEL)
040774             0058*  ;     Plays a short beep sound on audio channel 0. If the audio channel
040774             0059*  ;     is already in use, or has been disabled, then this command will have no effect.
040774             0060*  ; inputs: none
040774             0061*  ; outputs: an unpleasant but thankfully short-lived audio tone
040774             0062*  ; destroys: a
040774             0063*  vdu_beep:
040774 3E 07       0064*      ld a,7
040776 5B D7       0065*  	rst.lil $10
040778 C9          0066*  	ret
040779             0067*  
040779             0068*  ; VDU 8: Move cursor back one character
040779             0069*  ;     Moves the text cursor one character in the negative “X” direction.
040779             0070*  ;     By default, when at the start of a line it will move to the end of
040779             0071*  ;     the previous line (as defined by the current text viewport).
040779             0072*  ;     If the cursor is also at the top of the screen then the viewport will scroll down.
040779             0073*  ;     The cursor remains constrained to the current text viewport.
040779             0074*  ;     When in VDU 5 mode and the graphics cursor is active, the viewport will not scroll.
040779             0075*  ;     The cursor is just moved left by one character width.
040779             0076*  ;     Further behaviour of the cursor can be controlled using the VDU 23,16 command.
040779             0077*  ;     It should be noted that as of Console8 VDP 2.5.0, the cursor system does not
040779             0078*  ;     support adjusting the direction of the cursor’s X axis, so this command
040779             0079*  ;     will move the cursor to the left. This is likely to change in the future.
040779             0080*  vdu_cursor_back:
040779 3E 08       0081*      ld a,8
04077B 5B D7       0082*  	rst.lil $10
04077D C9          0083*  	ret
04077E             0084*  
04077E             0085*  ; VDU 9: Move cursor forward one character
04077E             0086*  vdu_cursor_forward:
04077E 3E 09       0087*      ld a,9
040780 5B D7       0088*  	rst.lil $10
040782 C9          0089*  	ret
040783             0090*  
040783             0091*  ; VDU 10: Move cursor down one line
040783             0092*  vdu_cursor_down:
040783 3E 0A       0093*      ld a,10
040785 5B D7       0094*  	rst.lil $10
040787 C9          0095*  	ret
040788             0096*  
040788             0097*  ; VDU 11: Move cursor up one line
040788             0098*  vdu_cursor_up:
040788 3E 0B       0099*      ld a,11
04078A 5B D7       0100*  	rst.lil $10
04078C C9          0101*  	ret
04078D             0102*  
04078D             0103*  ; VDU 12: Clear text area (CLS)
04078D             0104*  vdu_cls:
04078D 3E 0C       0105*      ld a,12
04078F 5B D7       0106*  	rst.lil $10
040791 C9          0107*  	ret
040792             0108*  
040792             0109*  ; VDU 13: Carriage return
040792             0110*  vdu_cr:
040792 3E 0D       0111*      ld a,13
040794 5B D7       0112*  	rst.lil $10
040796 C9          0113*  	ret
040797             0114*  
040797             0115*  ; VDU 14: Page mode On *
040797             0116*  vdu_page_on:
040797 3E 0E       0117*      ld a,14
040799 5B D7       0118*  	rst.lil $10
04079B C9          0119*  	ret
04079C             0120*  
04079C             0121*  ; VDU 15: Page mode Off *
04079C             0122*  vdu_page_off:
04079C 3E 0F       0123*      ld a,15
04079E 5B D7       0124*  	rst.lil $10
0407A0 C9          0125*  	ret
0407A1             0126*  
0407A1             0127*  ; VDU 16: Clear graphics area (CLG)
0407A1             0128*  vdu_clg:
0407A1 3E 10       0129*      ld a,16
0407A3 5B D7       0130*  	rst.lil $10
0407A5 C9          0131*  	ret
0407A6             0132*  
0407A6             0133*  ; VDU 17, colour: Define text colour (COLOUR)
0407A6             0134*  vdu_colour_text:
0407A6 32 B6 07 04 0135*  	ld (@arg),a
0407AA 21 B5 07 04 0136*  	ld hl,@cmd
0407AE 01 02 00 00 0137*  	ld bc,@end-@cmd
0407B2 5B DF       0138*  	rst.lil $18
0407B4 C9          0139*  	ret
0407B5 11          0140*  @cmd: db 17
0407B6 00          0141*  @arg: db 0
0407B7             0142*  @end:
0407B7             0143*  
0407B7             0144*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
0407B7             0145*  ; inputs: a is the plotting mode, c is the colour
0407B7             0146*  ; outputs: a VDU set to put pixels on the screen with the selected mode/colour
0407B7             0147*  vdu_gcol_fg:
0407B7             0148*  ; This command will set both the current graphics colour,
0407B7             0149*  ; and the current graphics plotting mode.
0407B7             0150*  ; As with VDU 17 the colour number will set the foreground colour
0407B7             0151*  ; if it is in the range 0-127, or the background colour if it is
0407B7             0152*  ; in the range 128-255, and will be interpreted in the same manner.
0407B7             0153*  ; Support for different plotting modes on Agon is currently very limited.
0407B7             0154*  ; The only fully supported mode is mode 0, which is the default mode.
0407B7             0155*  ; This mode will plot the given colour at the given graphics coordinate,
0407B7             0156*  ; and will overwrite any existing graphics at that coordinate. There is
0407B7             0157*  ; very limited support for mode 4, which will invert the colour of any
0407B7             0158*  ; existing graphics at the given coordinate, but this is not fully supported
0407B7             0159*  ; and may not work as expected.
0407B7             0160*  ; Support for other plotting modes, matching those provided by Acorn’s
0407B7             0161*  ; original VDU system, may be added in the future.
0407B7             0162*  ; This command is identical to the BASIC GCOL keyword.
0407B7 32 CC 07 04 0163*  	ld (@mode),a
0407BB 79          0164*      ld a,c
0407BC 32 CD 07 04 0165*      ld (@col),a
0407C0 21 CB 07 04 0166*  	ld hl,@cmd
0407C4 01 03 00 00 0167*  	ld bc,@end-@cmd
0407C8 5B DF       0168*  	rst.lil $18
0407CA C9          0169*  	ret
0407CB 12          0170*  @cmd: db 18
0407CC 00          0171*  @mode: db 0
0407CD 00          0172*  @col: db 0
0407CE             0173*  @end:
0407CE             0174*  
0407CE             0175*  vdu_gcol_bg:
0407CE 32 E5 07 04 0176*  	ld (@mode),a
0407D2 79          0177*      ld a,c
0407D3 C6 80       0178*      add a,128
0407D5 32 E6 07 04 0179*      ld (@col),a
0407D9 21 E4 07 04 0180*  	ld hl,@cmd
0407DD 01 03 00 00 0181*  	ld bc,@end-@cmd
0407E1 5B DF       0182*  	rst.lil $18
0407E3 C9          0183*  	ret
0407E4 12          0184*  @cmd:  db 18
0407E5 00          0185*  @mode: db 0
0407E6 00          0186*  @col:  db 0
0407E7             0187*  @end:
0407E7             0188*  
0407E7             0189*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
0407E7             0190*  ;     This command sets the colour palette, by mapping a logical colour
0407E7             0191*  ;     to a physical colour. This is useful for defining custom colours,
0407E7             0192*  ;     or for redefining the default colours.
0407E7             0193*  ;     If the physical colour number is given as 255 then the colour will
0407E7             0194*  ;     be defined using the red, green, and blue values given. If the physical
0407E7             0195*  ;     colour number is given as any other value then the colour will be defined
0407E7             0196*  ;     using the colour palette entry given by that number, up to colour number 63.
0407E7             0197*  ;     If the physical colour is not 255 then the red, green, and blue values
0407E7             0198*  ;     must still be provided, but will be ignored.
0407E7             0199*  ;     The values for red, green and blue must be given in the range 0-255.
0407E7             0200*  ;     You should note that the physical Agon hardware only supports 64 colours,
0407E7             0201*  ;     so the actual colour displayed may not be exactly the same as the colour
0407E7             0202*  ;     requested. The nearest colour will be chosen.
0407E7             0203*  ;     This command is equivalent to the BASIC COLOUR keyword.
0407E7             0204*  ; inputs: a=physcial colour, b=logical colour, chl=r,g,b
0407E7             0205*  vdu_def_log_colour:
0407E7 32 0C 08 04 0206*  	ld (@physical),a
0407EB 47          0207*      ld b,a
0407EC 32 0B 08 04 0208*      ld (@logical),a
0407F0 79          0209*      ld a,c
0407F1 32 0D 08 04 0210*      ld (@red),a
0407F5 7C          0211*      ld a,h
0407F6 32 0E 08 04 0212*      ld (@green),a
0407FA 7D          0213*      ld a,l
0407FB 32 0F 08 04 0214*      ld (@blue),a
0407FF 21 0A 08 04 0215*  	ld hl,@cmd
040803 01 06 00 00 0216*  	ld bc,@end-@cmd
040807 5B DF       0217*  	rst.lil $18
040809 C9          0218*  	ret
04080A 13          0219*  @cmd: db 19
04080B 00          0220*  @logical: db 0
04080C 00          0221*  @physical: db 0
04080D 00          0222*  @red: db 0
04080E 00          0223*  @green: db 0
04080F 00          0224*  @blue: db 0
040810             0225*  @end:
040810             0226*  
040810             0227*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
040810             0228*  vdu_reset_gfx:
040810 3E 14       0229*      ld a,20
040812 5B D7       0230*  	rst.lil $10
040814 C9          0231*  	ret
040815             0232*  
040815             0233*  ; VDU 21: Disable screen (turns off VDU command processing,
040815             0234*  ; except for VDU 1 and VDU 6) §§
040815             0235*  vdu_disable_screen:
040815 3E 15       0236*      ld a,21
040817 5B D7       0237*  	rst.lil $10
040819 C9          0238*  	ret
04081A             0239*  
04081A             0240*  ; VDU 22, n: Select screen mode (MODE n)
04081A             0241*  ; Inputs: a, screen mode (8-bit unsigned integer), in the following list:
04081A             0242*  ; https://agonconsole8.github.io/agon-docs/VDP---Screen-Modes.html
04081A             0243*  ; Screen modes
04081A             0244*  ; Modes over 128 are double-buffered
04081A             0245*  ; From Version 1.04 or greater
04081A             0246*  ; Mode 	Horz 	Vert 	Cols 	Refresh
04081A             0247*  ; 0 	640 	480 	16 	    60hz
04081A             0248*  ; * 1 	640 	480 	4 	    60hz
04081A             0249*  ; 2 	640 	480 	2 	    60hz
04081A             0250*  ; 3 	640 	240 	64 	    60hz
04081A             0251*  ; 4 	640 	240 	16 	    60hz
04081A             0252*  ; 5 	640 	240 	4 	    60hz
04081A             0253*  ; 6 	640 	240 	2 	    60hz
04081A             0254*  ; ** 7 	n/a 	n/a 	16 	    60hz
04081A             0255*  ; 8 	320 	240 	64 	    60hz
04081A             0256*  ; 9 	320 	240 	16 	    60hz
04081A             0257*  ; 10 	320 	240 	4 	    60hz
04081A             0258*  ; 11 	320 	240 	2 	    60hz
04081A             0259*  ; 12 	320 	200 	64 	    70hz
04081A             0260*  ; 13 	320 	200 	16 	    70hz
04081A             0261*  ; 14 	320 	200 	4 	    70hz
04081A             0262*  ; 15 	320 	200 	2 	    70hz
04081A             0263*  ; 16 	800 	600 	4 	    60hz
04081A             0264*  ; 17 	800 	600 	2 	    60hz
04081A             0265*  ; 18 	1024 	768 	2 	    60hz
04081A             0266*  ; 129 	640 	480 	4 	    60hz
04081A             0267*  ; 130 	640 	480 	2 	    60hz
04081A             0268*  ; 132 	640 	240 	16 	    60hz
04081A             0269*  ; 133 	640 	240 	4 	    60hz
04081A             0270*  ; 134 	640 	240 	2 	    60hz
04081A             0271*  ; 136 	320 	240 	64 	    60hz
04081A             0272*  ; 137 	320 	240 	16 	    60hz
04081A             0273*  ; 138 	320 	240 	4 	    60hz
04081A             0274*  ; 139 	320 	240 	2 	    60hz
04081A             0275*  ; 140 	320 	200 	64 	    70hz
04081A             0276*  ; 141 	320 	200 	16 	    70hz
04081A             0277*  ; 142 	320 	200 	4 	    70hz
04081A             0278*  ; 143 	320 	200 	2 	    70hz
04081A             0279*  ; * Mode 1 is the “default” mode, and is the mode that the system will use on startup.
04081A             0280*  ; It is also the mode that the system will fall back to use if it was not possible to
04081A             0281*  ; change to the requested mode.
04081A             0282*  ; ** Mode 7 is the “Teletext” mode, and essentially works in a very similar manner to
04081A             0283*  ; the BBC Micro’s Teletext mode, which was also mode 7.
04081A             0284*  vdu_set_screen_mode:
04081A 32 2A 08 04 0285*  	ld (@arg),a
04081E 21 29 08 04 0286*  	ld hl,@cmd
040822 01 02 00 00 0287*  	ld bc,@end-@cmd
040826 5B DF       0288*  	rst.lil $18
040828 C9          0289*  	ret
040829 16          0290*  @cmd: db 22 ; set screen mode
04082A 00          0291*  @arg: db 0  ; screen mode parameter
04082B             0292*  @end:
04082B             0293*  
04082B             0294*  ; VDU 23, n: Re-program display character / System Commands
04082B             0295*  ; inputs: a, ascii code; hl, pointer to bitmask data
04082B             0296*  vdu_define_character:
04082B 32 47 08 04 0297*  	ld (@ascii),a
04082F 11 48 08 04 0298*  	ld de,@data
040833 06 08       0299*  	ld b,8 ; loop counter for 8 bytes of data
040835             0300*  @loop:
040835 7E          0301*  	ld a,(hl)
040836 12          0302*  	ld (de),a
040837 23          0303*  	inc hl
040838 13          0304*  	inc de
040839 10 FA       0305*  	djnz @loop
04083B 21 46 08 04 0306*  	ld hl,@cmd
04083F 01 0A 00 00 0307*  	ld bc,@end-@cmd
040843 5B DF       0308*  	rst.lil $18
040845 C9          0309*  	ret
040846 17          0310*  @cmd:   db 23
040847 00          0311*  @ascii: db 0
040848             0312*  @data:  ds 8
040850             0313*  @end:
040850             0314*  
040850             0315*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
040850             0316*  ; NOTE: the order of the y-coordinate parameters are inverted
040850             0317*  ; 	because we have turned off logical screen scaling
040850             0318*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
040850             0319*  ; outputs; nothing
040850             0320*  ; destroys: a might make it out alive
040850             0321*  vdu_set_gfx_viewport:
040850 ED 43 70 08 0322*      ld (@x0),bc
       04          
040855 FD 22 72 08 0323*      ld (@y1),iy
       04          
04085A DD 22 74 08 0324*  	ld (@x1),ix
       04          
04085F ED 53 76 08 0325*  	ld (@y0),de
       04          
040864 21 6F 08 04 0326*  	ld hl,@cmd
040868 01 09 00 00 0327*  	ld bc,@end-@cmd
04086C 5B DF       0328*  	rst.lil $18
04086E C9          0329*  	ret
04086F 18          0330*  @cmd:   db 24 ; set graphics viewport command
040870 00 00       0331*  @x0: 	dw 0x0000 ; set by bc
040872 00 00       0332*  @y1: 	dw 0x0000 ; set by iy
040874 00 00       0333*  @x1: 	dw 0x0000 ; set by ix
040876 00 00       0334*  @y0: 	dw 0x0000 ; set by de
040878 00          0335*  @end:   db 0x00	  ; padding
040879             0336*  
040879             0337*  ; VDU 25, mode, x; y;: PLOT command
040879             0338*  ; Implemented in vdu_plot.asm
040879             0339*  
040879             0340*  ; VDU 26: Reset graphics and text viewports **
040879             0341*  vdu_reset_txt_gfx_view:
040879 3E 1A       0342*      ld a,26
04087B 5B D7       0343*  	rst.lil $10
04087D C9          0344*  	ret
04087E             0345*  
04087E             0346*  ; PASSES
04087E             0347*  ; VDU 27, char: Output character to screen §
04087E             0348*  ; inputs: a is the ascii code of the character to draw
04087E             0349*  vdu_draw_char:
04087E 32 8E 08 04 0350*  	ld (@arg),a
040882 21 8D 08 04 0351*  	ld hl,@cmd
040886 01 02 00 00 0352*  	ld bc,@end-@cmd
04088A 5B DF       0353*  	rst.lil $18
04088C C9          0354*  	ret
04088D 1B          0355*  @cmd: db 27
04088E 00          0356*  @arg: db 0  ; ascii code of character to draw
04088F             0357*  @end:
04088F             0358*  
04088F             0359*  ; VDU 28, left, bottom, right, top: Set text viewport **
04088F             0360*  ; MIND THE LITTLE-ENDIANESS
04088F             0361*  ; inputs: c=left,b=bottom,e=right,d=top
04088F             0362*  ; outputs; nothing
04088F             0363*  ; destroys: a might make it out alive
04088F             0364*  vdu_set_txt_viewport:
04088F ED 43 A5 08 0365*      ld (@lb),bc
       04          
040894 ED 53 A7 08 0366*  	ld (@rt),de
       04          
040899 21 A4 08 04 0367*  	ld hl,@cmd
04089D 01 05 00 00 0368*  	ld bc,@end-@cmd
0408A1 5B DF       0369*  	rst.lil $18
0408A3 C9          0370*  	ret
0408A4 1C          0371*  @cmd:   db 28 ; set text viewport command
0408A5 00 00       0372*  @lb: 	dw 0x0000 ; set by bc
0408A7 00 00       0373*  @rt: 	dw 0x0000 ; set by de
0408A9 00          0374*  @end:   db 0x00	  ; padding
0408AA             0375*  
0408AA             0376*  ; PASSES
0408AA             0377*  ; VDU 29, x; y;: Set graphics origin
0408AA             0378*  ; inputs: bc,de x,y coordinates
0408AA             0379*  vdu_set_gfx_origin:
0408AA ED 43 C0 08 0380*      ld (@x0),bc
       04          
0408AF ED 53 C2 08 0381*      ld (@y0),de
       04          
0408B4 21 BF 08 04 0382*  	ld hl,@cmd
0408B8 01 05 00 00 0383*  	ld bc,@end-@cmd
0408BC 5B DF       0384*  	rst.lil $18
0408BE C9          0385*  	ret
0408BF 1D          0386*  @cmd:	db 29
0408C0 00 00       0387*  @x0: 	dw 0
0408C2 00 00       0388*  @y0: 	dw 0
0408C4 00          0389*  @end: 	db 0 ; padding
0408C5             0390*  
0408C5             0391*  ; PASSES
0408C5             0392*  ; VDU 30: Home cursor
0408C5             0393*  vdu_home_cursor:
0408C5 3E 1E       0394*      ld a,30
0408C7 5B D7       0395*  	rst.lil $10
0408C9 C9          0396*  	ret
0408CA             0397*  
0408CA             0398*  ; PASSES
0408CA             0399*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
0408CA             0400*  ; inputs: c=x, b=y 8-bit unsigned integers
0408CA             0401*  vdu_move_cursor:
0408CA ED 43 DB 08 0402*      ld (@x0),bc
       04          
0408CF 21 DA 08 04 0403*  	ld hl,@cmd
0408D3 01 03 00 00 0404*  	ld bc,@end-@cmd
0408D7 5B DF       0405*  	rst.lil $18
0408D9 C9          0406*  	ret
0408DA 1F          0407*  @cmd: 	db 31
0408DB 00          0408*  @x0:	db 0
0408DC 00          0409*  @y0: 	db 0
0408DD 00          0410*  @end: 	db 0 ; padding
0408DE             0411*  
0408DE             0412*  
0408DE             0413*  ; VDU 127: Backspace
0408DE             0414*  vdu_bksp:
0408DE 3E 7F       0415*      ld a,127
0408E0 5B D7       0416*  	rst.lil $10
0408E2 C9          0417*  	ret
0408E3             0418*  
0408E3             0419*  ; activate a bitmap in preparation to draw it
0408E3             0420*  ; inputs: a holding the bitmap index
0408E3             0421*  vdu_bmp_select:
0408E3 32 F5 08 04 0422*  	ld (@bmp),a
0408E7 21 F2 08 04 0423*  	ld hl,@cmd
0408EB 01 04 00 00 0424*  	ld bc,@end-@cmd
0408EF 5B DF       0425*  	rst.lil $18
0408F1 C9          0426*  	ret
0408F2 17 1B 00    0427*  @cmd: db 23,27,0
0408F5 00          0428*  @bmp: db 0
0408F6             0429*  @end:
0408F6             0430*  
0408F6             0431*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
0408F6             0432*  ; inputs: hl=bufferId
0408F6             0433*  vdu_buff_select:
0408F6 22 08 09 04 0434*  	ld (@bufferId),hl
0408FA 21 05 09 04 0435*  	ld hl,@cmd
0408FE 01 05 00 00 0436*  	ld bc,@end-@cmd
040902 5B DF       0437*  	rst.lil $18
040904 C9          0438*  	ret
040905 17 1B 20    0439*  @cmd: db 23,27,0x20
040908 00 00       0440*  @bufferId: dw 0x0000
04090A 00          0441*  @end: db 0x00 ; padding
04090B             0442*  
04090B             0443*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
04090B             0444*  ; inputs: a=format; bc=width; de=height
04090B             0445*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
04090B             0446*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
04090B             0447*  ; 0 	RGBA8888 (4-bytes per pixel)
04090B             0448*  ; 1 	RGBA2222 (1-bytes per pixel)
04090B             0449*  ; 2 	Mono/Mask (1-bit per pixel)
04090B             0450*  ; 3 	Reserved for internal use by VDP (“native” format)
04090B             0451*  vdu_bmp_create:
04090B ED 43 27 09 0452*      ld (@width),bc
       04          
040910 ED 53 29 09 0453*      ld (@height),de
       04          
040915 32 2B 09 04 0454*      ld (@fmt),a
040919 21 24 09 04 0455*  	ld hl,@cmd
04091D 01 08 00 00 0456*  	ld bc,@end-@cmd
040921 5B DF       0457*  	rst.lil $18
040923 C9          0458*  	ret
040924 17 1B 21    0459*  @cmd:       db 23,27,0x21
040927 00 00       0460*  @width:     dw 0x0000
040929 00 00       0461*  @height:    dw 0x0000
04092B 00          0462*  @fmt:       db 0x00
04092C             0463*  @end:
04092C             0464*  
04092C             0465*  ; Draw a bitmap on the screen
04092C             0466*  ; inputs: bc, x-coordinate; de, y-coordinate
04092C             0467*  ; prerequisite: bitmap index set by e.g. vdu_bmp_select
04092C             0468*  vdu_bmp_draw:
04092C ED 43 44 09 0469*      ld (@x0),bc
       04          
040931 ED 53 46 09 0470*      ld (@y0),de
       04          
040936 21 41 09 04 0471*  	ld hl,@cmd
04093A 01 07 00 00 0472*  	ld bc,@end-@cmd
04093E 5B DF       0473*  	rst.lil $18
040940 C9          0474*  	ret
040941 17 1B 03    0475*  @cmd: db 23,27,3
040944 00 00       0476*  @x0:  dw 0x0000
040946 00 00       0477*  @y0:  dw 0x0000
040948 00          0478*  @end: db 0x00 ; padding
040949             0479*  
040949             0480*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
040949             0481*  ; inputs: a is scaling mode, 1=on, 0=off
040949             0482*  ; note: default setting on boot is scaling ON
040949             0483*  vdu_set_scaling:
040949 32 5B 09 04 0484*  	ld (@arg),a
04094D 21 58 09 04 0485*  	ld hl,@cmd
040951 01 04 00 00 0486*  	ld bc,@end-@cmd
040955 5B DF       0487*  	rst.lil $18
040957 C9          0488*  	ret
040958 17 00 C0    0489*  @cmd: db 23,0,0xC0
04095B 00          0490*  @arg: db 0  ; scaling on/off
04095C             0491*  @end:
04095C             0492*  
04095C             0493*  ; VDU 23, 0, &C3: Swap the screen buffer and/or wait for VSYNC **
04095C             0494*  ; 	Swap the screen buffer (double-buffered modes only) or wait for VSYNC
04095C             0495*  ; 	(all modes).
04095C             0496*  
04095C             0497*  ; 	This command will swap the screen buffer, if the current screen mode
04095C             0498*  ; 	is double-buffered, doing so at the next VSYNC. If the current screen
04095C             0499*  ; 	mode is not double-buffered then this command will wait for the next
04095C             0500*  ; 	VSYNC signal before returning. This can be used to synchronise the
04095C             0501*  ; 	screen with the vertical refresh rate of the monitor.
04095C             0502*  
04095C             0503*  ; 	Waiting for VSYNC can be useful for ensuring smooth graphical animation,
04095C             0504*  ; 	as it will prevent tearing of the screen.
04095C             0505*  ; inputs: none
04095C             0506*  ; outputs: none
04095C             0507*  ; destroys: hl, bc
04095C             0508*  vdu_flip:
04095C 21 67 09 04 0509*  	ld hl,@cmd
040960 01 03 00 00 0510*  	ld bc,@end-@cmd
040964 5B DF       0511*  	rst.lil $18
040966 C9          0512*  	ret
040967 17 00 C3    0513*  @cmd: db 23,0,0xC3
04096A             0514*  @end:
04096A             0515*  
04096A             0516*  ; #### from vdp.asm ####
04096A             0517*  
04096A             0518*  ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
04096A             0519*  ; VDU 23, 7: Scrolling
04096A             0520*  ;     VDU 23, 7, extent, direction, speed: Scroll the screen
04096A             0521*  ; inputs: a, extent; l, direction; h; speed
04096A             0522*  vdu_scroll_down:
04096A 32 7F 09 04 0523*  	ld (@extent),a
04096E 22 80 09 04 0524*  	ld (@dir),hl ; implicitly populates @speed
040972 21 7D 09 04 0525*  	ld hl,@cmd
040976 01 05 00 00 0526*  	ld bc,@end-@cmd
04097A 5B DF       0527*  	rst.lil $18     ;; Sending command to VDP
04097C C9          0528*  	ret
04097D 17 07       0529*  @cmd:       db 23,7
04097F 00          0530*  @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
040980 00          0531*  @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
040981 00          0532*  @speed:     db 0x00 ; pixels
040982 00          0533*  @end:		db 0x00 ; padding
040983             0534*  
040983             0535*  cursor_on:
040983 21 8E 09 04 0536*  	ld hl,@cmd
040987 01 03 00 00 0537*  	ld bc,@end-@cmd
04098B 5B DF       0538*  	rst.lil $18
04098D C9          0539*  	ret
04098E             0540*  @cmd:
04098E 17 01 01    0541*  	db 23,1,1
040991             0542*  @end:
040991             0543*  
040991             0544*  cursor_off:
040991 21 9C 09 04 0545*  	ld hl,@cmd
040995 01 03 00 00 0546*  	ld bc,@end-@cmd
040999 5B DF       0547*  	rst.lil $18
04099B C9          0548*  	ret
04099C             0549*  @cmd:
04099C 17 01 00    0550*  	db 23,1,0
04099F             0551*  @end:
04099F             0552*  
04099F DD E5       0553*  vdu_vblank:		PUSH 	IX			; Wait for VBLANK interrupt
0409A1             0554*  			MOSCALL	mos_sysvars		; Fetch pointer to system variables
0409A1 3E 08       0001*M 			LD	A, function
0409A3 5B CF       0002*M 			RST.LIL	08h
0409A5 DD 7E 00    0555*  			LD	A, (IX + sysvar_time + 0)
0409A8 DD BE 00    0556*  @wait:			CP 	A, (IX + sysvar_time + 0)
0409AB 28 FB       0557*  			JR	Z, @wait
0409AD DD E1       0558*  			POP	IX
0409AF C9          0559*  			RET
0409B0             0560*  
0409B0             0561*  ; #### from vdu_plot.asm ####
0409B0             0562*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0409B0             0563*  ; PLOT code 	(Decimal) 	Effect
0409B0             0564*  ; &00-&07 	0-7 	Solid line, includes both ends
0409B0             0565*  plot_sl_both: equ 0x00
0409B0             0566*  
0409B0             0567*  ; &08-&0F 	8-15 	Solid line, final point omitted
0409B0             0568*  plot_sl_first: equ 0x08
0409B0             0569*  
0409B0             0570*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
0409B0             0571*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
0409B0             0572*  
0409B0             0573*  ; &20-&27 	32-39 	Solid line, first point omitted
0409B0             0574*  plot_sl_last: equ 0x20
0409B0             0575*  
0409B0             0576*  ; &28-&2F 	40-47 	Solid line, both points omitted
0409B0             0577*  plot_sl_none: equ 0x28
0409B0             0578*  
0409B0             0579*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
0409B0             0580*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
0409B0             0581*  
0409B0             0582*  ; &40-&47 	64-71 	Point plot
0409B0             0583*  plot_pt: equ 0x40
0409B0             0584*  
0409B0             0585*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
0409B0             0586*  plot_lf_lr_non_bg: equ 0x48
0409B0             0587*  
0409B0             0588*  ; &50-&57 	80-87 	Triangle fill
0409B0             0589*  plot_tf: equ 0x50
0409B0             0590*  
0409B0             0591*  ; &58-&5F 	88-95 	Line fill right to background §§
0409B0             0592*  plot_lf_r_bg: equ 0x58
0409B0             0593*  
0409B0             0594*  ; &60-&67 	96-103 	Rectangle fill
0409B0             0595*  plot_rf: equ 0x60
0409B0             0596*  
0409B0             0597*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
0409B0             0598*  plot_lf_lr_fg: equ 0x60
0409B0             0599*  
0409B0             0600*  ; &70-&77 	112-119 	Parallelogram fill
0409B0             0601*  plot_pf: equ 0x70
0409B0             0602*  
0409B0             0603*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
0409B0             0604*  plot_lf_r_non_fg: equ 0x78
0409B0             0605*  
0409B0             0606*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
0409B0             0607*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
0409B0             0608*  
0409B0             0609*  ; &90-&97 	144-151 	Circle outline
0409B0             0610*  plot_co: equ 0x90
0409B0             0611*  
0409B0             0612*  ; &98-&9F 	152-159 	Circle fill
0409B0             0613*  plot_cf: equ 0x98
0409B0             0614*  
0409B0             0615*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
0409B0             0616*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
0409B0             0617*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
0409B0             0618*  
0409B0             0619*  ; &B8-&BF 	184-191 	Rectangle copy/move
0409B0             0620*  plot_rcm: equ 0xB8
0409B0             0621*  
0409B0             0622*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
0409B0             0623*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
0409B0             0624*  ; &D0-&D7 	208-215 	Not defined
0409B0             0625*  ; &D8-&DF 	216-223 	Not defined
0409B0             0626*  ; &E0-&E7 	224-231 	Not defined
0409B0             0627*  
0409B0             0628*  ; &E8-&EF 	232-239 	Bitmap plot §
0409B0             0629*  plot_bmp: equ 0xE8
0409B0             0630*  
0409B0             0631*  ; &F0-&F7 	240-247 	Not defined
0409B0             0632*  ; &F8-&FF 	248-255 	Not defined
0409B0             0633*  
0409B0             0634*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
0409B0             0635*  ; Agon Console8 VDP 2.2.0
0409B0             0636*  
0409B0             0637*  ; Within each group of eight plot codes, the effects are as follows:
0409B0             0638*  ; Plot code 	Effect
0409B0             0639*  ; 0 	Move relative
0409B0             0640*  mv_rel: equ 0
0409B0             0641*  
0409B0             0642*  ; 1 	Plot relative in current foreground colour
0409B0             0643*  dr_rel_fg: equ 1
0409B0             0644*  
0409B0             0645*  ; 2 	Not supported (Plot relative in logical inverse colour)
0409B0             0646*  ; 3 	Plot relative in current background colour
0409B0             0647*  dr_rel_bg: equ 3
0409B0             0648*  
0409B0             0649*  ; 4 	Move absolute
0409B0             0650*  mv_abs: equ 4
0409B0             0651*  
0409B0             0652*  ; 5 	Plot absolute in current foreground colour
0409B0             0653*  dr_abs_fg: equ 5
0409B0             0654*  
0409B0             0655*  ; 6 	Not supported (Plot absolute in logical inverse colour)
0409B0             0656*  ; 7 	Plot absolute in current background colour
0409B0             0657*  dr_abs_bg: equ 7
0409B0             0658*  
0409B0             0659*  ; Codes 0-3 use the position data provided as part of the command
0409B0             0660*  ; as a relative position, adding the position given to the current
0409B0             0661*  ; graphical cursor position. Codes 4-7 use the position data provided
0409B0             0662*  ; as part of the command as an absolute position, setting the current
0409B0             0663*  ; graphical cursor position to the position given.
0409B0             0664*  
0409B0             0665*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
0409B0             0666*  ; current pixel colour. These operations cannot currently be supported
0409B0             0667*  ; by the graphics system the Agon VDP uses, so these codes are not
0409B0             0668*  ; supported. Support for these codes may be added in a future version
0409B0             0669*  ; of the VDP firmware.
0409B0             0670*  
0409B0             0671*  ; 16 colour palette constants
0409B0             0672*  c_black: equ 0
0409B0             0673*  c_red_dk: equ 1
0409B0             0674*  c_green_dk: equ 2
0409B0             0675*  c_yellow_dk: equ 3
0409B0             0676*  c_blue_dk: equ 4
0409B0             0677*  c_magenta_dk: equ 5
0409B0             0678*  c_cyan_dk: equ 6
0409B0             0679*  c_grey: equ 7
0409B0             0680*  c_grey_dk: equ 8
0409B0             0681*  c_red: equ 9
0409B0             0682*  c_green: equ 10
0409B0             0683*  c_yellow: equ 11
0409B0             0684*  c_blue: equ 12
0409B0             0685*  c_magenta: equ 13
0409B0             0686*  c_cyan: equ 14
0409B0             0687*  c_white: equ 15
0409B0             0688*  
0409B0             0689*  ; VDU 25, mode, x; y;: PLOT command
0409B0             0690*  ; inputs: a=mode, bc=x0, de=y0
0409B0             0691*  vdu_plot:
0409B0 32 CA 09 04 0692*      ld (@mode),a
0409B4 ED 43 CB 09 0693*      ld (@x0),bc
       04          
0409B9 ED 53 CD 09 0694*      ld (@y0),de
       04          
0409BE 21 C9 09 04 0695*  	ld hl,@cmd
0409C2 01 06 00 00 0696*  	ld bc,@end-@cmd
0409C6 5B DF       0697*  	rst.lil $18
0409C8 C9          0698*  	ret
0409C9 19          0699*  @cmd:   db 25
0409CA 00          0700*  @mode:  db 0
0409CB 00 00       0701*  @x0: 	dw 0
0409CD 00 00       0702*  @y0: 	dw 0
0409CF 00          0703*  @end:   db 0 ; extra byte to soak up deu
0409D0             0704*  
0409D0             0705*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0409D0             0706*  ; &E8-&EF 	232-239 	Bitmap plot §
0409D0             0707*  ; VDU 25, mode, x; y;: PLOT command
0409D0             0708*  ; inputs: bc=x0, de=y0
0409D0             0709*  ; prerequisites: vdu_buff_select
0409D0             0710*  vdu_plot_bmp:
0409D0 ED 43 E7 09 0711*      ld (@x0),bc
       04          
0409D5 ED 53 E9 09 0712*      ld (@y0),de
       04          
0409DA 21 E5 09 04 0713*  	ld hl,@cmd
0409DE 01 06 00 00 0714*  	ld bc,@end-@cmd
0409E2 5B DF       0715*  	rst.lil $18
0409E4 C9          0716*  	ret
0409E5 19          0717*  @cmd:   db 25
0409E6 ED          0718*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
0409E7 00 00       0719*  @x0: 	dw 0x0000
0409E9 00 00       0720*  @y0: 	dw 0x0000
0409EB 00          0721*  @end:   db 0x00 ; padding
0409EC             0722*  
0409EC             0723*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0409EC             0724*  ; &E8-&EF 	232-239 	Bitmap plot §
0409EC             0725*  ; VDU 25, mode, x; y;: PLOT command
0409EC             0726*  ; inputs: bc=x0, de=y0
0409EC             0727*  ; USING 16.8 FIXED POINT COORDINATES
0409EC             0728*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
0409EC             0729*  ;   the fractional portiion of the inputs are truncated
0409EC             0730*  ;   leaving only the 16-bit integer portion
0409EC             0731*  ; prerequisites: vdu_buff_select
0409EC             0732*  vdu_plot_bmp168:
0409EC             0733*  ; populate in the reverse of normal to keep the
0409EC             0734*  ; inputs from stomping on each other
0409EC ED 53 0A 0A 0735*      ld (@y0-1),de
       04          
0409F1 ED 43 08 0A 0736*      ld (@x0-1),bc
       04          
0409F6 3E ED       0737*      ld a,plot_bmp+dr_abs_fg ; 0xED
0409F8 32 08 0A 04 0738*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
0409FC 21 07 0A 04 0739*  	ld hl,@cmd
040A00 01 06 00 00 0740*  	ld bc,@end-@cmd
040A04 5B DF       0741*  	rst.lil $18
040A06 C9          0742*  	ret
040A07 19          0743*  @cmd:   db 25
040A08 ED          0744*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
040A09 00 00       0745*  @x0: 	dw 0x0000
040A0B 00 00       0746*  @y0: 	dw 0x0000
040A0D             0747*  @end:  ; no padding required b/c we shifted de right
040A0D             0748*  
040A0D             0749*  ; draw a filled rectangle
040A0D             0750*  vdu_plot_rf:
040A0D ED 43 34 0A 0751*      ld (@x0),bc
       04          
040A12 ED 53 36 0A 0752*      ld (@y0),de
       04          
040A17 DD 22 3A 0A 0753*      ld (@x1),ix
       04          
040A1C FD 22 3C 0A 0754*      ld (@y1),iy
       04          
040A21 3E 19       0755*      ld a,25 ; we have to reload the 2nd plot command
040A23 32 38 0A 04 0756*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
040A27 21 32 0A 04 0757*  	ld hl,@cmd0
040A2B 01 0C 00 00 0758*  	ld bc,@end-@cmd0
040A2F 5B DF       0759*  	rst.lil $18
040A31 C9          0760*      ret
040A32 19          0761*  @cmd0:  db 25 ; plot
040A33 04          0762*  @arg0:  db plot_sl_both+mv_abs
040A34 00 00       0763*  @x0:    dw 0x0000
040A36 00 00       0764*  @y0:    dw 0x0000
040A38 19          0765*  @cmd1:  db 25 ; plot
040A39 65          0766*  @arg1:  db plot_rf+dr_abs_fg
040A3A 00 00       0767*  @x1:    dw 0x0000
040A3C 00 00       0768*  @y1:    dw 0x0000
040A3E 00          0769*  @end:   db 0x00 ; padding
040A3F             0770*  
040A3F             0771*  ; draw a filled circle
040A3F             0772*  vdu_plot_cf:
040A3F ED 43 66 0A 0773*      ld (@x0),bc
       04          
040A44 ED 53 68 0A 0774*      ld (@y0),de
       04          
040A49 DD 22 6C 0A 0775*      ld (@x1),ix
       04          
040A4E FD 22 6E 0A 0776*      ld (@y1),iy
       04          
040A53 3E 19       0777*      ld a,25 ; we have to reload the 2nd plot command
040A55 32 6A 0A 04 0778*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
040A59 21 64 0A 04 0779*  	ld hl,@cmd0
040A5D 01 0C 00 00 0780*  	ld bc,@end-@cmd0
040A61 5B DF       0781*  	rst.lil $18
040A63 C9          0782*      ret
040A64 19          0783*  @cmd0:  db 25 ; plot
040A65 04          0784*  @arg0:  db plot_sl_both+mv_abs
040A66 00 00       0785*  @x0:    dw 0x0000
040A68 00 00       0786*  @y0:    dw 0x0000
040A6A 19          0787*  @cmd1:  db 25 ; plot
040A6B 9D          0788*  @arg1:  db plot_cf+dr_abs_fg
040A6C 00 00       0789*  @x1:    dw 0x0000
040A6E 00 00       0790*  @y1:    dw 0x0000
040A70 00          0791*  @end:   db 0x00 ; padding
040A71             0792*  
040A71             0793*  
040A71             0794*  ; VDU 23, 27, 4, n: Select sprite n
040A71             0795*  ; inputs: a is the 8-bit sprite id
040A71             0796*  vdu_sprite_select:
040A71 32 83 0A 04 0797*      ld (@sprite),a
040A75 21 80 0A 04 0798*      ld hl,@cmd
040A79 01 04 00 00 0799*      ld bc,@end-@cmd
040A7D 5B DF       0800*      rst.lil $18
040A7F C9          0801*      ret
040A80 17 1B 04    0802*  @cmd:    db 23,27,4
040A83 00          0803*  @sprite: db 0x00
040A84             0804*  @end:
040A84             0805*  
040A84             0806*  ; VDU 23, 27, 5: Clear frames in current sprite
040A84             0807*  ; inputs: none
040A84             0808*  ; prerequisites: vdu_sprite_select
040A84             0809*  vdu_sprite_clear_frames:
040A84 21 8F 0A 04 0810*      ld hl,@cmd
040A88 01 03 00 00 0811*      ld bc,@end-@cmd
040A8C 5B DF       0812*      rst.lil $18
040A8E C9          0813*      ret
040A8F 17 1B 05    0814*  @cmd: db 23,27,5
040A92             0815*  @end:
040A92             0816*  
040A92             0817*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
040A92             0818*  ; inputs: a is the 8-bit bitmap number
040A92             0819*  ; prerequisites: vdu_sprite_select
040A92             0820*  vdu_sprite_add_bmp:
040A92 32 A4 0A 04 0821*      ld (@bmp),a
040A96 21 A1 0A 04 0822*      ld hl,@cmd
040A9A 01 04 00 00 0823*      ld bc,@end-@cmd
040A9E 5B DF       0824*      rst.lil $18
040AA0 C9          0825*      ret
040AA1 17 1B 06    0826*  @cmd: db 23,27,6
040AA4 00          0827*  @bmp: db 0x00
040AA5             0828*  @end:
040AA5             0829*  
040AA5             0830*  ; VDU 23, 27, 7, n: Activate n sprites
040AA5             0831*  ; inputs: a is the number of sprites to activate
040AA5             0832*  vdu_sprite_activate:
040AA5 32 B7 0A 04 0833*      ld (@num),a
040AA9 21 B4 0A 04 0834*      ld hl,@cmd
040AAD 01 04 00 00 0835*      ld bc,@end-@cmd
040AB1 5B DF       0836*      rst.lil $18
040AB3 C9          0837*      ret
040AB4 17 1B 07    0838*  @cmd: db 23,27,7
040AB7 00          0839*  @num: db 0x00
040AB8             0840*  @end:
040AB8             0841*  
040AB8             0842*  ; VDU 23, 27, 8: Select next frame of current sprite
040AB8             0843*  ; inputs: none
040AB8             0844*  ; prerequisites: vdu_sprite_select
040AB8             0845*  vdu_sprite_next_frame:
040AB8 21 C3 0A 04 0846*      ld hl,@cmd
040ABC 01 03 00 00 0847*      ld bc,@end-@cmd
040AC0 5B DF       0848*      rst.lil $18
040AC2 C9          0849*      ret
040AC3 17 1B 08    0850*  @cmd: db 23,27,8
040AC6             0851*  @end:
040AC6             0852*  
040AC6             0853*  ; VDU 23, 27, 9: Select previous frame of current sprite
040AC6             0854*  ; inputs: none
040AC6             0855*  ; prerequisites: vdu_sprite_select
040AC6             0856*  vdu_sprite_prev_frame:
040AC6 21 D1 0A 04 0857*      ld hl,@cmd
040ACA 01 03 00 00 0858*      ld bc,@end-@cmd
040ACE 5B DF       0859*      rst.lil $18
040AD0 C9          0860*      ret
040AD1 17 1B 09    0861*  @cmd: db 23,27,9
040AD4             0862*  @end:
040AD4             0863*  
040AD4             0864*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
040AD4             0865*  ; inputs: a is frame number to select
040AD4             0866*  ; prerequisites: vdu_sprite_select
040AD4             0867*  vdu_sprite_select_frame:
040AD4 32 E6 0A 04 0868*      ld (@frame),a
040AD8 21 E3 0A 04 0869*      ld hl,@cmd
040ADC 01 04 00 00 0870*      ld bc,@end-@cmd
040AE0 5B DF       0871*      rst.lil $18
040AE2 C9          0872*      ret
040AE3 17 1B 0A    0873*  @cmd:    db 23,27,10
040AE6 00          0874*  @frame:  db 0x00
040AE7             0875*  @end:
040AE7             0876*  
040AE7             0877*  ; VDU 23, 27, 11: Show current sprite
040AE7             0878*  ; inputs: none
040AE7             0879*  ; prerequisites: vdu_sprite_select
040AE7             0880*  vdu_sprite_show:
040AE7 21 F2 0A 04 0881*      ld hl,@cmd
040AEB 01 03 00 00 0882*      ld bc,@end-@cmd
040AEF 5B DF       0883*      rst.lil $18
040AF1 C9          0884*      ret
040AF2 17 1B 0B    0885*  @cmd: db 23,27,11
040AF5             0886*  @end:
040AF5             0887*  
040AF5             0888*  ; VDU 23, 27, 12: Hide current sprite
040AF5             0889*  ; inputs: none
040AF5             0890*  ; prerequisites: vdu_sprite_select
040AF5             0891*  vdu_sprite_hide:
040AF5 21 00 0B 04 0892*      ld hl,@cmd
040AF9 01 03 00 00 0893*      ld bc,@end-@cmd
040AFD 5B DF       0894*      rst.lil $18
040AFF C9          0895*      ret
040B00 17 1B 0C    0896*  @cmd: db 23,27,12
040B03             0897*  @end:
040B03             0898*  
040B03             0899*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
040B03             0900*  ; inputs: bc is x coordinate, de is y coordinate
040B03             0901*  ; prerequisites: vdu_sprite_select
040B03             0902*  vdu_sprite_move_abs:
040B03 ED 43 1B 0B 0903*      ld (@xpos),bc
       04          
040B08 ED 53 1D 0B 0904*      ld (@ypos),de
       04          
040B0D 21 18 0B 04 0905*      ld hl,@cmd
040B11 01 07 00 00 0906*      ld bc,@end-@cmd
040B15 5B DF       0907*      rst.lil $18
040B17 C9          0908*      ret
040B18 17 1B 0D    0909*  @cmd:  db 23,27,13
040B1B 00 00       0910*  @xpos: dw 0x0000
040B1D 00 00       0911*  @ypos: dw 0x0000
040B1F 00          0912*  @end:  db 0x00 ; padding
040B20             0913*  
040B20             0914*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
040B20             0915*  ; inputs: bc is x coordinate, de is y coordinate
040B20             0916*  ; prerequisites: vdu_sprite_select
040B20             0917*  vdu_sprite_move_rel:
040B20 ED 43 38 0B 0918*      ld (@dx),bc
       04          
040B25 ED 53 3A 0B 0919*      ld (@dy),de
       04          
040B2A 21 35 0B 04 0920*      ld hl,@cmd
040B2E 01 07 00 00 0921*      ld bc,@end-@cmd
040B32 5B DF       0922*      rst.lil $18
040B34 C9          0923*      ret
040B35 17 1B 0E    0924*  @cmd: db 23,27,14
040B38 00 00       0925*  @dx:  dw 0x0000
040B3A 00 00       0926*  @dy:  dw 0x0000
040B3C 00          0927*  @end: db 0x00 ; padding
040B3D             0928*  
040B3D             0929*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
040B3D             0930*  ; USING 16.8 FIXED POINT COORDINATES
040B3D             0931*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
040B3D             0932*  ;   the fractional portiion of the inputs are truncated
040B3D             0933*  ;   leaving only the 16-bit integer portion
040B3D             0934*  ; prerequisites: vdu_sprite_select
040B3D             0935*  vdu_sprite_move_abs168:
040B3D             0936*  ; populate in the reverse of normal to keep the
040B3D             0937*  ; inputs from stomping on each other
040B3D ED 53 5C 0B 0938*      ld (@ypos-1),de
       04          
040B42 ED 43 5A 0B 0939*      ld (@xpos-1),bc
       04          
040B47 3E 0D       0940*      ld a,13       ; restore the final byte of the command
040B49 32 5A 0B 04 0941*      ld (@cmd+2),a ; string that got stomped on by bcu
040B4D 21 58 0B 04 0942*      ld hl,@cmd
040B51 01 07 00 00 0943*      ld bc,@end-@cmd
040B55 5B DF       0944*      rst.lil $18
040B57 C9          0945*      ret
040B58 17 1B 0D    0946*  @cmd:  db 23,27,13
040B5B 00 00       0947*  @xpos: dw 0x0000
040B5D 00 00       0948*  @ypos: dw 0x0000
040B5F             0949*  @end:  ; no padding required b/c we shifted de right
040B5F             0950*  
040B5F             0951*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
040B5F             0952*  ; USING 16.8 FIXED POINT COORDINATES
040B5F             0953*  ; inputs: ub.c is dx, ud.e is dy
040B5F             0954*  ;   the fractional portiion of the inputs are truncated
040B5F             0955*  ;   leaving only the 16-bit integer portion
040B5F             0956*  ; prerequisites: vdu_sprite_select
040B5F             0957*  vdu_sprite_move_rel168:
040B5F             0958*  ; populate in the reverse of normal to keep the
040B5F             0959*  ; inputs from stomping on each other
040B5F ED 53 7E 0B 0960*      ld (@dy-1),de
       04          
040B64 ED 43 7C 0B 0961*      ld (@dx-1),bc
       04          
040B69 3E 0E       0962*      ld a,14       ; restore the final byte of the command
040B6B 32 7C 0B 04 0963*      ld (@cmd+2),a ; string that got stomped on by bcu
040B6F 21 7A 0B 04 0964*      ld hl,@cmd
040B73 01 07 00 00 0965*      ld bc,@end-@cmd
040B77 5B DF       0966*      rst.lil $18
040B79 C9          0967*      ret
040B7A 17 1B 0E    0968*  @cmd:  db 23,27,14
040B7D 00 00       0969*  @dx: dw 0x0000
040B7F 00 00       0970*  @dy: dw 0x0000
040B81             0971*  @end:  ; no padding required b/c we shifted de right
040B81             0972*  
040B81             0973*  ; VDU 23, 27, 15: Update the sprites in the GPU
040B81             0974*  ; inputs: none
040B81             0975*  vdu_sprite_update:
040B81 21 8C 0B 04 0976*      ld hl,@cmd
040B85 01 03 00 00 0977*      ld bc,@end-@cmd
040B89 5B DF       0978*      rst.lil $18
040B8B C9          0979*      ret
040B8C 17 1B 0F    0980*  @cmd: db 23,27,15
040B8F             0981*  @end:
040B8F             0982*  
040B8F             0983*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
040B8F             0984*  ; inputs: none
040B8F             0985*  vdu_sprite_bmp_reset:
040B8F 21 9A 0B 04 0986*      ld hl,@cmd
040B93 01 03 00 00 0987*      ld bc,@end-@cmd
040B97 5B DF       0988*      rst.lil $18
040B99 C9          0989*      ret
040B9A 17 1B 10    0990*  @cmd: db 23,27,16
040B9D             0991*  @end:
040B9D             0992*  
040B9D             0993*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
040B9D             0994*  ; inputs: none
040B9D             0995*  vdu_sprite_reset:
040B9D 21 A8 0B 04 0996*      ld hl,@cmd
040BA1 01 03 00 00 0997*      ld bc,@end-@cmd
040BA5 5B DF       0998*      rst.lil $18
040BA7 C9          0999*      ret
040BA8 17 1B 11    1000*  @cmd: db 23,27,17
040BAB             1001*  @end:
040BAB             1002*  
040BAB             1003*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
040BAB             1004*  ; inputs: a is the GCOL paint mode
040BAB             1005*  ; prerequisites: vdu_sprite_select
040BAB             1006*  vdu_sprite_set_gcol:
040BAB 32 BD 0B 04 1007*      ld (@mode),a
040BAF 21 BA 0B 04 1008*      ld hl,@cmd
040BB3 01 04 00 00 1009*      ld bc,@end-@cmd
040BB7 5B DF       1010*      rst.lil $18
040BB9 C9          1011*      ret
040BBA 17 1B 12    1012*  @cmd:  db 23,27,18
040BBD 00          1013*  @mode: db 0x00
040BBE             1014*  @end:
040BBE             1015*  
040BBE             1016*  ; VDU 23, 27, &26, n;: Add bitmap bufferId
040BBE             1017*  ;     as a frame to current sprite using a 16-bit buffer ID
040BBE             1018*  ; inputs: hl=bufferId
040BBE             1019*  ; prerequisites: vdu_sprite_select
040BBE             1020*  vdu_sprite_add_buff:
040BBE 22 D0 0B 04 1021*      ld (@bufferId),hl
040BC2 21 CD 0B 04 1022*      ld hl,@cmd
040BC6 01 05 00 00 1023*      ld bc,@end-@cmd
040BCA 5B DF       1024*      rst.lil $18
040BCC C9          1025*      ret
040BCD 17 1B 26    1026*  @cmd:      db 23,27,0x26
040BD0 00 00       1027*  @bufferId: dw 0x0000
040BD2 00          1028*  @end:      db 0x00 ; padding
040BD3             0154       include "organ/src/asm/organ_channels.asm"
040BD3             0001*  max_notes: equ 4
040BD3             0002*  play_notes:
040BD3             0003*  
040BD3 21 DE 0B 04 0004*      ld hl,play_notes_cmd
040BD7 01 A0 01 00 0005*      ld bc,play_notes_end-play_notes_cmd
040BDB 5B DF       0006*      rst.lil $18
040BDD C9          0007*      ret
040BDE             0008*  play_notes_cmd:
040BDE             0009*  
040BDE 17 00 85 00 0010*  cmd0:         db 23, 0, $85, 0, 3
       03          
040BE3 00 00       0011*  frequency0:   dw 0
040BE5 17 00 85 00 0012*                db 23, 0, $85, 0, 2
       02          
040BEA 00          0013*  volume0:      db 0
040BEB             0014*  
040BEB 17 00 85 01 0015*  cmd1:         db 23, 0, $85, 1, 3
       03          
040BF0 00 00       0016*  frequency1:   dw 0
040BF2 17 00 85 01 0017*                db 23, 0, $85, 1, 2
       02          
040BF7 00          0018*  volume1:      db 0
040BF8             0019*  
040BF8 17 00 85 02 0020*  cmd2:         db 23, 0, $85, 2, 3
       03          
040BFD 00 00       0021*  frequency2:   dw 0
040BFF 17 00 85 02 0022*                db 23, 0, $85, 2, 2
       02          
040C04 00          0023*  volume2:      db 0
040C05             0024*  
040C05 17 00 85 03 0025*  cmd3:         db 23, 0, $85, 3, 3
       03          
040C0A 00 00       0026*  frequency3:   dw 0
040C0C 17 00 85 03 0027*                db 23, 0, $85, 3, 2
       02          
040C11 00          0028*  volume3:      db 0
040C12             0029*  
040C12 17 00 85 04 0030*  cmd4:         db 23, 0, $85, 4, 3
       03          
040C17 00 00       0031*  frequency4:   dw 0
040C19 17 00 85 04 0032*                db 23, 0, $85, 4, 2
       02          
040C1E 00          0033*  volume4:      db 0
040C1F             0034*  
040C1F 17 00 85 05 0035*  cmd5:         db 23, 0, $85, 5, 3
       03          
040C24 00 00       0036*  frequency5:   dw 0
040C26 17 00 85 05 0037*                db 23, 0, $85, 5, 2
       02          
040C2B 00          0038*  volume5:      db 0
040C2C             0039*  
040C2C 17 00 85 06 0040*  cmd6:         db 23, 0, $85, 6, 3
       03          
040C31 00 00       0041*  frequency6:   dw 0
040C33 17 00 85 06 0042*                db 23, 0, $85, 6, 2
       02          
040C38 00          0043*  volume6:      db 0
040C39             0044*  
040C39 17 00 85 07 0045*  cmd7:         db 23, 0, $85, 7, 3
       03          
040C3E 00 00       0046*  frequency7:   dw 0
040C40 17 00 85 07 0047*                db 23, 0, $85, 7, 2
       02          
040C45 00          0048*  volume7:      db 0
040C46             0049*  
040C46 17 00 85 08 0050*  cmd8:         db 23, 0, $85, 8, 3
       03          
040C4B 00 00       0051*  frequency8:   dw 0
040C4D 17 00 85 08 0052*                db 23, 0, $85, 8, 2
       02          
040C52 00          0053*  volume8:      db 0
040C53             0054*  
040C53 17 00 85 09 0055*  cmd9:         db 23, 0, $85, 9, 3
       03          
040C58 00 00       0056*  frequency9:   dw 0
040C5A 17 00 85 09 0057*                db 23, 0, $85, 9, 2
       02          
040C5F 00          0058*  volume9:      db 0
040C60             0059*  
040C60 17 00 85 0A 0060*  cmd10:         db 23, 0, $85, 10, 3
       03          
040C65 00 00       0061*  frequency10:   dw 0
040C67 17 00 85 0A 0062*                db 23, 0, $85, 10, 2
       02          
040C6C 00          0063*  volume10:      db 0
040C6D             0064*  
040C6D 17 00 85 0B 0065*  cmd11:         db 23, 0, $85, 11, 3
       03          
040C72 00 00       0066*  frequency11:   dw 0
040C74 17 00 85 0B 0067*                db 23, 0, $85, 11, 2
       02          
040C79 00          0068*  volume11:      db 0
040C7A             0069*  
040C7A 17 00 85 0C 0070*  cmd12:         db 23, 0, $85, 12, 3
       03          
040C7F 00 00       0071*  frequency12:   dw 0
040C81 17 00 85 0C 0072*                db 23, 0, $85, 12, 2
       02          
040C86 00          0073*  volume12:      db 0
040C87             0074*  
040C87 17 00 85 0D 0075*  cmd13:         db 23, 0, $85, 13, 3
       03          
040C8C 00 00       0076*  frequency13:   dw 0
040C8E 17 00 85 0D 0077*                db 23, 0, $85, 13, 2
       02          
040C93 00          0078*  volume13:      db 0
040C94             0079*  
040C94 17 00 85 0E 0080*  cmd14:         db 23, 0, $85, 14, 3
       03          
040C99 00 00       0081*  frequency14:   dw 0
040C9B 17 00 85 0E 0082*                db 23, 0, $85, 14, 2
       02          
040CA0 00          0083*  volume14:      db 0
040CA1             0084*  
040CA1 17 00 85 0F 0085*  cmd15:         db 23, 0, $85, 15, 3
       03          
040CA6 00 00       0086*  frequency15:   dw 0
040CA8 17 00 85 0F 0087*                db 23, 0, $85, 15, 2
       02          
040CAD 00          0088*  volume15:      db 0
040CAE             0089*  
040CAE 17 00 85 10 0090*  cmd16:         db 23, 0, $85, 16, 3
       03          
040CB3 00 00       0091*  frequency16:   dw 0
040CB5 17 00 85 10 0092*                db 23, 0, $85, 16, 2
       02          
040CBA 00          0093*  volume16:      db 0
040CBB             0094*  
040CBB 17 00 85 11 0095*  cmd17:         db 23, 0, $85, 17, 3
       03          
040CC0 00 00       0096*  frequency17:   dw 0
040CC2 17 00 85 11 0097*                db 23, 0, $85, 17, 2
       02          
040CC7 00          0098*  volume17:      db 0
040CC8             0099*  
040CC8 17 00 85 12 0100*  cmd18:         db 23, 0, $85, 18, 3
       03          
040CCD 00 00       0101*  frequency18:   dw 0
040CCF 17 00 85 12 0102*                db 23, 0, $85, 18, 2
       02          
040CD4 00          0103*  volume18:      db 0
040CD5             0104*  
040CD5 17 00 85 13 0105*  cmd19:         db 23, 0, $85, 19, 3
       03          
040CDA 00 00       0106*  frequency19:   dw 0
040CDC 17 00 85 13 0107*                db 23, 0, $85, 19, 2
       02          
040CE1 00          0108*  volume19:      db 0
040CE2             0109*  
040CE2 17 00 85 14 0110*  cmd20:         db 23, 0, $85, 20, 3
       03          
040CE7 00 00       0111*  frequency20:   dw 0
040CE9 17 00 85 14 0112*                db 23, 0, $85, 20, 2
       02          
040CEE 00          0113*  volume20:      db 0
040CEF             0114*  
040CEF 17 00 85 15 0115*  cmd21:         db 23, 0, $85, 21, 3
       03          
040CF4 00 00       0116*  frequency21:   dw 0
040CF6 17 00 85 15 0117*                db 23, 0, $85, 21, 2
       02          
040CFB 00          0118*  volume21:      db 0
040CFC             0119*  
040CFC 17 00 85 16 0120*  cmd22:         db 23, 0, $85, 22, 3
       03          
040D01 00 00       0121*  frequency22:   dw 0
040D03 17 00 85 16 0122*                db 23, 0, $85, 22, 2
       02          
040D08 00          0123*  volume22:      db 0
040D09             0124*  
040D09 17 00 85 17 0125*  cmd23:         db 23, 0, $85, 23, 3
       03          
040D0E 00 00       0126*  frequency23:   dw 0
040D10 17 00 85 17 0127*                db 23, 0, $85, 23, 2
       02          
040D15 00          0128*  volume23:      db 0
040D16             0129*  
040D16 17 00 85 18 0130*  cmd24:         db 23, 0, $85, 24, 3
       03          
040D1B 00 00       0131*  frequency24:   dw 0
040D1D 17 00 85 18 0132*                db 23, 0, $85, 24, 2
       02          
040D22 00          0133*  volume24:      db 0
040D23             0134*  
040D23 17 00 85 19 0135*  cmd25:         db 23, 0, $85, 25, 3
       03          
040D28 00 00       0136*  frequency25:   dw 0
040D2A 17 00 85 19 0137*                db 23, 0, $85, 25, 2
       02          
040D2F 00          0138*  volume25:      db 0
040D30             0139*  
040D30 17 00 85 1A 0140*  cmd26:         db 23, 0, $85, 26, 3
       03          
040D35 00 00       0141*  frequency26:   dw 0
040D37 17 00 85 1A 0142*                db 23, 0, $85, 26, 2
       02          
040D3C 00          0143*  volume26:      db 0
040D3D             0144*  
040D3D 17 00 85 1B 0145*  cmd27:         db 23, 0, $85, 27, 3
       03          
040D42 00 00       0146*  frequency27:   dw 0
040D44 17 00 85 1B 0147*                db 23, 0, $85, 27, 2
       02          
040D49 00          0148*  volume27:      db 0
040D4A             0149*  
040D4A 17 00 85 1C 0150*  cmd28:         db 23, 0, $85, 28, 3
       03          
040D4F 00 00       0151*  frequency28:   dw 0
040D51 17 00 85 1C 0152*                db 23, 0, $85, 28, 2
       02          
040D56 00          0153*  volume28:      db 0
040D57             0154*  
040D57 17 00 85 1D 0155*  cmd29:         db 23, 0, $85, 29, 3
       03          
040D5C 00 00       0156*  frequency29:   dw 0
040D5E 17 00 85 1D 0157*                db 23, 0, $85, 29, 2
       02          
040D63 00          0158*  volume29:      db 0
040D64             0159*  
040D64 17 00 85 1E 0160*  cmd30:         db 23, 0, $85, 30, 3
       03          
040D69 00 00       0161*  frequency30:   dw 0
040D6B 17 00 85 1E 0162*                db 23, 0, $85, 30, 2
       02          
040D70 00          0163*  volume30:      db 0
040D71             0164*  
040D71 17 00 85 1F 0165*  cmd31:         db 23, 0, $85, 31, 3
       03          
040D76 00 00       0166*  frequency31:   dw 0
040D78 17 00 85 1F 0167*                db 23, 0, $85, 31, 2
       02          
040D7D 00          0168*  volume31:      db 0
040D7E             0169*  
040D7E             0170*  
040D7E             0171*  play_notes_end:
040D7E             0155   
040D7E 7F          0156   master_volume: db 127
040D7F             0157   hammer_curr: ds 17
040D90             0158   hammer_last: ds 17
040DA1             0159   hammer_cmd: ds 17
040DB2             0160   
040DB2             0161   cmd_frequency: equ frequency0-cmd0
040DB2             0162   cmd_volume: equ volume0-cmd0
040DB2             0163   cmd_bytes: equ cmd1-cmd0
040DB2 00          0164   notes_played: db 0
040DB3             0165   
040DB3             0166   ; ###############################################
040DB3             0167   ; Main loop
040DB3             0168   ; ###############################################
040DB3             0169   
040DB3             0170   main:
040DB3 CD C5 08 04 0171       call vdu_home_cursor
040DB7             0172   
040DB7             0173   ; set set default volume to 0 for all channels
040DB7 AF          0174       xor a
040DB8 32 EA 0B 04 0175       ld (volume0),a
040DBC 32 F7 0B 04 0176       ld (volume1),a
040DC0 32 04 0C 04 0177       ld (volume2),a
040DC4 32 11 0C 04 0178       ld (volume3),a
040DC8 32 1E 0C 04 0179       ld (volume4),a
040DCC 32 2B 0C 04 0180       ld (volume5),a
040DD0 32 38 0C 04 0181       ld (volume6),a
040DD4 32 45 0C 04 0182       ld (volume7),a
040DD8 32 52 0C 04 0183       ld (volume8),a
040DDC 32 5F 0C 04 0184       ld (volume9),a
040DE0 32 6C 0C 04 0185       ld (volume10),a
040DE4 32 79 0C 04 0186       ld (volume11),a
040DE8 32 86 0C 04 0187       ld (volume12),a
040DEC 32 93 0C 04 0188       ld (volume13),a
040DF0 32 A0 0C 04 0189       ld (volume14),a
040DF4 32 AD 0C 04 0190       ld (volume15),a
040DF8 32 BA 0C 04 0191       ld (volume16),a
040DFC 32 C7 0C 04 0192       ld (volume17),a
040E00 32 D4 0C 04 0193       ld (volume18),a
040E04 32 E1 0C 04 0194       ld (volume19),a
040E08 32 EE 0C 04 0195       ld (volume20),a
040E0C 32 FB 0C 04 0196       ld (volume21),a
040E10 32 08 0D 04 0197       ld (volume22),a
040E14 32 15 0D 04 0198       ld (volume23),a
040E18 32 22 0D 04 0199       ld (volume24),a
040E1C 32 2F 0D 04 0200       ld (volume25),a
040E20 32 3C 0D 04 0201       ld (volume26),a
040E24 32 49 0D 04 0202       ld (volume27),a
040E28 32 56 0D 04 0203       ld (volume28),a
040E2C 32 63 0D 04 0204       ld (volume29),a
040E30 32 70 0D 04 0205       ld (volume30),a
040E34 32 7D 0D 04 0206       ld (volume31),a
040E38             0207   
040E38             0208   ; check key presses
040E38             0209   	MOSCALL mos_getkbmap
040E38 3E 1E       0001M  			LD	A, function
040E3A 5B CF       0002M  			RST.LIL	08h
040E3C             0210   
040E3C             0211   ; display the virtual keys table
040E3C DD E5       0212       push ix
040E3E E1          0213       pop hl
040E3F 3E 11       0214       ld a,17
040E41 CD 68 05 04 0215       call dumpMemoryHex
040E45             0216   
040E45             0217   ; reset notes played counter
040E45 3E 04       0218       ld a,max_notes
040E47 32 B2 0D 04 0219       ld (notes_played),a
040E4B             0220   
040E4B             0221   ; set channels to play according to the keys pressed
040E4B             0222       include "organ/src/asm/organ_notes_bank_1.asm"
040E4B             0001*  organ_notes_bank_1:
040E4B FD 21 DE 0B 0002*      ld iy,cmd0
       04          
040E50             0003*  
040E50 DD CB 06 46 0004*      bit 0,(ix+6)
040E54 CA F1 0E 04 0005*      jp z,@note_end0
040E58 3E 1B       0006*      ld a,27
040E5A FD 77 0C    0007*      ld (iy+cmd_volume),a
040E5D 3E B8       0008*      ld a,0xB8
040E5F FD 77 05    0009*      ld (iy+cmd_frequency),a
040E62 3E 01       0010*      ld a,0x01
040E64 FD 77 06    0011*      ld (iy+cmd_frequency+1),a
040E67 ED 33 0D    0012*      lea iy,iy+cmd_bytes
040E6A             0013*  
040E6A 3E 0B       0014*      ld a,11
040E6C FD 77 0C    0015*      ld (iy+cmd_volume),a
040E6F 3E 28       0016*      ld a,0x28
040E71 FD 77 05    0017*      ld (iy+cmd_frequency),a
040E74 3E 05       0018*      ld a,0x05
040E76 FD 77 06    0019*      ld (iy+cmd_frequency+1),a
040E79 ED 33 0D    0020*      lea iy,iy+cmd_bytes
040E7C             0021*  
040E7C 3E 0F       0022*      ld a,15
040E7E FD 77 0C    0023*      ld (iy+cmd_volume),a
040E81 3E 70       0024*      ld a,0x70
040E83 FD 77 05    0025*      ld (iy+cmd_frequency),a
040E86 3E 03       0026*      ld a,0x03
040E88 FD 77 06    0027*      ld (iy+cmd_frequency+1),a
040E8B ED 33 0D    0028*      lea iy,iy+cmd_bytes
040E8E             0029*  
040E8E 3E 09       0030*      ld a,9
040E90 FD 77 0C    0031*      ld (iy+cmd_volume),a
040E93 3E E0       0032*      ld a,0xE0
040E95 FD 77 05    0033*      ld (iy+cmd_frequency),a
040E98 3E 06       0034*      ld a,0x06
040E9A FD 77 06    0035*      ld (iy+cmd_frequency+1),a
040E9D ED 33 0D    0036*      lea iy,iy+cmd_bytes
040EA0             0037*  
040EA0 3E 06       0038*      ld a,6
040EA2 FD 77 0C    0039*      ld (iy+cmd_volume),a
040EA5 3E 50       0040*      ld a,0x50
040EA7 FD 77 05    0041*      ld (iy+cmd_frequency),a
040EAA 3E 0A       0042*      ld a,0x0A
040EAC FD 77 06    0043*      ld (iy+cmd_frequency+1),a
040EAF ED 33 0D    0044*      lea iy,iy+cmd_bytes
040EB2             0045*  
040EB2 3E 05       0046*      ld a,5
040EB4 FD 77 0C    0047*      ld (iy+cmd_volume),a
040EB7 3E C0       0048*      ld a,0xC0
040EB9 FD 77 05    0049*      ld (iy+cmd_frequency),a
040EBC 3E 0D       0050*      ld a,0x0D
040EBE FD 77 06    0051*      ld (iy+cmd_frequency+1),a
040EC1 ED 33 0D    0052*      lea iy,iy+cmd_bytes
040EC4             0053*  
040EC4 3E 04       0054*      ld a,4
040EC6 FD 77 0C    0055*      ld (iy+cmd_volume),a
040EC9 3E 30       0056*      ld a,0x30
040ECB FD 77 05    0057*      ld (iy+cmd_frequency),a
040ECE 3E 11       0058*      ld a,0x11
040ED0 FD 77 06    0059*      ld (iy+cmd_frequency+1),a
040ED3 ED 33 0D    0060*      lea iy,iy+cmd_bytes
040ED6             0061*  
040ED6 3E 03       0062*      ld a,3
040ED8 FD 77 0C    0063*      ld (iy+cmd_volume),a
040EDB 3E A0       0064*      ld a,0xA0
040EDD FD 77 05    0065*      ld (iy+cmd_frequency),a
040EE0 3E 14       0066*      ld a,0x14
040EE2 FD 77 06    0067*      ld (iy+cmd_frequency+1),a
040EE5 ED 33 0D    0068*      lea iy,iy+cmd_bytes
040EE8             0069*  
040EE8 21 B2 0D 04 0070*      ld hl,notes_played
040EEC 35          0071*      dec (hl)
040EED CA 9A 14 04 0072*      jp z,organ_notes_bank_1_end
040EF1             0073*  
040EF1             0074*  @note_end0:
040EF1             0075*  
040EF1 DD CB 06 4E 0076*      bit 1,(ix+6)
040EF5 CA 92 0F 04 0077*      jp z,@note_end1
040EF9 3E 17       0078*      ld a,23
040EFB FD 77 0C    0079*      ld (iy+cmd_volume),a
040EFE 3E 0B       0080*      ld a,0x0B
040F00 FD 77 05    0081*      ld (iy+cmd_frequency),a
040F03 3E 02       0082*      ld a,0x02
040F05 FD 77 06    0083*      ld (iy+cmd_frequency+1),a
040F08 ED 33 0D    0084*      lea iy,iy+cmd_bytes
040F0B             0085*  
040F0B 3E 09       0086*      ld a,9
040F0D FD 77 0C    0087*      ld (iy+cmd_volume),a
040F10 3E 21       0088*      ld a,0x21
040F12 FD 77 05    0089*      ld (iy+cmd_frequency),a
040F15 3E 06       0090*      ld a,0x06
040F17 FD 77 06    0091*      ld (iy+cmd_frequency+1),a
040F1A ED 33 0D    0092*      lea iy,iy+cmd_bytes
040F1D             0093*  
040F1D 3E 0D       0094*      ld a,13
040F1F FD 77 0C    0095*      ld (iy+cmd_volume),a
040F22 3E 16       0096*      ld a,0x16
040F24 FD 77 05    0097*      ld (iy+cmd_frequency),a
040F27 3E 04       0098*      ld a,0x04
040F29 FD 77 06    0099*      ld (iy+cmd_frequency+1),a
040F2C ED 33 0D    0100*      lea iy,iy+cmd_bytes
040F2F             0101*  
040F2F 3E 07       0102*      ld a,7
040F31 FD 77 0C    0103*      ld (iy+cmd_volume),a
040F34 3E 2D       0104*      ld a,0x2D
040F36 FD 77 05    0105*      ld (iy+cmd_frequency),a
040F39 3E 08       0106*      ld a,0x08
040F3B FD 77 06    0107*      ld (iy+cmd_frequency+1),a
040F3E ED 33 0D    0108*      lea iy,iy+cmd_bytes
040F41             0109*  
040F41 3E 05       0110*      ld a,5
040F43 FD 77 0C    0111*      ld (iy+cmd_volume),a
040F46 3E 43       0112*      ld a,0x43
040F48 FD 77 05    0113*      ld (iy+cmd_frequency),a
040F4B 3E 0C       0114*      ld a,0x0C
040F4D FD 77 06    0115*      ld (iy+cmd_frequency+1),a
040F50 ED 33 0D    0116*      lea iy,iy+cmd_bytes
040F53             0117*  
040F53 3E 04       0118*      ld a,4
040F55 FD 77 0C    0119*      ld (iy+cmd_volume),a
040F58 3E 5A       0120*      ld a,0x5A
040F5A FD 77 05    0121*      ld (iy+cmd_frequency),a
040F5D 3E 10       0122*      ld a,0x10
040F5F FD 77 06    0123*      ld (iy+cmd_frequency+1),a
040F62 ED 33 0D    0124*      lea iy,iy+cmd_bytes
040F65             0125*  
040F65 3E 03       0126*      ld a,3
040F67 FD 77 0C    0127*      ld (iy+cmd_volume),a
040F6A 3E 70       0128*      ld a,0x70
040F6C FD 77 05    0129*      ld (iy+cmd_frequency),a
040F6F 3E 14       0130*      ld a,0x14
040F71 FD 77 06    0131*      ld (iy+cmd_frequency+1),a
040F74 ED 33 0D    0132*      lea iy,iy+cmd_bytes
040F77             0133*  
040F77 3E 03       0134*      ld a,3
040F79 FD 77 0C    0135*      ld (iy+cmd_volume),a
040F7C 3E 87       0136*      ld a,0x87
040F7E FD 77 05    0137*      ld (iy+cmd_frequency),a
040F81 3E 18       0138*      ld a,0x18
040F83 FD 77 06    0139*      ld (iy+cmd_frequency+1),a
040F86 ED 33 0D    0140*      lea iy,iy+cmd_bytes
040F89             0141*  
040F89 21 B2 0D 04 0142*      ld hl,notes_played
040F8D 35          0143*      dec (hl)
040F8E CA 9A 14 04 0144*      jp z,organ_notes_bank_1_end
040F92             0145*  
040F92             0146*  @note_end1:
040F92             0147*  
040F92 DD CB 02 4E 0148*      bit 1,(ix+2)
040F96 CA 33 10 04 0149*      jp z,@note_end2
040F9A 3E 15       0150*      ld a,21
040F9C FD 77 0C    0151*      ld (iy+cmd_volume),a
040F9F 3E 4B       0152*      ld a,0x4B
040FA1 FD 77 05    0153*      ld (iy+cmd_frequency),a
040FA4 3E 02       0154*      ld a,0x02
040FA6 FD 77 06    0155*      ld (iy+cmd_frequency+1),a
040FA9 ED 33 0D    0156*      lea iy,iy+cmd_bytes
040FAC             0157*  
040FAC 3E 09       0158*      ld a,9
040FAE FD 77 0C    0159*      ld (iy+cmd_volume),a
040FB1 3E E1       0160*      ld a,0xE1
040FB3 FD 77 05    0161*      ld (iy+cmd_frequency),a
040FB6 3E 06       0162*      ld a,0x06
040FB8 FD 77 06    0163*      ld (iy+cmd_frequency+1),a
040FBB ED 33 0D    0164*      lea iy,iy+cmd_bytes
040FBE             0165*  
040FBE 3E 0C       0166*      ld a,12
040FC0 FD 77 0C    0167*      ld (iy+cmd_volume),a
040FC3 3E 96       0168*      ld a,0x96
040FC5 FD 77 05    0169*      ld (iy+cmd_frequency),a
040FC8 3E 04       0170*      ld a,0x04
040FCA FD 77 06    0171*      ld (iy+cmd_frequency+1),a
040FCD ED 33 0D    0172*      lea iy,iy+cmd_bytes
040FD0             0173*  
040FD0 3E 07       0174*      ld a,7
040FD2 FD 77 0C    0175*      ld (iy+cmd_volume),a
040FD5 3E 2D       0176*      ld a,0x2D
040FD7 FD 77 05    0177*      ld (iy+cmd_frequency),a
040FDA 3E 09       0178*      ld a,0x09
040FDC FD 77 06    0179*      ld (iy+cmd_frequency+1),a
040FDF ED 33 0D    0180*      lea iy,iy+cmd_bytes
040FE2             0181*  
040FE2 3E 05       0182*      ld a,5
040FE4 FD 77 0C    0183*      ld (iy+cmd_volume),a
040FE7 3E C3       0184*      ld a,0xC3
040FE9 FD 77 05    0185*      ld (iy+cmd_frequency),a
040FEC 3E 0D       0186*      ld a,0x0D
040FEE FD 77 06    0187*      ld (iy+cmd_frequency+1),a
040FF1 ED 33 0D    0188*      lea iy,iy+cmd_bytes
040FF4             0189*  
040FF4 3E 04       0190*      ld a,4
040FF6 FD 77 0C    0191*      ld (iy+cmd_volume),a
040FF9 3E 5A       0192*      ld a,0x5A
040FFB FD 77 05    0193*      ld (iy+cmd_frequency),a
040FFE 3E 12       0194*      ld a,0x12
041000 FD 77 06    0195*      ld (iy+cmd_frequency+1),a
041003 ED 33 0D    0196*      lea iy,iy+cmd_bytes
041006             0197*  
041006 3E 03       0198*      ld a,3
041008 FD 77 0C    0199*      ld (iy+cmd_volume),a
04100B 3E F1       0200*      ld a,0xF1
04100D FD 77 05    0201*      ld (iy+cmd_frequency),a
041010 3E 16       0202*      ld a,0x16
041012 FD 77 06    0203*      ld (iy+cmd_frequency+1),a
041015 ED 33 0D    0204*      lea iy,iy+cmd_bytes
041018             0205*  
041018 3E 02       0206*      ld a,2
04101A FD 77 0C    0207*      ld (iy+cmd_volume),a
04101D 3E 87       0208*      ld a,0x87
04101F FD 77 05    0209*      ld (iy+cmd_frequency),a
041022 3E 1B       0210*      ld a,0x1B
041024 FD 77 06    0211*      ld (iy+cmd_frequency+1),a
041027 ED 33 0D    0212*      lea iy,iy+cmd_bytes
04102A             0213*  
04102A 21 B2 0D 04 0214*      ld hl,notes_played
04102E 35          0215*      dec (hl)
04102F CA 9A 14 04 0216*      jp z,organ_notes_bank_1_end
041033             0217*  
041033             0218*  @note_end2:
041033             0219*  
041033 DD CB 02 56 0220*      bit 2,(ix+2)
041037 CA D4 10 04 0221*      jp z,@note_end3
04103B 3E 14       0222*      ld a,20
04103D FD 77 0C    0223*      ld (iy+cmd_volume),a
041040 3E 6E       0224*      ld a,0x6E
041042 FD 77 05    0225*      ld (iy+cmd_frequency),a
041045 3E 02       0226*      ld a,0x02
041047 FD 77 06    0227*      ld (iy+cmd_frequency+1),a
04104A ED 33 0D    0228*      lea iy,iy+cmd_bytes
04104D             0229*  
04104D 3E 08       0230*      ld a,8
04104F FD 77 0C    0231*      ld (iy+cmd_volume),a
041052 3E 4A       0232*      ld a,0x4A
041054 FD 77 05    0233*      ld (iy+cmd_frequency),a
041057 3E 07       0234*      ld a,0x07
041059 FD 77 06    0235*      ld (iy+cmd_frequency+1),a
04105C ED 33 0D    0236*      lea iy,iy+cmd_bytes
04105F             0237*  
04105F 3E 0B       0238*      ld a,11
041061 FD 77 0C    0239*      ld (iy+cmd_volume),a
041064 3E DC       0240*      ld a,0xDC
041066 FD 77 05    0241*      ld (iy+cmd_frequency),a
041069 3E 04       0242*      ld a,0x04
04106B FD 77 06    0243*      ld (iy+cmd_frequency+1),a
04106E ED 33 0D    0244*      lea iy,iy+cmd_bytes
041071             0245*  
041071 3E 06       0246*      ld a,6
041073 FD 77 0C    0247*      ld (iy+cmd_volume),a
041076 3E B9       0248*      ld a,0xB9
041078 FD 77 05    0249*      ld (iy+cmd_frequency),a
04107B 3E 09       0250*      ld a,0x09
04107D FD 77 06    0251*      ld (iy+cmd_frequency+1),a
041080 ED 33 0D    0252*      lea iy,iy+cmd_bytes
041083             0253*  
041083 3E 04       0254*      ld a,4
041085 FD 77 0C    0255*      ld (iy+cmd_volume),a
041088 3E 95       0256*      ld a,0x95
04108A FD 77 05    0257*      ld (iy+cmd_frequency),a
04108D 3E 0E       0258*      ld a,0x0E
04108F FD 77 06    0259*      ld (iy+cmd_frequency+1),a
041092 ED 33 0D    0260*      lea iy,iy+cmd_bytes
041095             0261*  
041095 3E 03       0262*      ld a,3
041097 FD 77 0C    0263*      ld (iy+cmd_volume),a
04109A 3E 72       0264*      ld a,0x72
04109C FD 77 05    0265*      ld (iy+cmd_frequency),a
04109F 3E 13       0266*      ld a,0x13
0410A1 FD 77 06    0267*      ld (iy+cmd_frequency+1),a
0410A4 ED 33 0D    0268*      lea iy,iy+cmd_bytes
0410A7             0269*  
0410A7 3E 03       0270*      ld a,3
0410A9 FD 77 0C    0271*      ld (iy+cmd_volume),a
0410AC 3E 4E       0272*      ld a,0x4E
0410AE FD 77 05    0273*      ld (iy+cmd_frequency),a
0410B1 3E 18       0274*      ld a,0x18
0410B3 FD 77 06    0275*      ld (iy+cmd_frequency+1),a
0410B6 ED 33 0D    0276*      lea iy,iy+cmd_bytes
0410B9             0277*  
0410B9 3E 02       0278*      ld a,2
0410BB FD 77 0C    0279*      ld (iy+cmd_volume),a
0410BE 3E 2B       0280*      ld a,0x2B
0410C0 FD 77 05    0281*      ld (iy+cmd_frequency),a
0410C3 3E 1D       0282*      ld a,0x1D
0410C5 FD 77 06    0283*      ld (iy+cmd_frequency+1),a
0410C8 ED 33 0D    0284*      lea iy,iy+cmd_bytes
0410CB             0285*  
0410CB 21 B2 0D 04 0286*      ld hl,notes_played
0410CF 35          0287*      dec (hl)
0410D0 CA 9A 14 04 0288*      jp z,organ_notes_bank_1_end
0410D4             0289*  
0410D4             0290*  @note_end3:
0410D4             0291*  
0410D4 DD CB 02 5E 0292*      bit 3,(ix+2)
0410D8 CA 75 11 04 0293*      jp z,@note_end4
0410DC 3E 13       0294*      ld a,19
0410DE FD 77 0C    0295*      ld (iy+cmd_volume),a
0410E1 3E 93       0296*      ld a,0x93
0410E3 FD 77 05    0297*      ld (iy+cmd_frequency),a
0410E6 3E 02       0298*      ld a,0x02
0410E8 FD 77 06    0299*      ld (iy+cmd_frequency+1),a
0410EB ED 33 0D    0300*      lea iy,iy+cmd_bytes
0410EE             0301*  
0410EE 3E 08       0302*      ld a,8
0410F0 FD 77 0C    0303*      ld (iy+cmd_volume),a
0410F3 3E B9       0304*      ld a,0xB9
0410F5 FD 77 05    0305*      ld (iy+cmd_frequency),a
0410F8 3E 07       0306*      ld a,0x07
0410FA FD 77 06    0307*      ld (iy+cmd_frequency+1),a
0410FD ED 33 0D    0308*      lea iy,iy+cmd_bytes
041100             0309*  
041100 3E 0B       0310*      ld a,11
041102 FD 77 0C    0311*      ld (iy+cmd_volume),a
041105 3E 26       0312*      ld a,0x26
041107 FD 77 05    0313*      ld (iy+cmd_frequency),a
04110A 3E 05       0314*      ld a,0x05
04110C FD 77 06    0315*      ld (iy+cmd_frequency+1),a
04110F ED 33 0D    0316*      lea iy,iy+cmd_bytes
041112             0317*  
041112 3E 06       0318*      ld a,6
041114 FD 77 0C    0319*      ld (iy+cmd_volume),a
041117 3E 4D       0320*      ld a,0x4D
041119 FD 77 05    0321*      ld (iy+cmd_frequency),a
04111C 3E 0A       0322*      ld a,0x0A
04111E FD 77 06    0323*      ld (iy+cmd_frequency+1),a
041121 ED 33 0D    0324*      lea iy,iy+cmd_bytes
041124             0325*  
041124 3E 04       0326*      ld a,4
041126 FD 77 0C    0327*      ld (iy+cmd_volume),a
041129 3E 73       0328*      ld a,0x73
04112B FD 77 05    0329*      ld (iy+cmd_frequency),a
04112E 3E 0F       0330*      ld a,0x0F
041130 FD 77 06    0331*      ld (iy+cmd_frequency+1),a
041133 ED 33 0D    0332*      lea iy,iy+cmd_bytes
041136             0333*  
041136 3E 03       0334*      ld a,3
041138 FD 77 0C    0335*      ld (iy+cmd_volume),a
04113B 3E 9A       0336*      ld a,0x9A
04113D FD 77 05    0337*      ld (iy+cmd_frequency),a
041140 3E 14       0338*      ld a,0x14
041142 FD 77 06    0339*      ld (iy+cmd_frequency+1),a
041145 ED 33 0D    0340*      lea iy,iy+cmd_bytes
041148             0341*  
041148 3E 03       0342*      ld a,3
04114A FD 77 0C    0343*      ld (iy+cmd_volume),a
04114D 3E C0       0344*      ld a,0xC0
04114F FD 77 05    0345*      ld (iy+cmd_frequency),a
041152 3E 19       0346*      ld a,0x19
041154 FD 77 06    0347*      ld (iy+cmd_frequency+1),a
041157 ED 33 0D    0348*      lea iy,iy+cmd_bytes
04115A             0349*  
04115A 3E 02       0350*      ld a,2
04115C FD 77 0C    0351*      ld (iy+cmd_volume),a
04115F 3E E7       0352*      ld a,0xE7
041161 FD 77 05    0353*      ld (iy+cmd_frequency),a
041164 3E 1E       0354*      ld a,0x1E
041166 FD 77 06    0355*      ld (iy+cmd_frequency+1),a
041169 ED 33 0D    0356*      lea iy,iy+cmd_bytes
04116C             0357*  
04116C 21 B2 0D 04 0358*      ld hl,notes_played
041170 35          0359*      dec (hl)
041171 CA 9A 14 04 0360*      jp z,organ_notes_bank_1_end
041175             0361*  
041175             0362*  @note_end4:
041175             0363*  
041175 DD CB 06 66 0364*      bit 4,(ix+6)
041179 CA 16 12 04 0365*      jp z,@note_end5
04117D 3E 11       0366*      ld a,17
04117F FD 77 0C    0367*      ld (iy+cmd_volume),a
041182 3E 0F       0368*      ld a,0x0F
041184 FD 77 05    0369*      ld (iy+cmd_frequency),a
041187 3E 03       0370*      ld a,0x03
041189 FD 77 06    0371*      ld (iy+cmd_frequency+1),a
04118C ED 33 0D    0372*      lea iy,iy+cmd_bytes
04118F             0373*  
04118F 3E 07       0374*      ld a,7
041191 FD 77 0C    0375*      ld (iy+cmd_volume),a
041194 3E 2F       0376*      ld a,0x2F
041196 FD 77 05    0377*      ld (iy+cmd_frequency),a
041199 3E 09       0378*      ld a,0x09
04119B FD 77 06    0379*      ld (iy+cmd_frequency+1),a
04119E ED 33 0D    0380*      lea iy,iy+cmd_bytes
0411A1             0381*  
0411A1 3E 09       0382*      ld a,9
0411A3 FD 77 0C    0383*      ld (iy+cmd_volume),a
0411A6 3E 1F       0384*      ld a,0x1F
0411A8 FD 77 05    0385*      ld (iy+cmd_frequency),a
0411AB 3E 06       0386*      ld a,0x06
0411AD FD 77 06    0387*      ld (iy+cmd_frequency+1),a
0411B0 ED 33 0D    0388*      lea iy,iy+cmd_bytes
0411B3             0389*  
0411B3 3E 05       0390*      ld a,5
0411B5 FD 77 0C    0391*      ld (iy+cmd_volume),a
0411B8 3E 3F       0392*      ld a,0x3F
0411BA FD 77 05    0393*      ld (iy+cmd_frequency),a
0411BD 3E 0C       0394*      ld a,0x0C
0411BF FD 77 06    0395*      ld (iy+cmd_frequency+1),a
0411C2 ED 33 0D    0396*      lea iy,iy+cmd_bytes
0411C5             0397*  
0411C5 3E 04       0398*      ld a,4
0411C7 FD 77 0C    0399*      ld (iy+cmd_volume),a
0411CA 3E 5F       0400*      ld a,0x5F
0411CC FD 77 05    0401*      ld (iy+cmd_frequency),a
0411CF 3E 12       0402*      ld a,0x12
0411D1 FD 77 06    0403*      ld (iy+cmd_frequency+1),a
0411D4 ED 33 0D    0404*      lea iy,iy+cmd_bytes
0411D7             0405*  
0411D7 3E 03       0406*      ld a,3
0411D9 FD 77 0C    0407*      ld (iy+cmd_volume),a
0411DC 3E 7F       0408*      ld a,0x7F
0411DE FD 77 05    0409*      ld (iy+cmd_frequency),a
0411E1 3E 18       0410*      ld a,0x18
0411E3 FD 77 06    0411*      ld (iy+cmd_frequency+1),a
0411E6 ED 33 0D    0412*      lea iy,iy+cmd_bytes
0411E9             0413*  
0411E9 3E 02       0414*      ld a,2
0411EB FD 77 0C    0415*      ld (iy+cmd_volume),a
0411EE 3E 9F       0416*      ld a,0x9F
0411F0 FD 77 05    0417*      ld (iy+cmd_frequency),a
0411F3 3E 1E       0418*      ld a,0x1E
0411F5 FD 77 06    0419*      ld (iy+cmd_frequency+1),a
0411F8 ED 33 0D    0420*      lea iy,iy+cmd_bytes
0411FB             0421*  
0411FB 3E 02       0422*      ld a,2
0411FD FD 77 0C    0423*      ld (iy+cmd_volume),a
041200 3E BF       0424*      ld a,0xBF
041202 FD 77 05    0425*      ld (iy+cmd_frequency),a
041205 3E 24       0426*      ld a,0x24
041207 FD 77 06    0427*      ld (iy+cmd_frequency+1),a
04120A ED 33 0D    0428*      lea iy,iy+cmd_bytes
04120D             0429*  
04120D 21 B2 0D 04 0430*      ld hl,notes_played
041211 35          0431*      dec (hl)
041212 CA 9A 14 04 0432*      jp z,organ_notes_bank_1_end
041216             0433*  
041216             0434*  @note_end5:
041216             0435*  
041216 DD CB 04 66 0436*      bit 4,(ix+4)
04121A CA B7 12 04 0437*      jp z,@note_end6
04121E 3E 0F       0438*      ld a,15
041220 FD 77 0C    0439*      ld (iy+cmd_volume),a
041223 3E 70       0440*      ld a,0x70
041225 FD 77 05    0441*      ld (iy+cmd_frequency),a
041228 3E 03       0442*      ld a,0x03
04122A FD 77 06    0443*      ld (iy+cmd_frequency+1),a
04122D ED 33 0D    0444*      lea iy,iy+cmd_bytes
041230             0445*  
041230 3E 06       0446*      ld a,6
041232 FD 77 0C    0447*      ld (iy+cmd_volume),a
041235 3E 50       0448*      ld a,0x50
041237 FD 77 05    0449*      ld (iy+cmd_frequency),a
04123A 3E 0A       0450*      ld a,0x0A
04123C FD 77 06    0451*      ld (iy+cmd_frequency+1),a
04123F ED 33 0D    0452*      lea iy,iy+cmd_bytes
041242             0453*  
041242 3E 09       0454*      ld a,9
041244 FD 77 0C    0455*      ld (iy+cmd_volume),a
041247 3E E0       0456*      ld a,0xE0
041249 FD 77 05    0457*      ld (iy+cmd_frequency),a
04124C 3E 06       0458*      ld a,0x06
04124E FD 77 06    0459*      ld (iy+cmd_frequency+1),a
041251 ED 33 0D    0460*      lea iy,iy+cmd_bytes
041254             0461*  
041254 3E 05       0462*      ld a,5
041256 FD 77 0C    0463*      ld (iy+cmd_volume),a
041259 3E C0       0464*      ld a,0xC0
04125B FD 77 05    0465*      ld (iy+cmd_frequency),a
04125E 3E 0D       0466*      ld a,0x0D
041260 FD 77 06    0467*      ld (iy+cmd_frequency+1),a
041263 ED 33 0D    0468*      lea iy,iy+cmd_bytes
041266             0469*  
041266 3E 03       0470*      ld a,3
041268 FD 77 0C    0471*      ld (iy+cmd_volume),a
04126B 3E A0       0472*      ld a,0xA0
04126D FD 77 05    0473*      ld (iy+cmd_frequency),a
041270 3E 14       0474*      ld a,0x14
041272 FD 77 06    0475*      ld (iy+cmd_frequency+1),a
041275 ED 33 0D    0476*      lea iy,iy+cmd_bytes
041278             0477*  
041278 3E 02       0478*      ld a,2
04127A FD 77 0C    0479*      ld (iy+cmd_volume),a
04127D 3E 80       0480*      ld a,0x80
04127F FD 77 05    0481*      ld (iy+cmd_frequency),a
041282 3E 1B       0482*      ld a,0x1B
041284 FD 77 06    0483*      ld (iy+cmd_frequency+1),a
041287 ED 33 0D    0484*      lea iy,iy+cmd_bytes
04128A             0485*  
04128A 3E 02       0486*      ld a,2
04128C FD 77 0C    0487*      ld (iy+cmd_volume),a
04128F 3E 60       0488*      ld a,0x60
041291 FD 77 05    0489*      ld (iy+cmd_frequency),a
041294 3E 22       0490*      ld a,0x22
041296 FD 77 06    0491*      ld (iy+cmd_frequency+1),a
041299 ED 33 0D    0492*      lea iy,iy+cmd_bytes
04129C             0493*  
04129C 3E 02       0494*      ld a,2
04129E FD 77 0C    0495*      ld (iy+cmd_volume),a
0412A1 3E 40       0496*      ld a,0x40
0412A3 FD 77 05    0497*      ld (iy+cmd_frequency),a
0412A6 3E 29       0498*      ld a,0x29
0412A8 FD 77 06    0499*      ld (iy+cmd_frequency+1),a
0412AB ED 33 0D    0500*      lea iy,iy+cmd_bytes
0412AE             0501*  
0412AE 21 B2 0D 04 0502*      ld hl,notes_played
0412B2 35          0503*      dec (hl)
0412B3 CA 9A 14 04 0504*      jp z,organ_notes_bank_1_end
0412B7             0505*  
0412B7             0506*  @note_end6:
0412B7             0507*  
0412B7 DD CB 02 6E 0508*      bit 5,(ix+2)
0412BB CA 58 13 04 0509*      jp z,@note_end7
0412BF 3E 0D       0510*      ld a,13
0412C1 FD 77 0C    0511*      ld (iy+cmd_volume),a
0412C4 3E 16       0512*      ld a,0x16
0412C6 FD 77 05    0513*      ld (iy+cmd_frequency),a
0412C9 3E 04       0514*      ld a,0x04
0412CB FD 77 06    0515*      ld (iy+cmd_frequency+1),a
0412CE ED 33 0D    0516*      lea iy,iy+cmd_bytes
0412D1             0517*  
0412D1 3E 05       0518*      ld a,5
0412D3 FD 77 0C    0519*      ld (iy+cmd_volume),a
0412D6 3E 43       0520*      ld a,0x43
0412D8 FD 77 05    0521*      ld (iy+cmd_frequency),a
0412DB 3E 0C       0522*      ld a,0x0C
0412DD FD 77 06    0523*      ld (iy+cmd_frequency+1),a
0412E0 ED 33 0D    0524*      lea iy,iy+cmd_bytes
0412E3             0525*  
0412E3 3E 07       0526*      ld a,7
0412E5 FD 77 0C    0527*      ld (iy+cmd_volume),a
0412E8 3E 2D       0528*      ld a,0x2D
0412EA FD 77 05    0529*      ld (iy+cmd_frequency),a
0412ED 3E 08       0530*      ld a,0x08
0412EF FD 77 06    0531*      ld (iy+cmd_frequency+1),a
0412F2 ED 33 0D    0532*      lea iy,iy+cmd_bytes
0412F5             0533*  
0412F5 3E 04       0534*      ld a,4
0412F7 FD 77 0C    0535*      ld (iy+cmd_volume),a
0412FA 3E 5A       0536*      ld a,0x5A
0412FC FD 77 05    0537*      ld (iy+cmd_frequency),a
0412FF 3E 10       0538*      ld a,0x10
041301 FD 77 06    0539*      ld (iy+cmd_frequency+1),a
041304 ED 33 0D    0540*      lea iy,iy+cmd_bytes
041307             0541*  
041307 3E 03       0542*      ld a,3
041309 FD 77 0C    0543*      ld (iy+cmd_volume),a
04130C 3E 87       0544*      ld a,0x87
04130E FD 77 05    0545*      ld (iy+cmd_frequency),a
041311 3E 18       0546*      ld a,0x18
041313 FD 77 06    0547*      ld (iy+cmd_frequency+1),a
041316 ED 33 0D    0548*      lea iy,iy+cmd_bytes
041319             0549*  
041319 3E 02       0550*      ld a,2
04131B FD 77 0C    0551*      ld (iy+cmd_volume),a
04131E 3E B4       0552*      ld a,0xB4
041320 FD 77 05    0553*      ld (iy+cmd_frequency),a
041323 3E 20       0554*      ld a,0x20
041325 FD 77 06    0555*      ld (iy+cmd_frequency+1),a
041328 ED 33 0D    0556*      lea iy,iy+cmd_bytes
04132B             0557*  
04132B 3E 02       0558*      ld a,2
04132D FD 77 0C    0559*      ld (iy+cmd_volume),a
041330 3E E1       0560*      ld a,0xE1
041332 FD 77 05    0561*      ld (iy+cmd_frequency),a
041335 3E 28       0562*      ld a,0x28
041337 FD 77 06    0563*      ld (iy+cmd_frequency+1),a
04133A ED 33 0D    0564*      lea iy,iy+cmd_bytes
04133D             0565*  
04133D 3E 01       0566*      ld a,1
04133F FD 77 0C    0567*      ld (iy+cmd_volume),a
041342 3E 0E       0568*      ld a,0x0E
041344 FD 77 05    0569*      ld (iy+cmd_frequency),a
041347 3E 31       0570*      ld a,0x31
041349 FD 77 06    0571*      ld (iy+cmd_frequency+1),a
04134C ED 33 0D    0572*      lea iy,iy+cmd_bytes
04134F             0573*  
04134F 21 B2 0D 04 0574*      ld hl,notes_played
041353 35          0575*      dec (hl)
041354 CA 9A 14 04 0576*      jp z,organ_notes_bank_1_end
041358             0577*  
041358             0578*  @note_end7:
041358             0579*  
041358 DD CB 04 76 0580*      bit 6,(ix+4)
04135C CA F9 13 04 0581*      jp z,@note_end8
041360 3E 0C       0582*      ld a,12
041362 FD 77 0C    0583*      ld (iy+cmd_volume),a
041365 3E 96       0584*      ld a,0x96
041367 FD 77 05    0585*      ld (iy+cmd_frequency),a
04136A 3E 04       0586*      ld a,0x04
04136C FD 77 06    0587*      ld (iy+cmd_frequency+1),a
04136F ED 33 0D    0588*      lea iy,iy+cmd_bytes
041372             0589*  
041372 3E 05       0590*      ld a,5
041374 FD 77 0C    0591*      ld (iy+cmd_volume),a
041377 3E C3       0592*      ld a,0xC3
041379 FD 77 05    0593*      ld (iy+cmd_frequency),a
04137C 3E 0D       0594*      ld a,0x0D
04137E FD 77 06    0595*      ld (iy+cmd_frequency+1),a
041381 ED 33 0D    0596*      lea iy,iy+cmd_bytes
041384             0597*  
041384 3E 07       0598*      ld a,7
041386 FD 77 0C    0599*      ld (iy+cmd_volume),a
041389 3E 2D       0600*      ld a,0x2D
04138B FD 77 05    0601*      ld (iy+cmd_frequency),a
04138E 3E 09       0602*      ld a,0x09
041390 FD 77 06    0603*      ld (iy+cmd_frequency+1),a
041393 ED 33 0D    0604*      lea iy,iy+cmd_bytes
041396             0605*  
041396 3E 04       0606*      ld a,4
041398 FD 77 0C    0607*      ld (iy+cmd_volume),a
04139B 3E 5A       0608*      ld a,0x5A
04139D FD 77 05    0609*      ld (iy+cmd_frequency),a
0413A0 3E 12       0610*      ld a,0x12
0413A2 FD 77 06    0611*      ld (iy+cmd_frequency+1),a
0413A5 ED 33 0D    0612*      lea iy,iy+cmd_bytes
0413A8             0613*  
0413A8 3E 02       0614*      ld a,2
0413AA FD 77 0C    0615*      ld (iy+cmd_volume),a
0413AD 3E 87       0616*      ld a,0x87
0413AF FD 77 05    0617*      ld (iy+cmd_frequency),a
0413B2 3E 1B       0618*      ld a,0x1B
0413B4 FD 77 06    0619*      ld (iy+cmd_frequency+1),a
0413B7 ED 33 0D    0620*      lea iy,iy+cmd_bytes
0413BA             0621*  
0413BA 3E 02       0622*      ld a,2
0413BC FD 77 0C    0623*      ld (iy+cmd_volume),a
0413BF 3E B5       0624*      ld a,0xB5
0413C1 FD 77 05    0625*      ld (iy+cmd_frequency),a
0413C4 3E 24       0626*      ld a,0x24
0413C6 FD 77 06    0627*      ld (iy+cmd_frequency+1),a
0413C9 ED 33 0D    0628*      lea iy,iy+cmd_bytes
0413CC             0629*  
0413CC 3E 01       0630*      ld a,1
0413CE FD 77 0C    0631*      ld (iy+cmd_volume),a
0413D1 3E E2       0632*      ld a,0xE2
0413D3 FD 77 05    0633*      ld (iy+cmd_frequency),a
0413D6 3E 2D       0634*      ld a,0x2D
0413D8 FD 77 06    0635*      ld (iy+cmd_frequency+1),a
0413DB ED 33 0D    0636*      lea iy,iy+cmd_bytes
0413DE             0637*  
0413DE 3E 01       0638*      ld a,1
0413E0 FD 77 0C    0639*      ld (iy+cmd_volume),a
0413E3 3E 0F       0640*      ld a,0x0F
0413E5 FD 77 05    0641*      ld (iy+cmd_frequency),a
0413E8 3E 37       0642*      ld a,0x37
0413EA FD 77 06    0643*      ld (iy+cmd_frequency+1),a
0413ED ED 33 0D    0644*      lea iy,iy+cmd_bytes
0413F0             0645*  
0413F0 21 B2 0D 04 0646*      ld hl,notes_played
0413F4 35          0647*      dec (hl)
0413F5 CA 9A 14 04 0648*      jp z,organ_notes_bank_1_end
0413F9             0649*  
0413F9             0650*  @note_end8:
0413F9             0651*  
0413F9 DD CB 04 7E 0652*      bit 7,(ix+4)
0413FD CA 9A 14 04 0653*      jp z,@note_end9
041401 3E 0B       0654*      ld a,11
041403 FD 77 0C    0655*      ld (iy+cmd_volume),a
041406 3E DC       0656*      ld a,0xDC
041408 FD 77 05    0657*      ld (iy+cmd_frequency),a
04140B 3E 04       0658*      ld a,0x04
04140D FD 77 06    0659*      ld (iy+cmd_frequency+1),a
041410 ED 33 0D    0660*      lea iy,iy+cmd_bytes
041413             0661*  
041413 3E 04       0662*      ld a,4
041415 FD 77 0C    0663*      ld (iy+cmd_volume),a
041418 3E 95       0664*      ld a,0x95
04141A FD 77 05    0665*      ld (iy+cmd_frequency),a
04141D 3E 0E       0666*      ld a,0x0E
04141F FD 77 06    0667*      ld (iy+cmd_frequency+1),a
041422 ED 33 0D    0668*      lea iy,iy+cmd_bytes
041425             0669*  
041425 3E 06       0670*      ld a,6
041427 FD 77 0C    0671*      ld (iy+cmd_volume),a
04142A 3E B9       0672*      ld a,0xB9
04142C FD 77 05    0673*      ld (iy+cmd_frequency),a
04142F 3E 09       0674*      ld a,0x09
041431 FD 77 06    0675*      ld (iy+cmd_frequency+1),a
041434 ED 33 0D    0676*      lea iy,iy+cmd_bytes
041437             0677*  
041437 3E 03       0678*      ld a,3
041439 FD 77 0C    0679*      ld (iy+cmd_volume),a
04143C 3E 72       0680*      ld a,0x72
04143E FD 77 05    0681*      ld (iy+cmd_frequency),a
041441 3E 13       0682*      ld a,0x13
041443 FD 77 06    0683*      ld (iy+cmd_frequency+1),a
041446 ED 33 0D    0684*      lea iy,iy+cmd_bytes
041449             0685*  
041449 3E 02       0686*      ld a,2
04144B FD 77 0C    0687*      ld (iy+cmd_volume),a
04144E 3E 2B       0688*      ld a,0x2B
041450 FD 77 05    0689*      ld (iy+cmd_frequency),a
041453 3E 1D       0690*      ld a,0x1D
041455 FD 77 06    0691*      ld (iy+cmd_frequency+1),a
041458 ED 33 0D    0692*      lea iy,iy+cmd_bytes
04145B             0693*  
04145B 3E 02       0694*      ld a,2
04145D FD 77 0C    0695*      ld (iy+cmd_volume),a
041460 3E E4       0696*      ld a,0xE4
041462 FD 77 05    0697*      ld (iy+cmd_frequency),a
041465 3E 26       0698*      ld a,0x26
041467 FD 77 06    0699*      ld (iy+cmd_frequency+1),a
04146A ED 33 0D    0700*      lea iy,iy+cmd_bytes
04146D             0701*  
04146D 3E 01       0702*      ld a,1
04146F FD 77 0C    0703*      ld (iy+cmd_volume),a
041472 3E 9D       0704*      ld a,0x9D
041474 FD 77 05    0705*      ld (iy+cmd_frequency),a
041477 3E 30       0706*      ld a,0x30
041479 FD 77 06    0707*      ld (iy+cmd_frequency+1),a
04147C ED 33 0D    0708*      lea iy,iy+cmd_bytes
04147F             0709*  
04147F 3E 01       0710*      ld a,1
041481 FD 77 0C    0711*      ld (iy+cmd_volume),a
041484 3E 56       0712*      ld a,0x56
041486 FD 77 05    0713*      ld (iy+cmd_frequency),a
041489 3E 3A       0714*      ld a,0x3A
04148B FD 77 06    0715*      ld (iy+cmd_frequency+1),a
04148E ED 33 0D    0716*      lea iy,iy+cmd_bytes
041491             0717*  
041491 21 B2 0D 04 0718*      ld hl,notes_played
041495 35          0719*      dec (hl)
041496 CA 9A 14 04 0720*      jp z,organ_notes_bank_1_end
04149A             0721*  
04149A             0722*  @note_end9:
04149A             0723*  
04149A             0724*  organ_notes_bank_1_end:
04149A             0223       include "organ/src/asm/organ_notes_bank_2.asm"
04149A             0001*  organ_notes_bank_2:
04149A FD 21 DE 0B 0002*      ld iy,cmd0
       04          
04149F             0003*  
04149F DD CB 02 46 0004*      bit 0,(ix+2)
0414A3 CA 40 15 04 0005*      jp z,@note_end10
0414A7 3E 2F       0006*      ld a,47
0414A9 FD 77 0C    0007*      ld (iy+cmd_volume),a
0414AC 3E DC       0008*      ld a,0xDC
0414AE FD 77 05    0009*      ld (iy+cmd_frequency),a
0414B1 3E 00       0010*      ld a,0x00
0414B3 FD 77 06    0011*      ld (iy+cmd_frequency+1),a
0414B6 ED 33 0D    0012*      lea iy,iy+cmd_bytes
0414B9             0013*  
0414B9 3E 13       0014*      ld a,19
0414BB FD 77 0C    0015*      ld (iy+cmd_volume),a
0414BE 3E 94       0016*      ld a,0x94
0414C0 FD 77 05    0017*      ld (iy+cmd_frequency),a
0414C3 3E 02       0018*      ld a,0x02
0414C5 FD 77 06    0019*      ld (iy+cmd_frequency+1),a
0414C8 ED 33 0D    0020*      lea iy,iy+cmd_bytes
0414CB             0021*  
0414CB 3E 1B       0022*      ld a,27
0414CD FD 77 0C    0023*      ld (iy+cmd_volume),a
0414D0 3E B8       0024*      ld a,0xB8
0414D2 FD 77 05    0025*      ld (iy+cmd_frequency),a
0414D5 3E 01       0026*      ld a,0x01
0414D7 FD 77 06    0027*      ld (iy+cmd_frequency+1),a
0414DA ED 33 0D    0028*      lea iy,iy+cmd_bytes
0414DD             0029*  
0414DD 3E 0F       0030*      ld a,15
0414DF FD 77 0C    0031*      ld (iy+cmd_volume),a
0414E2 3E 70       0032*      ld a,0x70
0414E4 FD 77 05    0033*      ld (iy+cmd_frequency),a
0414E7 3E 03       0034*      ld a,0x03
0414E9 FD 77 06    0035*      ld (iy+cmd_frequency+1),a
0414EC ED 33 0D    0036*      lea iy,iy+cmd_bytes
0414EF             0037*  
0414EF 3E 0B       0038*      ld a,11
0414F1 FD 77 0C    0039*      ld (iy+cmd_volume),a
0414F4 3E 28       0040*      ld a,0x28
0414F6 FD 77 05    0041*      ld (iy+cmd_frequency),a
0414F9 3E 05       0042*      ld a,0x05
0414FB FD 77 06    0043*      ld (iy+cmd_frequency+1),a
0414FE ED 33 0D    0044*      lea iy,iy+cmd_bytes
041501             0045*  
041501 3E 09       0046*      ld a,9
041503 FD 77 0C    0047*      ld (iy+cmd_volume),a
041506 3E E0       0048*      ld a,0xE0
041508 FD 77 05    0049*      ld (iy+cmd_frequency),a
04150B 3E 06       0050*      ld a,0x06
04150D FD 77 06    0051*      ld (iy+cmd_frequency+1),a
041510 ED 33 0D    0052*      lea iy,iy+cmd_bytes
041513             0053*  
041513 3E 07       0054*      ld a,7
041515 FD 77 0C    0055*      ld (iy+cmd_volume),a
041518 3E 98       0056*      ld a,0x98
04151A FD 77 05    0057*      ld (iy+cmd_frequency),a
04151D 3E 08       0058*      ld a,0x08
04151F FD 77 06    0059*      ld (iy+cmd_frequency+1),a
041522 ED 33 0D    0060*      lea iy,iy+cmd_bytes
041525             0061*  
041525 3E 06       0062*      ld a,6
041527 FD 77 0C    0063*      ld (iy+cmd_volume),a
04152A 3E 50       0064*      ld a,0x50
04152C FD 77 05    0065*      ld (iy+cmd_frequency),a
04152F 3E 0A       0066*      ld a,0x0A
041531 FD 77 06    0067*      ld (iy+cmd_frequency+1),a
041534 ED 33 0D    0068*      lea iy,iy+cmd_bytes
041537             0069*  
041537 21 B2 0D 04 0070*      ld hl,notes_played
04153B 35          0071*      dec (hl)
04153C CA E9 1A 04 0072*      jp z,organ_notes_bank_2_end
041540             0073*  
041540             0074*  @note_end10:
041540             0075*  
041540 DD CB 04 4E 0076*      bit 1,(ix+4)
041544 CA E1 15 04 0077*      jp z,@note_end11
041548 3E 29       0078*      ld a,41
04154A FD 77 0C    0079*      ld (iy+cmd_volume),a
04154D 3E 05       0080*      ld a,0x05
04154F FD 77 05    0081*      ld (iy+cmd_frequency),a
041552 3E 01       0082*      ld a,0x01
041554 FD 77 06    0083*      ld (iy+cmd_frequency+1),a
041557 ED 33 0D    0084*      lea iy,iy+cmd_bytes
04155A             0085*  
04155A 3E 11       0086*      ld a,17
04155C FD 77 0C    0087*      ld (iy+cmd_volume),a
04155F 3E 10       0088*      ld a,0x10
041561 FD 77 05    0089*      ld (iy+cmd_frequency),a
041564 3E 03       0090*      ld a,0x03
041566 FD 77 06    0091*      ld (iy+cmd_frequency+1),a
041569 ED 33 0D    0092*      lea iy,iy+cmd_bytes
04156C             0093*  
04156C 3E 17       0094*      ld a,23
04156E FD 77 0C    0095*      ld (iy+cmd_volume),a
041571 3E 0B       0096*      ld a,0x0B
041573 FD 77 05    0097*      ld (iy+cmd_frequency),a
041576 3E 02       0098*      ld a,0x02
041578 FD 77 06    0099*      ld (iy+cmd_frequency+1),a
04157B ED 33 0D    0100*      lea iy,iy+cmd_bytes
04157E             0101*  
04157E 3E 0D       0102*      ld a,13
041580 FD 77 0C    0103*      ld (iy+cmd_volume),a
041583 3E 16       0104*      ld a,0x16
041585 FD 77 05    0105*      ld (iy+cmd_frequency),a
041588 3E 04       0106*      ld a,0x04
04158A FD 77 06    0107*      ld (iy+cmd_frequency+1),a
04158D ED 33 0D    0108*      lea iy,iy+cmd_bytes
041590             0109*  
041590 3E 09       0110*      ld a,9
041592 FD 77 0C    0111*      ld (iy+cmd_volume),a
041595 3E 21       0112*      ld a,0x21
041597 FD 77 05    0113*      ld (iy+cmd_frequency),a
04159A 3E 06       0114*      ld a,0x06
04159C FD 77 06    0115*      ld (iy+cmd_frequency+1),a
04159F ED 33 0D    0116*      lea iy,iy+cmd_bytes
0415A2             0117*  
0415A2 3E 07       0118*      ld a,7
0415A4 FD 77 0C    0119*      ld (iy+cmd_volume),a
0415A7 3E 2D       0120*      ld a,0x2D
0415A9 FD 77 05    0121*      ld (iy+cmd_frequency),a
0415AC 3E 08       0122*      ld a,0x08
0415AE FD 77 06    0123*      ld (iy+cmd_frequency+1),a
0415B1 ED 33 0D    0124*      lea iy,iy+cmd_bytes
0415B4             0125*  
0415B4 3E 06       0126*      ld a,6
0415B6 FD 77 0C    0127*      ld (iy+cmd_volume),a
0415B9 3E 38       0128*      ld a,0x38
0415BB FD 77 05    0129*      ld (iy+cmd_frequency),a
0415BE 3E 0A       0130*      ld a,0x0A
0415C0 FD 77 06    0131*      ld (iy+cmd_frequency+1),a
0415C3 ED 33 0D    0132*      lea iy,iy+cmd_bytes
0415C6             0133*  
0415C6 3E 05       0134*      ld a,5
0415C8 FD 77 0C    0135*      ld (iy+cmd_volume),a
0415CB 3E 43       0136*      ld a,0x43
0415CD FD 77 05    0137*      ld (iy+cmd_frequency),a
0415D0 3E 0C       0138*      ld a,0x0C
0415D2 FD 77 06    0139*      ld (iy+cmd_frequency+1),a
0415D5 ED 33 0D    0140*      lea iy,iy+cmd_bytes
0415D8             0141*  
0415D8 21 B2 0D 04 0142*      ld hl,notes_played
0415DC 35          0143*      dec (hl)
0415DD CA E9 1A 04 0144*      jp z,organ_notes_bank_2_end
0415E1             0145*  
0415E1             0146*  @note_end11:
0415E1             0147*  
0415E1 DD CB 04 56 0148*      bit 2,(ix+4)
0415E5 CA 82 16 04 0149*      jp z,@note_end12
0415E9 3E 26       0150*      ld a,38
0415EB FD 77 0C    0151*      ld (iy+cmd_volume),a
0415EE 3E 25       0152*      ld a,0x25
0415F0 FD 77 05    0153*      ld (iy+cmd_frequency),a
0415F3 3E 01       0154*      ld a,0x01
0415F5 FD 77 06    0155*      ld (iy+cmd_frequency+1),a
0415F8 ED 33 0D    0156*      lea iy,iy+cmd_bytes
0415FB             0157*  
0415FB 3E 0F       0158*      ld a,15
0415FD FD 77 0C    0159*      ld (iy+cmd_volume),a
041600 3E 70       0160*      ld a,0x70
041602 FD 77 05    0161*      ld (iy+cmd_frequency),a
041605 3E 03       0162*      ld a,0x03
041607 FD 77 06    0163*      ld (iy+cmd_frequency+1),a
04160A ED 33 0D    0164*      lea iy,iy+cmd_bytes
04160D             0165*  
04160D 3E 15       0166*      ld a,21
04160F FD 77 0C    0167*      ld (iy+cmd_volume),a
041612 3E 4B       0168*      ld a,0x4B
041614 FD 77 05    0169*      ld (iy+cmd_frequency),a
041617 3E 02       0170*      ld a,0x02
041619 FD 77 06    0171*      ld (iy+cmd_frequency+1),a
04161C ED 33 0D    0172*      lea iy,iy+cmd_bytes
04161F             0173*  
04161F 3E 0C       0174*      ld a,12
041621 FD 77 0C    0175*      ld (iy+cmd_volume),a
041624 3E 96       0176*      ld a,0x96
041626 FD 77 05    0177*      ld (iy+cmd_frequency),a
041629 3E 04       0178*      ld a,0x04
04162B FD 77 06    0179*      ld (iy+cmd_frequency+1),a
04162E ED 33 0D    0180*      lea iy,iy+cmd_bytes
041631             0181*  
041631 3E 09       0182*      ld a,9
041633 FD 77 0C    0183*      ld (iy+cmd_volume),a
041636 3E E1       0184*      ld a,0xE1
041638 FD 77 05    0185*      ld (iy+cmd_frequency),a
04163B 3E 06       0186*      ld a,0x06
04163D FD 77 06    0187*      ld (iy+cmd_frequency+1),a
041640 ED 33 0D    0188*      lea iy,iy+cmd_bytes
041643             0189*  
041643 3E 07       0190*      ld a,7
041645 FD 77 0C    0191*      ld (iy+cmd_volume),a
041648 3E 2D       0192*      ld a,0x2D
04164A FD 77 05    0193*      ld (iy+cmd_frequency),a
04164D 3E 09       0194*      ld a,0x09
04164F FD 77 06    0195*      ld (iy+cmd_frequency+1),a
041652 ED 33 0D    0196*      lea iy,iy+cmd_bytes
041655             0197*  
041655 3E 06       0198*      ld a,6
041657 FD 77 0C    0199*      ld (iy+cmd_volume),a
04165A 3E 78       0200*      ld a,0x78
04165C FD 77 05    0201*      ld (iy+cmd_frequency),a
04165F 3E 0B       0202*      ld a,0x0B
041661 FD 77 06    0203*      ld (iy+cmd_frequency+1),a
041664 ED 33 0D    0204*      lea iy,iy+cmd_bytes
041667             0205*  
041667 3E 05       0206*      ld a,5
041669 FD 77 0C    0207*      ld (iy+cmd_volume),a
04166C 3E C3       0208*      ld a,0xC3
04166E FD 77 05    0209*      ld (iy+cmd_frequency),a
041671 3E 0D       0210*      ld a,0x0D
041673 FD 77 06    0211*      ld (iy+cmd_frequency+1),a
041676 ED 33 0D    0212*      lea iy,iy+cmd_bytes
041679             0213*  
041679 21 B2 0D 04 0214*      ld hl,notes_played
04167D 35          0215*      dec (hl)
04167E CA E9 1A 04 0216*      jp z,organ_notes_bank_2_end
041682             0217*  
041682             0218*  @note_end12:
041682             0219*  
041682 DD CB 06 5E 0220*      bit 3,(ix+6)
041686 CA 23 17 04 0221*      jp z,@note_end13
04168A 3E 24       0222*      ld a,36
04168C FD 77 0C    0223*      ld (iy+cmd_volume),a
04168F 3E 37       0224*      ld a,0x37
041691 FD 77 05    0225*      ld (iy+cmd_frequency),a
041694 3E 01       0226*      ld a,0x01
041696 FD 77 06    0227*      ld (iy+cmd_frequency+1),a
041699 ED 33 0D    0228*      lea iy,iy+cmd_bytes
04169C             0229*  
04169C 3E 0F       0230*      ld a,15
04169E FD 77 0C    0231*      ld (iy+cmd_volume),a
0416A1 3E A5       0232*      ld a,0xA5
0416A3 FD 77 05    0233*      ld (iy+cmd_frequency),a
0416A6 3E 03       0234*      ld a,0x03
0416A8 FD 77 06    0235*      ld (iy+cmd_frequency+1),a
0416AB ED 33 0D    0236*      lea iy,iy+cmd_bytes
0416AE             0237*  
0416AE 3E 14       0238*      ld a,20
0416B0 FD 77 0C    0239*      ld (iy+cmd_volume),a
0416B3 3E 6E       0240*      ld a,0x6E
0416B5 FD 77 05    0241*      ld (iy+cmd_frequency),a
0416B8 3E 02       0242*      ld a,0x02
0416BA FD 77 06    0243*      ld (iy+cmd_frequency+1),a
0416BD ED 33 0D    0244*      lea iy,iy+cmd_bytes
0416C0             0245*  
0416C0 3E 0B       0246*      ld a,11
0416C2 FD 77 0C    0247*      ld (iy+cmd_volume),a
0416C5 3E DC       0248*      ld a,0xDC
0416C7 FD 77 05    0249*      ld (iy+cmd_frequency),a
0416CA 3E 04       0250*      ld a,0x04
0416CC FD 77 06    0251*      ld (iy+cmd_frequency+1),a
0416CF ED 33 0D    0252*      lea iy,iy+cmd_bytes
0416D2             0253*  
0416D2 3E 08       0254*      ld a,8
0416D4 FD 77 0C    0255*      ld (iy+cmd_volume),a
0416D7 3E 4A       0256*      ld a,0x4A
0416D9 FD 77 05    0257*      ld (iy+cmd_frequency),a
0416DC 3E 07       0258*      ld a,0x07
0416DE FD 77 06    0259*      ld (iy+cmd_frequency+1),a
0416E1 ED 33 0D    0260*      lea iy,iy+cmd_bytes
0416E4             0261*  
0416E4 3E 06       0262*      ld a,6
0416E6 FD 77 0C    0263*      ld (iy+cmd_volume),a
0416E9 3E B9       0264*      ld a,0xB9
0416EB FD 77 05    0265*      ld (iy+cmd_frequency),a
0416EE 3E 09       0266*      ld a,0x09
0416F0 FD 77 06    0267*      ld (iy+cmd_frequency+1),a
0416F3 ED 33 0D    0268*      lea iy,iy+cmd_bytes
0416F6             0269*  
0416F6 3E 05       0270*      ld a,5
0416F8 FD 77 0C    0271*      ld (iy+cmd_volume),a
0416FB 3E 27       0272*      ld a,0x27
0416FD FD 77 05    0273*      ld (iy+cmd_frequency),a
041700 3E 0C       0274*      ld a,0x0C
041702 FD 77 06    0275*      ld (iy+cmd_frequency+1),a
041705 ED 33 0D    0276*      lea iy,iy+cmd_bytes
041708             0277*  
041708 3E 04       0278*      ld a,4
04170A FD 77 0C    0279*      ld (iy+cmd_volume),a
04170D 3E 95       0280*      ld a,0x95
04170F FD 77 05    0281*      ld (iy+cmd_frequency),a
041712 3E 0E       0282*      ld a,0x0E
041714 FD 77 06    0283*      ld (iy+cmd_frequency+1),a
041717 ED 33 0D    0284*      lea iy,iy+cmd_bytes
04171A             0285*  
04171A 21 B2 0D 04 0286*      ld hl,notes_played
04171E 35          0287*      dec (hl)
04171F CA E9 1A 04 0288*      jp z,organ_notes_bank_2_end
041723             0289*  
041723             0290*  @note_end13:
041723             0291*  
041723 DD CB 04 5E 0292*      bit 3,(ix+4)
041727 CA C4 17 04 0293*      jp z,@note_end14
04172B 3E 22       0294*      ld a,34
04172D FD 77 0C    0295*      ld (iy+cmd_volume),a
041730 3E 49       0296*      ld a,0x49
041732 FD 77 05    0297*      ld (iy+cmd_frequency),a
041735 3E 01       0298*      ld a,0x01
041737 FD 77 06    0299*      ld (iy+cmd_frequency+1),a
04173A ED 33 0D    0300*      lea iy,iy+cmd_bytes
04173D             0301*  
04173D 3E 0E       0302*      ld a,14
04173F FD 77 0C    0303*      ld (iy+cmd_volume),a
041742 3E DC       0304*      ld a,0xDC
041744 FD 77 05    0305*      ld (iy+cmd_frequency),a
041747 3E 03       0306*      ld a,0x03
041749 FD 77 06    0307*      ld (iy+cmd_frequency+1),a
04174C ED 33 0D    0308*      lea iy,iy+cmd_bytes
04174F             0309*  
04174F 3E 13       0310*      ld a,19
041751 FD 77 0C    0311*      ld (iy+cmd_volume),a
041754 3E 93       0312*      ld a,0x93
041756 FD 77 05    0313*      ld (iy+cmd_frequency),a
041759 3E 02       0314*      ld a,0x02
04175B FD 77 06    0315*      ld (iy+cmd_frequency+1),a
04175E ED 33 0D    0316*      lea iy,iy+cmd_bytes
041761             0317*  
041761 3E 0B       0318*      ld a,11
041763 FD 77 0C    0319*      ld (iy+cmd_volume),a
041766 3E 26       0320*      ld a,0x26
041768 FD 77 05    0321*      ld (iy+cmd_frequency),a
04176B 3E 05       0322*      ld a,0x05
04176D FD 77 06    0323*      ld (iy+cmd_frequency+1),a
041770 ED 33 0D    0324*      lea iy,iy+cmd_bytes
041773             0325*  
041773 3E 08       0326*      ld a,8
041775 FD 77 0C    0327*      ld (iy+cmd_volume),a
041778 3E B9       0328*      ld a,0xB9
04177A FD 77 05    0329*      ld (iy+cmd_frequency),a
04177D 3E 07       0330*      ld a,0x07
04177F FD 77 06    0331*      ld (iy+cmd_frequency+1),a
041782 ED 33 0D    0332*      lea iy,iy+cmd_bytes
041785             0333*  
041785 3E 06       0334*      ld a,6
041787 FD 77 0C    0335*      ld (iy+cmd_volume),a
04178A 3E 4D       0336*      ld a,0x4D
04178C FD 77 05    0337*      ld (iy+cmd_frequency),a
04178F 3E 0A       0338*      ld a,0x0A
041791 FD 77 06    0339*      ld (iy+cmd_frequency+1),a
041794 ED 33 0D    0340*      lea iy,iy+cmd_bytes
041797             0341*  
041797 3E 05       0342*      ld a,5
041799 FD 77 0C    0343*      ld (iy+cmd_volume),a
04179C 3E E0       0344*      ld a,0xE0
04179E FD 77 05    0345*      ld (iy+cmd_frequency),a
0417A1 3E 0C       0346*      ld a,0x0C
0417A3 FD 77 06    0347*      ld (iy+cmd_frequency+1),a
0417A6 ED 33 0D    0348*      lea iy,iy+cmd_bytes
0417A9             0349*  
0417A9 3E 04       0350*      ld a,4
0417AB FD 77 0C    0351*      ld (iy+cmd_volume),a
0417AE 3E 73       0352*      ld a,0x73
0417B0 FD 77 05    0353*      ld (iy+cmd_frequency),a
0417B3 3E 0F       0354*      ld a,0x0F
0417B5 FD 77 06    0355*      ld (iy+cmd_frequency+1),a
0417B8 ED 33 0D    0356*      lea iy,iy+cmd_bytes
0417BB             0357*  
0417BB 21 B2 0D 04 0358*      ld hl,notes_played
0417BF 35          0359*      dec (hl)
0417C0 CA E9 1A 04 0360*      jp z,organ_notes_bank_2_end
0417C4             0361*  
0417C4             0362*  @note_end14:
0417C4             0363*  
0417C4 DD CB 08 66 0364*      bit 4,(ix+8)
0417C8 CA 65 18 04 0365*      jp z,@note_end15
0417CC 3E 1E       0366*      ld a,30
0417CE FD 77 0C    0367*      ld (iy+cmd_volume),a
0417D1 3E 87       0368*      ld a,0x87
0417D3 FD 77 05    0369*      ld (iy+cmd_frequency),a
0417D6 3E 01       0370*      ld a,0x01
0417D8 FD 77 06    0371*      ld (iy+cmd_frequency+1),a
0417DB ED 33 0D    0372*      lea iy,iy+cmd_bytes
0417DE             0373*  
0417DE 3E 0C       0374*      ld a,12
0417E0 FD 77 0C    0375*      ld (iy+cmd_volume),a
0417E3 3E 97       0376*      ld a,0x97
0417E5 FD 77 05    0377*      ld (iy+cmd_frequency),a
0417E8 3E 04       0378*      ld a,0x04
0417EA FD 77 06    0379*      ld (iy+cmd_frequency+1),a
0417ED ED 33 0D    0380*      lea iy,iy+cmd_bytes
0417F0             0381*  
0417F0 3E 11       0382*      ld a,17
0417F2 FD 77 0C    0383*      ld (iy+cmd_volume),a
0417F5 3E 0F       0384*      ld a,0x0F
0417F7 FD 77 05    0385*      ld (iy+cmd_frequency),a
0417FA 3E 03       0386*      ld a,0x03
0417FC FD 77 06    0387*      ld (iy+cmd_frequency+1),a
0417FF ED 33 0D    0388*      lea iy,iy+cmd_bytes
041802             0389*  
041802 3E 09       0390*      ld a,9
041804 FD 77 0C    0391*      ld (iy+cmd_volume),a
041807 3E 1F       0392*      ld a,0x1F
041809 FD 77 05    0393*      ld (iy+cmd_frequency),a
04180C 3E 06       0394*      ld a,0x06
04180E FD 77 06    0395*      ld (iy+cmd_frequency+1),a
041811 ED 33 0D    0396*      lea iy,iy+cmd_bytes
041814             0397*  
041814 3E 07       0398*      ld a,7
041816 FD 77 0C    0399*      ld (iy+cmd_volume),a
041819 3E 2F       0400*      ld a,0x2F
04181B FD 77 05    0401*      ld (iy+cmd_frequency),a
04181E 3E 09       0402*      ld a,0x09
041820 FD 77 06    0403*      ld (iy+cmd_frequency+1),a
041823 ED 33 0D    0404*      lea iy,iy+cmd_bytes
041826             0405*  
041826 3E 05       0406*      ld a,5
041828 FD 77 0C    0407*      ld (iy+cmd_volume),a
04182B 3E 3F       0408*      ld a,0x3F
04182D FD 77 05    0409*      ld (iy+cmd_frequency),a
041830 3E 0C       0410*      ld a,0x0C
041832 FD 77 06    0411*      ld (iy+cmd_frequency+1),a
041835 ED 33 0D    0412*      lea iy,iy+cmd_bytes
041838             0413*  
041838 3E 04       0414*      ld a,4
04183A FD 77 0C    0415*      ld (iy+cmd_volume),a
04183D 3E 4F       0416*      ld a,0x4F
04183F FD 77 05    0417*      ld (iy+cmd_frequency),a
041842 3E 0F       0418*      ld a,0x0F
041844 FD 77 06    0419*      ld (iy+cmd_frequency+1),a
041847 ED 33 0D    0420*      lea iy,iy+cmd_bytes
04184A             0421*  
04184A 3E 04       0422*      ld a,4
04184C FD 77 0C    0423*      ld (iy+cmd_volume),a
04184F 3E 5F       0424*      ld a,0x5F
041851 FD 77 05    0425*      ld (iy+cmd_frequency),a
041854 3E 12       0426*      ld a,0x12
041856 FD 77 06    0427*      ld (iy+cmd_frequency+1),a
041859 ED 33 0D    0428*      lea iy,iy+cmd_bytes
04185C             0429*  
04185C 21 B2 0D 04 0430*      ld hl,notes_played
041860 35          0431*      dec (hl)
041861 CA E9 1A 04 0432*      jp z,organ_notes_bank_2_end
041865             0433*  
041865             0434*  @note_end15:
041865             0435*  
041865 DD CB 06 6E 0436*      bit 5,(ix+6)
041869 CA 06 19 04 0437*      jp z,@note_end16
04186D 3E 1B       0438*      ld a,27
04186F FD 77 0C    0439*      ld (iy+cmd_volume),a
041872 3E B8       0440*      ld a,0xB8
041874 FD 77 05    0441*      ld (iy+cmd_frequency),a
041877 3E 01       0442*      ld a,0x01
041879 FD 77 06    0443*      ld (iy+cmd_frequency+1),a
04187C ED 33 0D    0444*      lea iy,iy+cmd_bytes
04187F             0445*  
04187F 3E 0B       0446*      ld a,11
041881 FD 77 0C    0447*      ld (iy+cmd_volume),a
041884 3E 28       0448*      ld a,0x28
041886 FD 77 05    0449*      ld (iy+cmd_frequency),a
041889 3E 05       0450*      ld a,0x05
04188B FD 77 06    0451*      ld (iy+cmd_frequency+1),a
04188E ED 33 0D    0452*      lea iy,iy+cmd_bytes
041891             0453*  
041891 3E 0F       0454*      ld a,15
041893 FD 77 0C    0455*      ld (iy+cmd_volume),a
041896 3E 70       0456*      ld a,0x70
041898 FD 77 05    0457*      ld (iy+cmd_frequency),a
04189B 3E 03       0458*      ld a,0x03
04189D FD 77 06    0459*      ld (iy+cmd_frequency+1),a
0418A0 ED 33 0D    0460*      lea iy,iy+cmd_bytes
0418A3             0461*  
0418A3 3E 09       0462*      ld a,9
0418A5 FD 77 0C    0463*      ld (iy+cmd_volume),a
0418A8 3E E0       0464*      ld a,0xE0
0418AA FD 77 05    0465*      ld (iy+cmd_frequency),a
0418AD 3E 06       0466*      ld a,0x06
0418AF FD 77 06    0467*      ld (iy+cmd_frequency+1),a
0418B2 ED 33 0D    0468*      lea iy,iy+cmd_bytes
0418B5             0469*  
0418B5 3E 06       0470*      ld a,6
0418B7 FD 77 0C    0471*      ld (iy+cmd_volume),a
0418BA 3E 50       0472*      ld a,0x50
0418BC FD 77 05    0473*      ld (iy+cmd_frequency),a
0418BF 3E 0A       0474*      ld a,0x0A
0418C1 FD 77 06    0475*      ld (iy+cmd_frequency+1),a
0418C4 ED 33 0D    0476*      lea iy,iy+cmd_bytes
0418C7             0477*  
0418C7 3E 05       0478*      ld a,5
0418C9 FD 77 0C    0479*      ld (iy+cmd_volume),a
0418CC 3E C0       0480*      ld a,0xC0
0418CE FD 77 05    0481*      ld (iy+cmd_frequency),a
0418D1 3E 0D       0482*      ld a,0x0D
0418D3 FD 77 06    0483*      ld (iy+cmd_frequency+1),a
0418D6 ED 33 0D    0484*      lea iy,iy+cmd_bytes
0418D9             0485*  
0418D9 3E 04       0486*      ld a,4
0418DB FD 77 0C    0487*      ld (iy+cmd_volume),a
0418DE 3E 30       0488*      ld a,0x30
0418E0 FD 77 05    0489*      ld (iy+cmd_frequency),a
0418E3 3E 11       0490*      ld a,0x11
0418E5 FD 77 06    0491*      ld (iy+cmd_frequency+1),a
0418E8 ED 33 0D    0492*      lea iy,iy+cmd_bytes
0418EB             0493*  
0418EB 3E 03       0494*      ld a,3
0418ED FD 77 0C    0495*      ld (iy+cmd_volume),a
0418F0 3E A0       0496*      ld a,0xA0
0418F2 FD 77 05    0497*      ld (iy+cmd_frequency),a
0418F5 3E 14       0498*      ld a,0x14
0418F7 FD 77 06    0499*      ld (iy+cmd_frequency+1),a
0418FA ED 33 0D    0500*      lea iy,iy+cmd_bytes
0418FD             0501*  
0418FD 21 B2 0D 04 0502*      ld hl,notes_played
041901 35          0503*      dec (hl)
041902 CA E9 1A 04 0504*      jp z,organ_notes_bank_2_end
041906             0505*  
041906             0506*  @note_end16:
041906             0507*  
041906 DD CB 04 6E 0508*      bit 5,(ix+4)
04190A CA A7 19 04 0509*      jp z,@note_end17
04190E 3E 17       0510*      ld a,23
041910 FD 77 0C    0511*      ld (iy+cmd_volume),a
041913 3E 0B       0512*      ld a,0x0B
041915 FD 77 05    0513*      ld (iy+cmd_frequency),a
041918 3E 02       0514*      ld a,0x02
04191A FD 77 06    0515*      ld (iy+cmd_frequency+1),a
04191D ED 33 0D    0516*      lea iy,iy+cmd_bytes
041920             0517*  
041920 3E 09       0518*      ld a,9
041922 FD 77 0C    0519*      ld (iy+cmd_volume),a
041925 3E 21       0520*      ld a,0x21
041927 FD 77 05    0521*      ld (iy+cmd_frequency),a
04192A 3E 06       0522*      ld a,0x06
04192C FD 77 06    0523*      ld (iy+cmd_frequency+1),a
04192F ED 33 0D    0524*      lea iy,iy+cmd_bytes
041932             0525*  
041932 3E 0D       0526*      ld a,13
041934 FD 77 0C    0527*      ld (iy+cmd_volume),a
041937 3E 16       0528*      ld a,0x16
041939 FD 77 05    0529*      ld (iy+cmd_frequency),a
04193C 3E 04       0530*      ld a,0x04
04193E FD 77 06    0531*      ld (iy+cmd_frequency+1),a
041941 ED 33 0D    0532*      lea iy,iy+cmd_bytes
041944             0533*  
041944 3E 07       0534*      ld a,7
041946 FD 77 0C    0535*      ld (iy+cmd_volume),a
041949 3E 2D       0536*      ld a,0x2D
04194B FD 77 05    0537*      ld (iy+cmd_frequency),a
04194E 3E 08       0538*      ld a,0x08
041950 FD 77 06    0539*      ld (iy+cmd_frequency+1),a
041953 ED 33 0D    0540*      lea iy,iy+cmd_bytes
041956             0541*  
041956 3E 05       0542*      ld a,5
041958 FD 77 0C    0543*      ld (iy+cmd_volume),a
04195B 3E 43       0544*      ld a,0x43
04195D FD 77 05    0545*      ld (iy+cmd_frequency),a
041960 3E 0C       0546*      ld a,0x0C
041962 FD 77 06    0547*      ld (iy+cmd_frequency+1),a
041965 ED 33 0D    0548*      lea iy,iy+cmd_bytes
041968             0549*  
041968 3E 04       0550*      ld a,4
04196A FD 77 0C    0551*      ld (iy+cmd_volume),a
04196D 3E 5A       0552*      ld a,0x5A
04196F FD 77 05    0553*      ld (iy+cmd_frequency),a
041972 3E 10       0554*      ld a,0x10
041974 FD 77 06    0555*      ld (iy+cmd_frequency+1),a
041977 ED 33 0D    0556*      lea iy,iy+cmd_bytes
04197A             0557*  
04197A 3E 03       0558*      ld a,3
04197C FD 77 0C    0559*      ld (iy+cmd_volume),a
04197F 3E 70       0560*      ld a,0x70
041981 FD 77 05    0561*      ld (iy+cmd_frequency),a
041984 3E 14       0562*      ld a,0x14
041986 FD 77 06    0563*      ld (iy+cmd_frequency+1),a
041989 ED 33 0D    0564*      lea iy,iy+cmd_bytes
04198C             0565*  
04198C 3E 03       0566*      ld a,3
04198E FD 77 0C    0567*      ld (iy+cmd_volume),a
041991 3E 87       0568*      ld a,0x87
041993 FD 77 05    0569*      ld (iy+cmd_frequency),a
041996 3E 18       0570*      ld a,0x18
041998 FD 77 06    0571*      ld (iy+cmd_frequency+1),a
04199B ED 33 0D    0572*      lea iy,iy+cmd_bytes
04199E             0573*  
04199E 21 B2 0D 04 0574*      ld hl,notes_played
0419A2 35          0575*      dec (hl)
0419A3 CA E9 1A 04 0576*      jp z,organ_notes_bank_2_end
0419A7             0577*  
0419A7             0578*  @note_end17:
0419A7             0579*  
0419A7 DD CB 06 76 0580*      bit 6,(ix+6)
0419AB CA 48 1A 04 0581*      jp z,@note_end18
0419AF 3E 15       0582*      ld a,21
0419B1 FD 77 0C    0583*      ld (iy+cmd_volume),a
0419B4 3E 4B       0584*      ld a,0x4B
0419B6 FD 77 05    0585*      ld (iy+cmd_frequency),a
0419B9 3E 02       0586*      ld a,0x02
0419BB FD 77 06    0587*      ld (iy+cmd_frequency+1),a
0419BE ED 33 0D    0588*      lea iy,iy+cmd_bytes
0419C1             0589*  
0419C1 3E 09       0590*      ld a,9
0419C3 FD 77 0C    0591*      ld (iy+cmd_volume),a
0419C6 3E E1       0592*      ld a,0xE1
0419C8 FD 77 05    0593*      ld (iy+cmd_frequency),a
0419CB 3E 06       0594*      ld a,0x06
0419CD FD 77 06    0595*      ld (iy+cmd_frequency+1),a
0419D0 ED 33 0D    0596*      lea iy,iy+cmd_bytes
0419D3             0597*  
0419D3 3E 0C       0598*      ld a,12
0419D5 FD 77 0C    0599*      ld (iy+cmd_volume),a
0419D8 3E 96       0600*      ld a,0x96
0419DA FD 77 05    0601*      ld (iy+cmd_frequency),a
0419DD 3E 04       0602*      ld a,0x04
0419DF FD 77 06    0603*      ld (iy+cmd_frequency+1),a
0419E2 ED 33 0D    0604*      lea iy,iy+cmd_bytes
0419E5             0605*  
0419E5 3E 07       0606*      ld a,7
0419E7 FD 77 0C    0607*      ld (iy+cmd_volume),a
0419EA 3E 2D       0608*      ld a,0x2D
0419EC FD 77 05    0609*      ld (iy+cmd_frequency),a
0419EF 3E 09       0610*      ld a,0x09
0419F1 FD 77 06    0611*      ld (iy+cmd_frequency+1),a
0419F4 ED 33 0D    0612*      lea iy,iy+cmd_bytes
0419F7             0613*  
0419F7 3E 05       0614*      ld a,5
0419F9 FD 77 0C    0615*      ld (iy+cmd_volume),a
0419FC 3E C3       0616*      ld a,0xC3
0419FE FD 77 05    0617*      ld (iy+cmd_frequency),a
041A01 3E 0D       0618*      ld a,0x0D
041A03 FD 77 06    0619*      ld (iy+cmd_frequency+1),a
041A06 ED 33 0D    0620*      lea iy,iy+cmd_bytes
041A09             0621*  
041A09 3E 04       0622*      ld a,4
041A0B FD 77 0C    0623*      ld (iy+cmd_volume),a
041A0E 3E 5A       0624*      ld a,0x5A
041A10 FD 77 05    0625*      ld (iy+cmd_frequency),a
041A13 3E 12       0626*      ld a,0x12
041A15 FD 77 06    0627*      ld (iy+cmd_frequency+1),a
041A18 ED 33 0D    0628*      lea iy,iy+cmd_bytes
041A1B             0629*  
041A1B 3E 03       0630*      ld a,3
041A1D FD 77 0C    0631*      ld (iy+cmd_volume),a
041A20 3E F1       0632*      ld a,0xF1
041A22 FD 77 05    0633*      ld (iy+cmd_frequency),a
041A25 3E 16       0634*      ld a,0x16
041A27 FD 77 06    0635*      ld (iy+cmd_frequency+1),a
041A2A ED 33 0D    0636*      lea iy,iy+cmd_bytes
041A2D             0637*  
041A2D 3E 02       0638*      ld a,2
041A2F FD 77 0C    0639*      ld (iy+cmd_volume),a
041A32 3E 87       0640*      ld a,0x87
041A34 FD 77 05    0641*      ld (iy+cmd_frequency),a
041A37 3E 1B       0642*      ld a,0x1B
041A39 FD 77 06    0643*      ld (iy+cmd_frequency+1),a
041A3C ED 33 0D    0644*      lea iy,iy+cmd_bytes
041A3F             0645*  
041A3F 21 B2 0D 04 0646*      ld hl,notes_played
041A43 35          0647*      dec (hl)
041A44 CA E9 1A 04 0648*      jp z,organ_notes_bank_2_end
041A48             0649*  
041A48             0650*  @note_end18:
041A48             0651*  
041A48 DD CB 06 7E 0652*      bit 7,(ix+6)
041A4C CA E9 1A 04 0653*      jp z,@note_end19
041A50 3E 14       0654*      ld a,20
041A52 FD 77 0C    0655*      ld (iy+cmd_volume),a
041A55 3E 6E       0656*      ld a,0x6E
041A57 FD 77 05    0657*      ld (iy+cmd_frequency),a
041A5A 3E 02       0658*      ld a,0x02
041A5C FD 77 06    0659*      ld (iy+cmd_frequency+1),a
041A5F ED 33 0D    0660*      lea iy,iy+cmd_bytes
041A62             0661*  
041A62 3E 08       0662*      ld a,8
041A64 FD 77 0C    0663*      ld (iy+cmd_volume),a
041A67 3E 4A       0664*      ld a,0x4A
041A69 FD 77 05    0665*      ld (iy+cmd_frequency),a
041A6C 3E 07       0666*      ld a,0x07
041A6E FD 77 06    0667*      ld (iy+cmd_frequency+1),a
041A71 ED 33 0D    0668*      lea iy,iy+cmd_bytes
041A74             0669*  
041A74 3E 0B       0670*      ld a,11
041A76 FD 77 0C    0671*      ld (iy+cmd_volume),a
041A79 3E DC       0672*      ld a,0xDC
041A7B FD 77 05    0673*      ld (iy+cmd_frequency),a
041A7E 3E 04       0674*      ld a,0x04
041A80 FD 77 06    0675*      ld (iy+cmd_frequency+1),a
041A83 ED 33 0D    0676*      lea iy,iy+cmd_bytes
041A86             0677*  
041A86 3E 06       0678*      ld a,6
041A88 FD 77 0C    0679*      ld (iy+cmd_volume),a
041A8B 3E B9       0680*      ld a,0xB9
041A8D FD 77 05    0681*      ld (iy+cmd_frequency),a
041A90 3E 09       0682*      ld a,0x09
041A92 FD 77 06    0683*      ld (iy+cmd_frequency+1),a
041A95 ED 33 0D    0684*      lea iy,iy+cmd_bytes
041A98             0685*  
041A98 3E 04       0686*      ld a,4
041A9A FD 77 0C    0687*      ld (iy+cmd_volume),a
041A9D 3E 95       0688*      ld a,0x95
041A9F FD 77 05    0689*      ld (iy+cmd_frequency),a
041AA2 3E 0E       0690*      ld a,0x0E
041AA4 FD 77 06    0691*      ld (iy+cmd_frequency+1),a
041AA7 ED 33 0D    0692*      lea iy,iy+cmd_bytes
041AAA             0693*  
041AAA 3E 03       0694*      ld a,3
041AAC FD 77 0C    0695*      ld (iy+cmd_volume),a
041AAF 3E 72       0696*      ld a,0x72
041AB1 FD 77 05    0697*      ld (iy+cmd_frequency),a
041AB4 3E 13       0698*      ld a,0x13
041AB6 FD 77 06    0699*      ld (iy+cmd_frequency+1),a
041AB9 ED 33 0D    0700*      lea iy,iy+cmd_bytes
041ABC             0701*  
041ABC 3E 03       0702*      ld a,3
041ABE FD 77 0C    0703*      ld (iy+cmd_volume),a
041AC1 3E 4E       0704*      ld a,0x4E
041AC3 FD 77 05    0705*      ld (iy+cmd_frequency),a
041AC6 3E 18       0706*      ld a,0x18
041AC8 FD 77 06    0707*      ld (iy+cmd_frequency+1),a
041ACB ED 33 0D    0708*      lea iy,iy+cmd_bytes
041ACE             0709*  
041ACE 3E 02       0710*      ld a,2
041AD0 FD 77 0C    0711*      ld (iy+cmd_volume),a
041AD3 3E 2B       0712*      ld a,0x2B
041AD5 FD 77 05    0713*      ld (iy+cmd_frequency),a
041AD8 3E 1D       0714*      ld a,0x1D
041ADA FD 77 06    0715*      ld (iy+cmd_frequency+1),a
041ADD ED 33 0D    0716*      lea iy,iy+cmd_bytes
041AE0             0717*  
041AE0 21 B2 0D 04 0718*      ld hl,notes_played
041AE4 35          0719*      dec (hl)
041AE5 CA E9 1A 04 0720*      jp z,organ_notes_bank_2_end
041AE9             0721*  
041AE9             0722*  @note_end19:
041AE9             0723*  
041AE9             0724*  organ_notes_bank_2_end:
041AE9             0224       include "organ/src/asm/organ_notes_bank_3.asm"
041AE9             0001*  organ_notes_bank_3:
041AE9 FD 21 DE 0B 0002*      ld iy,cmd0
       04          
041AEE             0003*  
041AEE DD CB 08 4E 0004*      bit 1,(ix+8)
041AF2 CA 8F 1B 04 0005*      jp z,@note_end20
041AF6 3E 53       0006*      ld a,83
041AF8 FD 77 0C    0007*      ld (iy+cmd_volume),a
041AFB 3E 6D       0008*      ld a,0x6D
041AFD FD 77 05    0009*      ld (iy+cmd_frequency),a
041B00 3E 00       0010*      ld a,0x00
041B02 FD 77 06    0011*      ld (iy+cmd_frequency+1),a
041B05 ED 33 0D    0012*      lea iy,iy+cmd_bytes
041B08             0013*  
041B08 3E 22       0014*      ld a,34
041B0A FD 77 0C    0015*      ld (iy+cmd_volume),a
041B0D 3E 49       0016*      ld a,0x49
041B0F FD 77 05    0017*      ld (iy+cmd_frequency),a
041B12 3E 01       0018*      ld a,0x01
041B14 FD 77 06    0019*      ld (iy+cmd_frequency+1),a
041B17 ED 33 0D    0020*      lea iy,iy+cmd_bytes
041B1A             0021*  
041B1A 3E 30       0022*      ld a,48
041B1C FD 77 0C    0023*      ld (iy+cmd_volume),a
041B1F 3E DB       0024*      ld a,0xDB
041B21 FD 77 05    0025*      ld (iy+cmd_frequency),a
041B24 3E 00       0026*      ld a,0x00
041B26 FD 77 06    0027*      ld (iy+cmd_frequency+1),a
041B29 ED 33 0D    0028*      lea iy,iy+cmd_bytes
041B2C             0029*  
041B2C 3E 1B       0030*      ld a,27
041B2E FD 77 0C    0031*      ld (iy+cmd_volume),a
041B31 3E B7       0032*      ld a,0xB7
041B33 FD 77 05    0033*      ld (iy+cmd_frequency),a
041B36 3E 01       0034*      ld a,0x01
041B38 FD 77 06    0035*      ld (iy+cmd_frequency+1),a
041B3B ED 33 0D    0036*      lea iy,iy+cmd_bytes
041B3E             0037*  
041B3E 3E 13       0038*      ld a,19
041B40 FD 77 0C    0039*      ld (iy+cmd_volume),a
041B43 3E 93       0040*      ld a,0x93
041B45 FD 77 05    0041*      ld (iy+cmd_frequency),a
041B48 3E 02       0042*      ld a,0x02
041B4A FD 77 06    0043*      ld (iy+cmd_frequency+1),a
041B4D ED 33 0D    0044*      lea iy,iy+cmd_bytes
041B50             0045*  
041B50 3E 0F       0046*      ld a,15
041B52 FD 77 0C    0047*      ld (iy+cmd_volume),a
041B55 3E 6F       0048*      ld a,0x6F
041B57 FD 77 05    0049*      ld (iy+cmd_frequency),a
041B5A 3E 03       0050*      ld a,0x03
041B5C FD 77 06    0051*      ld (iy+cmd_frequency+1),a
041B5F ED 33 0D    0052*      lea iy,iy+cmd_bytes
041B62             0053*  
041B62 3E 0D       0054*      ld a,13
041B64 FD 77 0C    0055*      ld (iy+cmd_volume),a
041B67 3E 4B       0056*      ld a,0x4B
041B69 FD 77 05    0057*      ld (iy+cmd_frequency),a
041B6C 3E 04       0058*      ld a,0x04
041B6E FD 77 06    0059*      ld (iy+cmd_frequency+1),a
041B71 ED 33 0D    0060*      lea iy,iy+cmd_bytes
041B74             0061*  
041B74 3E 0B       0062*      ld a,11
041B76 FD 77 0C    0063*      ld (iy+cmd_volume),a
041B79 3E 27       0064*      ld a,0x27
041B7B FD 77 05    0065*      ld (iy+cmd_frequency),a
041B7E 3E 05       0066*      ld a,0x05
041B80 FD 77 06    0067*      ld (iy+cmd_frequency+1),a
041B83 ED 33 0D    0068*      lea iy,iy+cmd_bytes
041B86             0069*  
041B86 21 B2 0D 04 0070*      ld hl,notes_played
041B8A 35          0071*      dec (hl)
041B8B CA 38 21 04 0072*      jp z,organ_notes_bank_3_end
041B8F             0073*  
041B8F             0074*  @note_end20:
041B8F             0075*  
041B8F DD CB 0A 4E 0076*      bit 1,(ix+10)
041B93 CA 30 1C 04 0077*      jp z,@note_end21
041B97 3E 48       0078*      ld a,72
041B99 FD 77 0C    0079*      ld (iy+cmd_volume),a
041B9C 3E 82       0080*      ld a,0x82
041B9E FD 77 05    0081*      ld (iy+cmd_frequency),a
041BA1 3E 00       0082*      ld a,0x00
041BA3 FD 77 06    0083*      ld (iy+cmd_frequency+1),a
041BA6 ED 33 0D    0084*      lea iy,iy+cmd_bytes
041BA9             0085*  
041BA9 3E 1E       0086*      ld a,30
041BAB FD 77 0C    0087*      ld (iy+cmd_volume),a
041BAE 3E 88       0088*      ld a,0x88
041BB0 FD 77 05    0089*      ld (iy+cmd_frequency),a
041BB3 3E 01       0090*      ld a,0x01
041BB5 FD 77 06    0091*      ld (iy+cmd_frequency+1),a
041BB8 ED 33 0D    0092*      lea iy,iy+cmd_bytes
041BBB             0093*  
041BBB 3E 29       0094*      ld a,41
041BBD FD 77 0C    0095*      ld (iy+cmd_volume),a
041BC0 3E 05       0096*      ld a,0x05
041BC2 FD 77 05    0097*      ld (iy+cmd_frequency),a
041BC5 3E 01       0098*      ld a,0x01
041BC7 FD 77 06    0099*      ld (iy+cmd_frequency+1),a
041BCA ED 33 0D    0100*      lea iy,iy+cmd_bytes
041BCD             0101*  
041BCD 3E 17       0102*      ld a,23
041BCF FD 77 0C    0103*      ld (iy+cmd_volume),a
041BD2 3E 0B       0104*      ld a,0x0B
041BD4 FD 77 05    0105*      ld (iy+cmd_frequency),a
041BD7 3E 02       0106*      ld a,0x02
041BD9 FD 77 06    0107*      ld (iy+cmd_frequency+1),a
041BDC ED 33 0D    0108*      lea iy,iy+cmd_bytes
041BDF             0109*  
041BDF 3E 11       0110*      ld a,17
041BE1 FD 77 0C    0111*      ld (iy+cmd_volume),a
041BE4 3E 10       0112*      ld a,0x10
041BE6 FD 77 05    0113*      ld (iy+cmd_frequency),a
041BE9 3E 03       0114*      ld a,0x03
041BEB FD 77 06    0115*      ld (iy+cmd_frequency+1),a
041BEE ED 33 0D    0116*      lea iy,iy+cmd_bytes
041BF1             0117*  
041BF1 3E 0D       0118*      ld a,13
041BF3 FD 77 0C    0119*      ld (iy+cmd_volume),a
041BF6 3E 16       0120*      ld a,0x16
041BF8 FD 77 05    0121*      ld (iy+cmd_frequency),a
041BFB 3E 04       0122*      ld a,0x04
041BFD FD 77 06    0123*      ld (iy+cmd_frequency+1),a
041C00 ED 33 0D    0124*      lea iy,iy+cmd_bytes
041C03             0125*  
041C03 3E 0B       0126*      ld a,11
041C05 FD 77 0C    0127*      ld (iy+cmd_volume),a
041C08 3E 1C       0128*      ld a,0x1C
041C0A FD 77 05    0129*      ld (iy+cmd_frequency),a
041C0D 3E 05       0130*      ld a,0x05
041C0F FD 77 06    0131*      ld (iy+cmd_frequency+1),a
041C12 ED 33 0D    0132*      lea iy,iy+cmd_bytes
041C15             0133*  
041C15 3E 09       0134*      ld a,9
041C17 FD 77 0C    0135*      ld (iy+cmd_volume),a
041C1A 3E 21       0136*      ld a,0x21
041C1C FD 77 05    0137*      ld (iy+cmd_frequency),a
041C1F 3E 06       0138*      ld a,0x06
041C21 FD 77 06    0139*      ld (iy+cmd_frequency+1),a
041C24 ED 33 0D    0140*      lea iy,iy+cmd_bytes
041C27             0141*  
041C27 21 B2 0D 04 0142*      ld hl,notes_played
041C2B 35          0143*      dec (hl)
041C2C CA 38 21 04 0144*      jp z,organ_notes_bank_3_end
041C30             0145*  
041C30             0146*  @note_end21:
041C30             0147*  
041C30 DD CB 06 56 0148*      bit 2,(ix+6)
041C34 CA D1 1C 04 0149*      jp z,@note_end22
041C38 3E 42       0150*      ld a,66
041C3A FD 77 0C    0151*      ld (iy+cmd_volume),a
041C3D 3E 92       0152*      ld a,0x92
041C3F FD 77 05    0153*      ld (iy+cmd_frequency),a
041C42 3E 00       0154*      ld a,0x00
041C44 FD 77 06    0155*      ld (iy+cmd_frequency+1),a
041C47 ED 33 0D    0156*      lea iy,iy+cmd_bytes
041C4A             0157*  
041C4A 3E 1B       0158*      ld a,27
041C4C FD 77 0C    0159*      ld (iy+cmd_volume),a
041C4F 3E B8       0160*      ld a,0xB8
041C51 FD 77 05    0161*      ld (iy+cmd_frequency),a
041C54 3E 01       0162*      ld a,0x01
041C56 FD 77 06    0163*      ld (iy+cmd_frequency+1),a
041C59 ED 33 0D    0164*      lea iy,iy+cmd_bytes
041C5C             0165*  
041C5C 3E 26       0166*      ld a,38
041C5E FD 77 0C    0167*      ld (iy+cmd_volume),a
041C61 3E 25       0168*      ld a,0x25
041C63 FD 77 05    0169*      ld (iy+cmd_frequency),a
041C66 3E 01       0170*      ld a,0x01
041C68 FD 77 06    0171*      ld (iy+cmd_frequency+1),a
041C6B ED 33 0D    0172*      lea iy,iy+cmd_bytes
041C6E             0173*  
041C6E 3E 15       0174*      ld a,21
041C70 FD 77 0C    0175*      ld (iy+cmd_volume),a
041C73 3E 4B       0176*      ld a,0x4B
041C75 FD 77 05    0177*      ld (iy+cmd_frequency),a
041C78 3E 02       0178*      ld a,0x02
041C7A FD 77 06    0179*      ld (iy+cmd_frequency+1),a
041C7D ED 33 0D    0180*      lea iy,iy+cmd_bytes
041C80             0181*  
041C80 3E 0F       0182*      ld a,15
041C82 FD 77 0C    0183*      ld (iy+cmd_volume),a
041C85 3E 70       0184*      ld a,0x70
041C87 FD 77 05    0185*      ld (iy+cmd_frequency),a
041C8A 3E 03       0186*      ld a,0x03
041C8C FD 77 06    0187*      ld (iy+cmd_frequency+1),a
041C8F ED 33 0D    0188*      lea iy,iy+cmd_bytes
041C92             0189*  
041C92 3E 0C       0190*      ld a,12
041C94 FD 77 0C    0191*      ld (iy+cmd_volume),a
041C97 3E 96       0192*      ld a,0x96
041C99 FD 77 05    0193*      ld (iy+cmd_frequency),a
041C9C 3E 04       0194*      ld a,0x04
041C9E FD 77 06    0195*      ld (iy+cmd_frequency+1),a
041CA1 ED 33 0D    0196*      lea iy,iy+cmd_bytes
041CA4             0197*  
041CA4 3E 0A       0198*      ld a,10
041CA6 FD 77 0C    0199*      ld (iy+cmd_volume),a
041CA9 3E BC       0200*      ld a,0xBC
041CAB FD 77 05    0201*      ld (iy+cmd_frequency),a
041CAE 3E 05       0202*      ld a,0x05
041CB0 FD 77 06    0203*      ld (iy+cmd_frequency+1),a
041CB3 ED 33 0D    0204*      lea iy,iy+cmd_bytes
041CB6             0205*  
041CB6 3E 09       0206*      ld a,9
041CB8 FD 77 0C    0207*      ld (iy+cmd_volume),a
041CBB 3E E1       0208*      ld a,0xE1
041CBD FD 77 05    0209*      ld (iy+cmd_frequency),a
041CC0 3E 06       0210*      ld a,0x06
041CC2 FD 77 06    0211*      ld (iy+cmd_frequency+1),a
041CC5 ED 33 0D    0212*      lea iy,iy+cmd_bytes
041CC8             0213*  
041CC8 21 B2 0D 04 0214*      ld hl,notes_played
041CCC 35          0215*      dec (hl)
041CCD CA 38 21 04 0216*      jp z,organ_notes_bank_3_end
041CD1             0217*  
041CD1             0218*  @note_end22:
041CD1             0219*  
041CD1 DD CB 08 5E 0220*      bit 3,(ix+8)
041CD5 CA 72 1D 04 0221*      jp z,@note_end23
041CD9 3E 3F       0222*      ld a,63
041CDB FD 77 0C    0223*      ld (iy+cmd_volume),a
041CDE 3E 9B       0224*      ld a,0x9B
041CE0 FD 77 05    0225*      ld (iy+cmd_frequency),a
041CE3 3E 00       0226*      ld a,0x00
041CE5 FD 77 06    0227*      ld (iy+cmd_frequency+1),a
041CE8 ED 33 0D    0228*      lea iy,iy+cmd_bytes
041CEB             0229*  
041CEB 3E 1A       0230*      ld a,26
041CED FD 77 0C    0231*      ld (iy+cmd_volume),a
041CF0 3E D2       0232*      ld a,0xD2
041CF2 FD 77 05    0233*      ld (iy+cmd_frequency),a
041CF5 3E 01       0234*      ld a,0x01
041CF7 FD 77 06    0235*      ld (iy+cmd_frequency+1),a
041CFA ED 33 0D    0236*      lea iy,iy+cmd_bytes
041CFD             0237*  
041CFD 3E 24       0238*      ld a,36
041CFF FD 77 0C    0239*      ld (iy+cmd_volume),a
041D02 3E 37       0240*      ld a,0x37
041D04 FD 77 05    0241*      ld (iy+cmd_frequency),a
041D07 3E 01       0242*      ld a,0x01
041D09 FD 77 06    0243*      ld (iy+cmd_frequency+1),a
041D0C ED 33 0D    0244*      lea iy,iy+cmd_bytes
041D0F             0245*  
041D0F 3E 14       0246*      ld a,20
041D11 FD 77 0C    0247*      ld (iy+cmd_volume),a
041D14 3E 6E       0248*      ld a,0x6E
041D16 FD 77 05    0249*      ld (iy+cmd_frequency),a
041D19 3E 02       0250*      ld a,0x02
041D1B FD 77 06    0251*      ld (iy+cmd_frequency+1),a
041D1E ED 33 0D    0252*      lea iy,iy+cmd_bytes
041D21             0253*  
041D21 3E 0F       0254*      ld a,15
041D23 FD 77 0C    0255*      ld (iy+cmd_volume),a
041D26 3E A5       0256*      ld a,0xA5
041D28 FD 77 05    0257*      ld (iy+cmd_frequency),a
041D2B 3E 03       0258*      ld a,0x03
041D2D FD 77 06    0259*      ld (iy+cmd_frequency+1),a
041D30 ED 33 0D    0260*      lea iy,iy+cmd_bytes
041D33             0261*  
041D33 3E 0B       0262*      ld a,11
041D35 FD 77 0C    0263*      ld (iy+cmd_volume),a
041D38 3E DC       0264*      ld a,0xDC
041D3A FD 77 05    0265*      ld (iy+cmd_frequency),a
041D3D 3E 04       0266*      ld a,0x04
041D3F FD 77 06    0267*      ld (iy+cmd_frequency+1),a
041D42 ED 33 0D    0268*      lea iy,iy+cmd_bytes
041D45             0269*  
041D45 3E 0A       0270*      ld a,10
041D47 FD 77 0C    0271*      ld (iy+cmd_volume),a
041D4A 3E 13       0272*      ld a,0x13
041D4C FD 77 05    0273*      ld (iy+cmd_frequency),a
041D4F 3E 06       0274*      ld a,0x06
041D51 FD 77 06    0275*      ld (iy+cmd_frequency+1),a
041D54 ED 33 0D    0276*      lea iy,iy+cmd_bytes
041D57             0277*  
041D57 3E 08       0278*      ld a,8
041D59 FD 77 0C    0279*      ld (iy+cmd_volume),a
041D5C 3E 4A       0280*      ld a,0x4A
041D5E FD 77 05    0281*      ld (iy+cmd_frequency),a
041D61 3E 07       0282*      ld a,0x07
041D63 FD 77 06    0283*      ld (iy+cmd_frequency+1),a
041D66 ED 33 0D    0284*      lea iy,iy+cmd_bytes
041D69             0285*  
041D69 21 B2 0D 04 0286*      ld hl,notes_played
041D6D 35          0287*      dec (hl)
041D6E CA 38 21 04 0288*      jp z,organ_notes_bank_3_end
041D72             0289*  
041D72             0290*  @note_end23:
041D72             0291*  
041D72 DD CB 0A 5E 0292*      bit 3,(ix+10)
041D76 CA 13 1E 04 0293*      jp z,@note_end24
041D7A 3E 3C       0294*      ld a,60
041D7C FD 77 0C    0295*      ld (iy+cmd_volume),a
041D7F 3E A4       0296*      ld a,0xA4
041D81 FD 77 05    0297*      ld (iy+cmd_frequency),a
041D84 3E 00       0298*      ld a,0x00
041D86 FD 77 06    0299*      ld (iy+cmd_frequency+1),a
041D89 ED 33 0D    0300*      lea iy,iy+cmd_bytes
041D8C             0301*  
041D8C 3E 19       0302*      ld a,25
041D8E FD 77 0C    0303*      ld (iy+cmd_volume),a
041D91 3E EE       0304*      ld a,0xEE
041D93 FD 77 05    0305*      ld (iy+cmd_frequency),a
041D96 3E 01       0306*      ld a,0x01
041D98 FD 77 06    0307*      ld (iy+cmd_frequency+1),a
041D9B ED 33 0D    0308*      lea iy,iy+cmd_bytes
041D9E             0309*  
041D9E 3E 22       0310*      ld a,34
041DA0 FD 77 0C    0311*      ld (iy+cmd_volume),a
041DA3 3E 49       0312*      ld a,0x49
041DA5 FD 77 05    0313*      ld (iy+cmd_frequency),a
041DA8 3E 01       0314*      ld a,0x01
041DAA FD 77 06    0315*      ld (iy+cmd_frequency+1),a
041DAD ED 33 0D    0316*      lea iy,iy+cmd_bytes
041DB0             0317*  
041DB0 3E 13       0318*      ld a,19
041DB2 FD 77 0C    0319*      ld (iy+cmd_volume),a
041DB5 3E 93       0320*      ld a,0x93
041DB7 FD 77 05    0321*      ld (iy+cmd_frequency),a
041DBA 3E 02       0322*      ld a,0x02
041DBC FD 77 06    0323*      ld (iy+cmd_frequency+1),a
041DBF ED 33 0D    0324*      lea iy,iy+cmd_bytes
041DC2             0325*  
041DC2 3E 0E       0326*      ld a,14
041DC4 FD 77 0C    0327*      ld (iy+cmd_volume),a
041DC7 3E DC       0328*      ld a,0xDC
041DC9 FD 77 05    0329*      ld (iy+cmd_frequency),a
041DCC 3E 03       0330*      ld a,0x03
041DCE FD 77 06    0331*      ld (iy+cmd_frequency+1),a
041DD1 ED 33 0D    0332*      lea iy,iy+cmd_bytes
041DD4             0333*  
041DD4 3E 0B       0334*      ld a,11
041DD6 FD 77 0C    0335*      ld (iy+cmd_volume),a
041DD9 3E 26       0336*      ld a,0x26
041DDB FD 77 05    0337*      ld (iy+cmd_frequency),a
041DDE 3E 05       0338*      ld a,0x05
041DE0 FD 77 06    0339*      ld (iy+cmd_frequency+1),a
041DE3 ED 33 0D    0340*      lea iy,iy+cmd_bytes
041DE6             0341*  
041DE6 3E 09       0342*      ld a,9
041DE8 FD 77 0C    0343*      ld (iy+cmd_volume),a
041DEB 3E 70       0344*      ld a,0x70
041DED FD 77 05    0345*      ld (iy+cmd_frequency),a
041DF0 3E 06       0346*      ld a,0x06
041DF2 FD 77 06    0347*      ld (iy+cmd_frequency+1),a
041DF5 ED 33 0D    0348*      lea iy,iy+cmd_bytes
041DF8             0349*  
041DF8 3E 08       0350*      ld a,8
041DFA FD 77 0C    0351*      ld (iy+cmd_volume),a
041DFD 3E B9       0352*      ld a,0xB9
041DFF FD 77 05    0353*      ld (iy+cmd_frequency),a
041E02 3E 07       0354*      ld a,0x07
041E04 FD 77 06    0355*      ld (iy+cmd_frequency+1),a
041E07 ED 33 0D    0356*      lea iy,iy+cmd_bytes
041E0A             0357*  
041E0A 21 B2 0D 04 0358*      ld hl,notes_played
041E0E 35          0359*      dec (hl)
041E0F CA 38 21 04 0360*      jp z,organ_notes_bank_3_end
041E13             0361*  
041E13             0362*  @note_end24:
041E13             0363*  
041E13 DD CB 0A 66 0364*      bit 4,(ix+10)
041E17 CA B4 1E 04 0365*      jp z,@note_end25
041E1B 3E 34       0366*      ld a,52
041E1D FD 77 0C    0367*      ld (iy+cmd_volume),a
041E20 3E C3       0368*      ld a,0xC3
041E22 FD 77 05    0369*      ld (iy+cmd_frequency),a
041E25 3E 00       0370*      ld a,0x00
041E27 FD 77 06    0371*      ld (iy+cmd_frequency+1),a
041E2A ED 33 0D    0372*      lea iy,iy+cmd_bytes
041E2D             0373*  
041E2D 3E 15       0374*      ld a,21
041E2F FD 77 0C    0375*      ld (iy+cmd_volume),a
041E32 3E 4B       0376*      ld a,0x4B
041E34 FD 77 05    0377*      ld (iy+cmd_frequency),a
041E37 3E 02       0378*      ld a,0x02
041E39 FD 77 06    0379*      ld (iy+cmd_frequency+1),a
041E3C ED 33 0D    0380*      lea iy,iy+cmd_bytes
041E3F             0381*  
041E3F 3E 1E       0382*      ld a,30
041E41 FD 77 0C    0383*      ld (iy+cmd_volume),a
041E44 3E 87       0384*      ld a,0x87
041E46 FD 77 05    0385*      ld (iy+cmd_frequency),a
041E49 3E 01       0386*      ld a,0x01
041E4B FD 77 06    0387*      ld (iy+cmd_frequency+1),a
041E4E ED 33 0D    0388*      lea iy,iy+cmd_bytes
041E51             0389*  
041E51 3E 11       0390*      ld a,17
041E53 FD 77 0C    0391*      ld (iy+cmd_volume),a
041E56 3E 0F       0392*      ld a,0x0F
041E58 FD 77 05    0393*      ld (iy+cmd_frequency),a
041E5B 3E 03       0394*      ld a,0x03
041E5D FD 77 06    0395*      ld (iy+cmd_frequency+1),a
041E60 ED 33 0D    0396*      lea iy,iy+cmd_bytes
041E63             0397*  
041E63 3E 0C       0398*      ld a,12
041E65 FD 77 0C    0399*      ld (iy+cmd_volume),a
041E68 3E 97       0400*      ld a,0x97
041E6A FD 77 05    0401*      ld (iy+cmd_frequency),a
041E6D 3E 04       0402*      ld a,0x04
041E6F FD 77 06    0403*      ld (iy+cmd_frequency+1),a
041E72 ED 33 0D    0404*      lea iy,iy+cmd_bytes
041E75             0405*  
041E75 3E 09       0406*      ld a,9
041E77 FD 77 0C    0407*      ld (iy+cmd_volume),a
041E7A 3E 1F       0408*      ld a,0x1F
041E7C FD 77 05    0409*      ld (iy+cmd_frequency),a
041E7F 3E 06       0410*      ld a,0x06
041E81 FD 77 06    0411*      ld (iy+cmd_frequency+1),a
041E84 ED 33 0D    0412*      lea iy,iy+cmd_bytes
041E87             0413*  
041E87 3E 08       0414*      ld a,8
041E89 FD 77 0C    0415*      ld (iy+cmd_volume),a
041E8C 3E A7       0416*      ld a,0xA7
041E8E FD 77 05    0417*      ld (iy+cmd_frequency),a
041E91 3E 07       0418*      ld a,0x07
041E93 FD 77 06    0419*      ld (iy+cmd_frequency+1),a
041E96 ED 33 0D    0420*      lea iy,iy+cmd_bytes
041E99             0421*  
041E99 3E 07       0422*      ld a,7
041E9B FD 77 0C    0423*      ld (iy+cmd_volume),a
041E9E 3E 2F       0424*      ld a,0x2F
041EA0 FD 77 05    0425*      ld (iy+cmd_frequency),a
041EA3 3E 09       0426*      ld a,0x09
041EA5 FD 77 06    0427*      ld (iy+cmd_frequency+1),a
041EA8 ED 33 0D    0428*      lea iy,iy+cmd_bytes
041EAB             0429*  
041EAB 21 B2 0D 04 0430*      ld hl,notes_played
041EAF 35          0431*      dec (hl)
041EB0 CA 38 21 04 0432*      jp z,organ_notes_bank_3_end
041EB4             0433*  
041EB4             0434*  @note_end25:
041EB4             0435*  
041EB4 DD CB 08 6E 0436*      bit 5,(ix+8)
041EB8 CA 55 1F 04 0437*      jp z,@note_end26
041EBC 3E 2F       0438*      ld a,47
041EBE FD 77 0C    0439*      ld (iy+cmd_volume),a
041EC1 3E DC       0440*      ld a,0xDC
041EC3 FD 77 05    0441*      ld (iy+cmd_frequency),a
041EC6 3E 00       0442*      ld a,0x00
041EC8 FD 77 06    0443*      ld (iy+cmd_frequency+1),a
041ECB ED 33 0D    0444*      lea iy,iy+cmd_bytes
041ECE             0445*  
041ECE 3E 13       0446*      ld a,19
041ED0 FD 77 0C    0447*      ld (iy+cmd_volume),a
041ED3 3E 94       0448*      ld a,0x94
041ED5 FD 77 05    0449*      ld (iy+cmd_frequency),a
041ED8 3E 02       0450*      ld a,0x02
041EDA FD 77 06    0451*      ld (iy+cmd_frequency+1),a
041EDD ED 33 0D    0452*      lea iy,iy+cmd_bytes
041EE0             0453*  
041EE0 3E 1B       0454*      ld a,27
041EE2 FD 77 0C    0455*      ld (iy+cmd_volume),a
041EE5 3E B8       0456*      ld a,0xB8
041EE7 FD 77 05    0457*      ld (iy+cmd_frequency),a
041EEA 3E 01       0458*      ld a,0x01
041EEC FD 77 06    0459*      ld (iy+cmd_frequency+1),a
041EEF ED 33 0D    0460*      lea iy,iy+cmd_bytes
041EF2             0461*  
041EF2 3E 0F       0462*      ld a,15
041EF4 FD 77 0C    0463*      ld (iy+cmd_volume),a
041EF7 3E 70       0464*      ld a,0x70
041EF9 FD 77 05    0465*      ld (iy+cmd_frequency),a
041EFC 3E 03       0466*      ld a,0x03
041EFE FD 77 06    0467*      ld (iy+cmd_frequency+1),a
041F01 ED 33 0D    0468*      lea iy,iy+cmd_bytes
041F04             0469*  
041F04 3E 0B       0470*      ld a,11
041F06 FD 77 0C    0471*      ld (iy+cmd_volume),a
041F09 3E 28       0472*      ld a,0x28
041F0B FD 77 05    0473*      ld (iy+cmd_frequency),a
041F0E 3E 05       0474*      ld a,0x05
041F10 FD 77 06    0475*      ld (iy+cmd_frequency+1),a
041F13 ED 33 0D    0476*      lea iy,iy+cmd_bytes
041F16             0477*  
041F16 3E 09       0478*      ld a,9
041F18 FD 77 0C    0479*      ld (iy+cmd_volume),a
041F1B 3E E0       0480*      ld a,0xE0
041F1D FD 77 05    0481*      ld (iy+cmd_frequency),a
041F20 3E 06       0482*      ld a,0x06
041F22 FD 77 06    0483*      ld (iy+cmd_frequency+1),a
041F25 ED 33 0D    0484*      lea iy,iy+cmd_bytes
041F28             0485*  
041F28 3E 07       0486*      ld a,7
041F2A FD 77 0C    0487*      ld (iy+cmd_volume),a
041F2D 3E 98       0488*      ld a,0x98
041F2F FD 77 05    0489*      ld (iy+cmd_frequency),a
041F32 3E 08       0490*      ld a,0x08
041F34 FD 77 06    0491*      ld (iy+cmd_frequency+1),a
041F37 ED 33 0D    0492*      lea iy,iy+cmd_bytes
041F3A             0493*  
041F3A 3E 06       0494*      ld a,6
041F3C FD 77 0C    0495*      ld (iy+cmd_volume),a
041F3F 3E 50       0496*      ld a,0x50
041F41 FD 77 05    0497*      ld (iy+cmd_frequency),a
041F44 3E 0A       0498*      ld a,0x0A
041F46 FD 77 06    0499*      ld (iy+cmd_frequency+1),a
041F49 ED 33 0D    0500*      lea iy,iy+cmd_bytes
041F4C             0501*  
041F4C 21 B2 0D 04 0502*      ld hl,notes_played
041F50 35          0503*      dec (hl)
041F51 CA 38 21 04 0504*      jp z,organ_notes_bank_3_end
041F55             0505*  
041F55             0506*  @note_end26:
041F55             0507*  
041F55 DD CB 08 76 0508*      bit 6,(ix+8)
041F59 CA F6 1F 04 0509*      jp z,@note_end27
041F5D 3E 29       0510*      ld a,41
041F5F FD 77 0C    0511*      ld (iy+cmd_volume),a
041F62 3E 05       0512*      ld a,0x05
041F64 FD 77 05    0513*      ld (iy+cmd_frequency),a
041F67 3E 01       0514*      ld a,0x01
041F69 FD 77 06    0515*      ld (iy+cmd_frequency+1),a
041F6C ED 33 0D    0516*      lea iy,iy+cmd_bytes
041F6F             0517*  
041F6F 3E 11       0518*      ld a,17
041F71 FD 77 0C    0519*      ld (iy+cmd_volume),a
041F74 3E 10       0520*      ld a,0x10
041F76 FD 77 05    0521*      ld (iy+cmd_frequency),a
041F79 3E 03       0522*      ld a,0x03
041F7B FD 77 06    0523*      ld (iy+cmd_frequency+1),a
041F7E ED 33 0D    0524*      lea iy,iy+cmd_bytes
041F81             0525*  
041F81 3E 17       0526*      ld a,23
041F83 FD 77 0C    0527*      ld (iy+cmd_volume),a
041F86 3E 0B       0528*      ld a,0x0B
041F88 FD 77 05    0529*      ld (iy+cmd_frequency),a
041F8B 3E 02       0530*      ld a,0x02
041F8D FD 77 06    0531*      ld (iy+cmd_frequency+1),a
041F90 ED 33 0D    0532*      lea iy,iy+cmd_bytes
041F93             0533*  
041F93 3E 0D       0534*      ld a,13
041F95 FD 77 0C    0535*      ld (iy+cmd_volume),a
041F98 3E 16       0536*      ld a,0x16
041F9A FD 77 05    0537*      ld (iy+cmd_frequency),a
041F9D 3E 04       0538*      ld a,0x04
041F9F FD 77 06    0539*      ld (iy+cmd_frequency+1),a
041FA2 ED 33 0D    0540*      lea iy,iy+cmd_bytes
041FA5             0541*  
041FA5 3E 09       0542*      ld a,9
041FA7 FD 77 0C    0543*      ld (iy+cmd_volume),a
041FAA 3E 21       0544*      ld a,0x21
041FAC FD 77 05    0545*      ld (iy+cmd_frequency),a
041FAF 3E 06       0546*      ld a,0x06
041FB1 FD 77 06    0547*      ld (iy+cmd_frequency+1),a
041FB4 ED 33 0D    0548*      lea iy,iy+cmd_bytes
041FB7             0549*  
041FB7 3E 07       0550*      ld a,7
041FB9 FD 77 0C    0551*      ld (iy+cmd_volume),a
041FBC 3E 2D       0552*      ld a,0x2D
041FBE FD 77 05    0553*      ld (iy+cmd_frequency),a
041FC1 3E 08       0554*      ld a,0x08
041FC3 FD 77 06    0555*      ld (iy+cmd_frequency+1),a
041FC6 ED 33 0D    0556*      lea iy,iy+cmd_bytes
041FC9             0557*  
041FC9 3E 06       0558*      ld a,6
041FCB FD 77 0C    0559*      ld (iy+cmd_volume),a
041FCE 3E 38       0560*      ld a,0x38
041FD0 FD 77 05    0561*      ld (iy+cmd_frequency),a
041FD3 3E 0A       0562*      ld a,0x0A
041FD5 FD 77 06    0563*      ld (iy+cmd_frequency+1),a
041FD8 ED 33 0D    0564*      lea iy,iy+cmd_bytes
041FDB             0565*  
041FDB 3E 05       0566*      ld a,5
041FDD FD 77 0C    0567*      ld (iy+cmd_volume),a
041FE0 3E 43       0568*      ld a,0x43
041FE2 FD 77 05    0569*      ld (iy+cmd_frequency),a
041FE5 3E 0C       0570*      ld a,0x0C
041FE7 FD 77 06    0571*      ld (iy+cmd_frequency+1),a
041FEA ED 33 0D    0572*      lea iy,iy+cmd_bytes
041FED             0573*  
041FED 21 B2 0D 04 0574*      ld hl,notes_played
041FF1 35          0575*      dec (hl)
041FF2 CA 38 21 04 0576*      jp z,organ_notes_bank_3_end
041FF6             0577*  
041FF6             0578*  @note_end27:
041FF6             0579*  
041FF6 DD CB 0A 76 0580*      bit 6,(ix+10)
041FFA CA 97 20 04 0581*      jp z,@note_end28
041FFE 3E 26       0582*      ld a,38
042000 FD 77 0C    0583*      ld (iy+cmd_volume),a
042003 3E 25       0584*      ld a,0x25
042005 FD 77 05    0585*      ld (iy+cmd_frequency),a
042008 3E 01       0586*      ld a,0x01
04200A FD 77 06    0587*      ld (iy+cmd_frequency+1),a
04200D ED 33 0D    0588*      lea iy,iy+cmd_bytes
042010             0589*  
042010 3E 0F       0590*      ld a,15
042012 FD 77 0C    0591*      ld (iy+cmd_volume),a
042015 3E 70       0592*      ld a,0x70
042017 FD 77 05    0593*      ld (iy+cmd_frequency),a
04201A 3E 03       0594*      ld a,0x03
04201C FD 77 06    0595*      ld (iy+cmd_frequency+1),a
04201F ED 33 0D    0596*      lea iy,iy+cmd_bytes
042022             0597*  
042022 3E 15       0598*      ld a,21
042024 FD 77 0C    0599*      ld (iy+cmd_volume),a
042027 3E 4B       0600*      ld a,0x4B
042029 FD 77 05    0601*      ld (iy+cmd_frequency),a
04202C 3E 02       0602*      ld a,0x02
04202E FD 77 06    0603*      ld (iy+cmd_frequency+1),a
042031 ED 33 0D    0604*      lea iy,iy+cmd_bytes
042034             0605*  
042034 3E 0C       0606*      ld a,12
042036 FD 77 0C    0607*      ld (iy+cmd_volume),a
042039 3E 96       0608*      ld a,0x96
04203B FD 77 05    0609*      ld (iy+cmd_frequency),a
04203E 3E 04       0610*      ld a,0x04
042040 FD 77 06    0611*      ld (iy+cmd_frequency+1),a
042043 ED 33 0D    0612*      lea iy,iy+cmd_bytes
042046             0613*  
042046 3E 09       0614*      ld a,9
042048 FD 77 0C    0615*      ld (iy+cmd_volume),a
04204B 3E E1       0616*      ld a,0xE1
04204D FD 77 05    0617*      ld (iy+cmd_frequency),a
042050 3E 06       0618*      ld a,0x06
042052 FD 77 06    0619*      ld (iy+cmd_frequency+1),a
042055 ED 33 0D    0620*      lea iy,iy+cmd_bytes
042058             0621*  
042058 3E 07       0622*      ld a,7
04205A FD 77 0C    0623*      ld (iy+cmd_volume),a
04205D 3E 2D       0624*      ld a,0x2D
04205F FD 77 05    0625*      ld (iy+cmd_frequency),a
042062 3E 09       0626*      ld a,0x09
042064 FD 77 06    0627*      ld (iy+cmd_frequency+1),a
042067 ED 33 0D    0628*      lea iy,iy+cmd_bytes
04206A             0629*  
04206A 3E 06       0630*      ld a,6
04206C FD 77 0C    0631*      ld (iy+cmd_volume),a
04206F 3E 78       0632*      ld a,0x78
042071 FD 77 05    0633*      ld (iy+cmd_frequency),a
042074 3E 0B       0634*      ld a,0x0B
042076 FD 77 06    0635*      ld (iy+cmd_frequency+1),a
042079 ED 33 0D    0636*      lea iy,iy+cmd_bytes
04207C             0637*  
04207C 3E 05       0638*      ld a,5
04207E FD 77 0C    0639*      ld (iy+cmd_volume),a
042081 3E C3       0640*      ld a,0xC3
042083 FD 77 05    0641*      ld (iy+cmd_frequency),a
042086 3E 0D       0642*      ld a,0x0D
042088 FD 77 06    0643*      ld (iy+cmd_frequency+1),a
04208B ED 33 0D    0644*      lea iy,iy+cmd_bytes
04208E             0645*  
04208E 21 B2 0D 04 0646*      ld hl,notes_played
042092 35          0647*      dec (hl)
042093 CA 38 21 04 0648*      jp z,organ_notes_bank_3_end
042097             0649*  
042097             0650*  @note_end28:
042097             0651*  
042097 DD CB 0A 7E 0652*      bit 7,(ix+10)
04209B CA 38 21 04 0653*      jp z,@note_end29
04209F 3E 24       0654*      ld a,36
0420A1 FD 77 0C    0655*      ld (iy+cmd_volume),a
0420A4 3E 37       0656*      ld a,0x37
0420A6 FD 77 05    0657*      ld (iy+cmd_frequency),a
0420A9 3E 01       0658*      ld a,0x01
0420AB FD 77 06    0659*      ld (iy+cmd_frequency+1),a
0420AE ED 33 0D    0660*      lea iy,iy+cmd_bytes
0420B1             0661*  
0420B1 3E 0F       0662*      ld a,15
0420B3 FD 77 0C    0663*      ld (iy+cmd_volume),a
0420B6 3E A5       0664*      ld a,0xA5
0420B8 FD 77 05    0665*      ld (iy+cmd_frequency),a
0420BB 3E 03       0666*      ld a,0x03
0420BD FD 77 06    0667*      ld (iy+cmd_frequency+1),a
0420C0 ED 33 0D    0668*      lea iy,iy+cmd_bytes
0420C3             0669*  
0420C3 3E 14       0670*      ld a,20
0420C5 FD 77 0C    0671*      ld (iy+cmd_volume),a
0420C8 3E 6E       0672*      ld a,0x6E
0420CA FD 77 05    0673*      ld (iy+cmd_frequency),a
0420CD 3E 02       0674*      ld a,0x02
0420CF FD 77 06    0675*      ld (iy+cmd_frequency+1),a
0420D2 ED 33 0D    0676*      lea iy,iy+cmd_bytes
0420D5             0677*  
0420D5 3E 0B       0678*      ld a,11
0420D7 FD 77 0C    0679*      ld (iy+cmd_volume),a
0420DA 3E DC       0680*      ld a,0xDC
0420DC FD 77 05    0681*      ld (iy+cmd_frequency),a
0420DF 3E 04       0682*      ld a,0x04
0420E1 FD 77 06    0683*      ld (iy+cmd_frequency+1),a
0420E4 ED 33 0D    0684*      lea iy,iy+cmd_bytes
0420E7             0685*  
0420E7 3E 08       0686*      ld a,8
0420E9 FD 77 0C    0687*      ld (iy+cmd_volume),a
0420EC 3E 4A       0688*      ld a,0x4A
0420EE FD 77 05    0689*      ld (iy+cmd_frequency),a
0420F1 3E 07       0690*      ld a,0x07
0420F3 FD 77 06    0691*      ld (iy+cmd_frequency+1),a
0420F6 ED 33 0D    0692*      lea iy,iy+cmd_bytes
0420F9             0693*  
0420F9 3E 06       0694*      ld a,6
0420FB FD 77 0C    0695*      ld (iy+cmd_volume),a
0420FE 3E B9       0696*      ld a,0xB9
042100 FD 77 05    0697*      ld (iy+cmd_frequency),a
042103 3E 09       0698*      ld a,0x09
042105 FD 77 06    0699*      ld (iy+cmd_frequency+1),a
042108 ED 33 0D    0700*      lea iy,iy+cmd_bytes
04210B             0701*  
04210B 3E 05       0702*      ld a,5
04210D FD 77 0C    0703*      ld (iy+cmd_volume),a
042110 3E 27       0704*      ld a,0x27
042112 FD 77 05    0705*      ld (iy+cmd_frequency),a
042115 3E 0C       0706*      ld a,0x0C
042117 FD 77 06    0707*      ld (iy+cmd_frequency+1),a
04211A ED 33 0D    0708*      lea iy,iy+cmd_bytes
04211D             0709*  
04211D 3E 04       0710*      ld a,4
04211F FD 77 0C    0711*      ld (iy+cmd_volume),a
042122 3E 95       0712*      ld a,0x95
042124 FD 77 05    0713*      ld (iy+cmd_frequency),a
042127 3E 0E       0714*      ld a,0x0E
042129 FD 77 06    0715*      ld (iy+cmd_frequency+1),a
04212C ED 33 0D    0716*      lea iy,iy+cmd_bytes
04212F             0717*  
04212F 21 B2 0D 04 0718*      ld hl,notes_played
042133 35          0719*      dec (hl)
042134 CA 38 21 04 0720*      jp z,organ_notes_bank_3_end
042138             0721*  
042138             0722*  @note_end29:
042138             0723*  
042138             0724*  organ_notes_bank_3_end:
042138             0225       include "organ/src/asm/organ_notes_bank_4.asm"
042138             0001*  organ_notes_bank_4:
042138 FD 21 DE 0B 0002*      ld iy,cmd0
       04          
04213D             0003*  
04213D DD CB 0C 4E 0004*      bit 1,(ix+12)
042141 CA DE 21 04 0005*      jp z,@note_end30
042145 3E 7F       0006*      ld a,127
042147 FD 77 0C    0007*      ld (iy+cmd_volume),a
04214A 3E 36       0008*      ld a,0x36
04214C FD 77 05    0009*      ld (iy+cmd_frequency),a
04214F 3E 00       0010*      ld a,0x00
042151 FD 77 06    0011*      ld (iy+cmd_frequency+1),a
042154 ED 33 0D    0012*      lea iy,iy+cmd_bytes
042157             0013*  
042157 3E 3C       0014*      ld a,60
042159 FD 77 0C    0015*      ld (iy+cmd_volume),a
04215C 3E A4       0016*      ld a,0xA4
04215E FD 77 05    0017*      ld (iy+cmd_frequency),a
042161 3E 00       0018*      ld a,0x00
042163 FD 77 06    0019*      ld (iy+cmd_frequency+1),a
042166 ED 33 0D    0020*      lea iy,iy+cmd_bytes
042169             0021*  
042169 3E 53       0022*      ld a,83
04216B FD 77 0C    0023*      ld (iy+cmd_volume),a
04216E 3E 6D       0024*      ld a,0x6D
042170 FD 77 05    0025*      ld (iy+cmd_frequency),a
042173 3E 00       0026*      ld a,0x00
042175 FD 77 06    0027*      ld (iy+cmd_frequency+1),a
042178 ED 33 0D    0028*      lea iy,iy+cmd_bytes
04217B             0029*  
04217B 3E 30       0030*      ld a,48
04217D FD 77 0C    0031*      ld (iy+cmd_volume),a
042180 3E DB       0032*      ld a,0xDB
042182 FD 77 05    0033*      ld (iy+cmd_frequency),a
042185 3E 00       0034*      ld a,0x00
042187 FD 77 06    0035*      ld (iy+cmd_frequency+1),a
04218A ED 33 0D    0036*      lea iy,iy+cmd_bytes
04218D             0037*  
04218D 3E 22       0038*      ld a,34
04218F FD 77 0C    0039*      ld (iy+cmd_volume),a
042192 3E 49       0040*      ld a,0x49
042194 FD 77 05    0041*      ld (iy+cmd_frequency),a
042197 3E 01       0042*      ld a,0x01
042199 FD 77 06    0043*      ld (iy+cmd_frequency+1),a
04219C ED 33 0D    0044*      lea iy,iy+cmd_bytes
04219F             0045*  
04219F 3E 1B       0046*      ld a,27
0421A1 FD 77 0C    0047*      ld (iy+cmd_volume),a
0421A4 3E B7       0048*      ld a,0xB7
0421A6 FD 77 05    0049*      ld (iy+cmd_frequency),a
0421A9 3E 01       0050*      ld a,0x01
0421AB FD 77 06    0051*      ld (iy+cmd_frequency+1),a
0421AE ED 33 0D    0052*      lea iy,iy+cmd_bytes
0421B1             0053*  
0421B1 3E 17       0054*      ld a,23
0421B3 FD 77 0C    0055*      ld (iy+cmd_volume),a
0421B6 3E 25       0056*      ld a,0x25
0421B8 FD 77 05    0057*      ld (iy+cmd_frequency),a
0421BB 3E 02       0058*      ld a,0x02
0421BD FD 77 06    0059*      ld (iy+cmd_frequency+1),a
0421C0 ED 33 0D    0060*      lea iy,iy+cmd_bytes
0421C3             0061*  
0421C3 3E 13       0062*      ld a,19
0421C5 FD 77 0C    0063*      ld (iy+cmd_volume),a
0421C8 3E 93       0064*      ld a,0x93
0421CA FD 77 05    0065*      ld (iy+cmd_frequency),a
0421CD 3E 02       0066*      ld a,0x02
0421CF FD 77 06    0067*      ld (iy+cmd_frequency+1),a
0421D2 ED 33 0D    0068*      lea iy,iy+cmd_bytes
0421D5             0069*  
0421D5 21 B2 0D 04 0070*      ld hl,notes_played
0421D9 35          0071*      dec (hl)
0421DA CA 87 27 04 0072*      jp z,organ_notes_bank_4_end
0421DE             0073*  
0421DE             0074*  @note_end30:
0421DE             0075*  
0421DE DD CB 08 56 0076*      bit 2,(ix+8)
0421E2 CA 7F 22 04 0077*      jp z,@note_end31
0421E6 3E 7F       0078*      ld a,127
0421E8 FD 77 0C    0079*      ld (iy+cmd_volume),a
0421EB 3E 41       0080*      ld a,0x41
0421ED FD 77 05    0081*      ld (iy+cmd_frequency),a
0421F0 3E 00       0082*      ld a,0x00
0421F2 FD 77 06    0083*      ld (iy+cmd_frequency+1),a
0421F5 ED 33 0D    0084*      lea iy,iy+cmd_bytes
0421F8             0085*  
0421F8 3E 34       0086*      ld a,52
0421FA FD 77 0C    0087*      ld (iy+cmd_volume),a
0421FD 3E C4       0088*      ld a,0xC4
0421FF FD 77 05    0089*      ld (iy+cmd_frequency),a
042202 3E 00       0090*      ld a,0x00
042204 FD 77 06    0091*      ld (iy+cmd_frequency+1),a
042207 ED 33 0D    0092*      lea iy,iy+cmd_bytes
04220A             0093*  
04220A 3E 48       0094*      ld a,72
04220C FD 77 0C    0095*      ld (iy+cmd_volume),a
04220F 3E 82       0096*      ld a,0x82
042211 FD 77 05    0097*      ld (iy+cmd_frequency),a
042214 3E 00       0098*      ld a,0x00
042216 FD 77 06    0099*      ld (iy+cmd_frequency+1),a
042219 ED 33 0D    0100*      lea iy,iy+cmd_bytes
04221C             0101*  
04221C 3E 29       0102*      ld a,41
04221E FD 77 0C    0103*      ld (iy+cmd_volume),a
042221 3E 05       0104*      ld a,0x05
042223 FD 77 05    0105*      ld (iy+cmd_frequency),a
042226 3E 01       0106*      ld a,0x01
042228 FD 77 06    0107*      ld (iy+cmd_frequency+1),a
04222B ED 33 0D    0108*      lea iy,iy+cmd_bytes
04222E             0109*  
04222E 3E 1E       0110*      ld a,30
042230 FD 77 0C    0111*      ld (iy+cmd_volume),a
042233 3E 88       0112*      ld a,0x88
042235 FD 77 05    0113*      ld (iy+cmd_frequency),a
042238 3E 01       0114*      ld a,0x01
04223A FD 77 06    0115*      ld (iy+cmd_frequency+1),a
04223D ED 33 0D    0116*      lea iy,iy+cmd_bytes
042240             0117*  
042240 3E 17       0118*      ld a,23
042242 FD 77 0C    0119*      ld (iy+cmd_volume),a
042245 3E 0B       0120*      ld a,0x0B
042247 FD 77 05    0121*      ld (iy+cmd_frequency),a
04224A 3E 02       0122*      ld a,0x02
04224C FD 77 06    0123*      ld (iy+cmd_frequency+1),a
04224F ED 33 0D    0124*      lea iy,iy+cmd_bytes
042252             0125*  
042252 3E 14       0126*      ld a,20
042254 FD 77 0C    0127*      ld (iy+cmd_volume),a
042257 3E 8E       0128*      ld a,0x8E
042259 FD 77 05    0129*      ld (iy+cmd_frequency),a
04225C 3E 02       0130*      ld a,0x02
04225E FD 77 06    0131*      ld (iy+cmd_frequency+1),a
042261 ED 33 0D    0132*      lea iy,iy+cmd_bytes
042264             0133*  
042264 3E 11       0134*      ld a,17
042266 FD 77 0C    0135*      ld (iy+cmd_volume),a
042269 3E 10       0136*      ld a,0x10
04226B FD 77 05    0137*      ld (iy+cmd_frequency),a
04226E 3E 03       0138*      ld a,0x03
042270 FD 77 06    0139*      ld (iy+cmd_frequency+1),a
042273 ED 33 0D    0140*      lea iy,iy+cmd_bytes
042276             0141*  
042276 21 B2 0D 04 0142*      ld hl,notes_played
04227A 35          0143*      dec (hl)
04227B CA 87 27 04 0144*      jp z,organ_notes_bank_4_end
04227F             0145*  
04227F             0146*  @note_end31:
04227F             0147*  
04227F DD CB 0A 56 0148*      bit 2,(ix+10)
042283 CA 20 23 04 0149*      jp z,@note_end32
042287 3E 73       0150*      ld a,115
042289 FD 77 0C    0151*      ld (iy+cmd_volume),a
04228C 3E 49       0152*      ld a,0x49
04228E FD 77 05    0153*      ld (iy+cmd_frequency),a
042291 3E 00       0154*      ld a,0x00
042293 FD 77 06    0155*      ld (iy+cmd_frequency+1),a
042296 ED 33 0D    0156*      lea iy,iy+cmd_bytes
042299             0157*  
042299 3E 2F       0158*      ld a,47
04229B FD 77 0C    0159*      ld (iy+cmd_volume),a
04229E 3E DC       0160*      ld a,0xDC
0422A0 FD 77 05    0161*      ld (iy+cmd_frequency),a
0422A3 3E 00       0162*      ld a,0x00
0422A5 FD 77 06    0163*      ld (iy+cmd_frequency+1),a
0422A8 ED 33 0D    0164*      lea iy,iy+cmd_bytes
0422AB             0165*  
0422AB 3E 42       0166*      ld a,66
0422AD FD 77 0C    0167*      ld (iy+cmd_volume),a
0422B0 3E 92       0168*      ld a,0x92
0422B2 FD 77 05    0169*      ld (iy+cmd_frequency),a
0422B5 3E 00       0170*      ld a,0x00
0422B7 FD 77 06    0171*      ld (iy+cmd_frequency+1),a
0422BA ED 33 0D    0172*      lea iy,iy+cmd_bytes
0422BD             0173*  
0422BD 3E 26       0174*      ld a,38
0422BF FD 77 0C    0175*      ld (iy+cmd_volume),a
0422C2 3E 25       0176*      ld a,0x25
0422C4 FD 77 05    0177*      ld (iy+cmd_frequency),a
0422C7 3E 01       0178*      ld a,0x01
0422C9 FD 77 06    0179*      ld (iy+cmd_frequency+1),a
0422CC ED 33 0D    0180*      lea iy,iy+cmd_bytes
0422CF             0181*  
0422CF 3E 1B       0182*      ld a,27
0422D1 FD 77 0C    0183*      ld (iy+cmd_volume),a
0422D4 3E B8       0184*      ld a,0xB8
0422D6 FD 77 05    0185*      ld (iy+cmd_frequency),a
0422D9 3E 01       0186*      ld a,0x01
0422DB FD 77 06    0187*      ld (iy+cmd_frequency+1),a
0422DE ED 33 0D    0188*      lea iy,iy+cmd_bytes
0422E1             0189*  
0422E1 3E 15       0190*      ld a,21
0422E3 FD 77 0C    0191*      ld (iy+cmd_volume),a
0422E6 3E 4B       0192*      ld a,0x4B
0422E8 FD 77 05    0193*      ld (iy+cmd_frequency),a
0422EB 3E 02       0194*      ld a,0x02
0422ED FD 77 06    0195*      ld (iy+cmd_frequency+1),a
0422F0 ED 33 0D    0196*      lea iy,iy+cmd_bytes
0422F3             0197*  
0422F3 3E 12       0198*      ld a,18
0422F5 FD 77 0C    0199*      ld (iy+cmd_volume),a
0422F8 3E DE       0200*      ld a,0xDE
0422FA FD 77 05    0201*      ld (iy+cmd_frequency),a
0422FD 3E 02       0202*      ld a,0x02
0422FF FD 77 06    0203*      ld (iy+cmd_frequency+1),a
042302 ED 33 0D    0204*      lea iy,iy+cmd_bytes
042305             0205*  
042305 3E 0F       0206*      ld a,15
042307 FD 77 0C    0207*      ld (iy+cmd_volume),a
04230A 3E 70       0208*      ld a,0x70
04230C FD 77 05    0209*      ld (iy+cmd_frequency),a
04230F 3E 03       0210*      ld a,0x03
042311 FD 77 06    0211*      ld (iy+cmd_frequency+1),a
042314 ED 33 0D    0212*      lea iy,iy+cmd_bytes
042317             0213*  
042317 21 B2 0D 04 0214*      ld hl,notes_played
04231B 35          0215*      dec (hl)
04231C CA 87 27 04 0216*      jp z,organ_notes_bank_4_end
042320             0217*  
042320             0218*  @note_end32:
042320             0219*  
042320 DD CB 0C 5E 0220*      bit 3,(ix+12)
042324 CA C1 23 04 0221*      jp z,@note_end33
042328 3E 6E       0222*      ld a,110
04232A FD 77 0C    0223*      ld (iy+cmd_volume),a
04232D 3E 4D       0224*      ld a,0x4D
04232F FD 77 05    0225*      ld (iy+cmd_frequency),a
042332 3E 00       0226*      ld a,0x00
042334 FD 77 06    0227*      ld (iy+cmd_frequency+1),a
042337 ED 33 0D    0228*      lea iy,iy+cmd_bytes
04233A             0229*  
04233A 3E 2D       0230*      ld a,45
04233C FD 77 0C    0231*      ld (iy+cmd_volume),a
04233F 3E E9       0232*      ld a,0xE9
042341 FD 77 05    0233*      ld (iy+cmd_frequency),a
042344 3E 00       0234*      ld a,0x00
042346 FD 77 06    0235*      ld (iy+cmd_frequency+1),a
042349 ED 33 0D    0236*      lea iy,iy+cmd_bytes
04234C             0237*  
04234C 3E 3F       0238*      ld a,63
04234E FD 77 0C    0239*      ld (iy+cmd_volume),a
042351 3E 9B       0240*      ld a,0x9B
042353 FD 77 05    0241*      ld (iy+cmd_frequency),a
042356 3E 00       0242*      ld a,0x00
042358 FD 77 06    0243*      ld (iy+cmd_frequency+1),a
04235B ED 33 0D    0244*      lea iy,iy+cmd_bytes
04235E             0245*  
04235E 3E 24       0246*      ld a,36
042360 FD 77 0C    0247*      ld (iy+cmd_volume),a
042363 3E 37       0248*      ld a,0x37
042365 FD 77 05    0249*      ld (iy+cmd_frequency),a
042368 3E 01       0250*      ld a,0x01
04236A FD 77 06    0251*      ld (iy+cmd_frequency+1),a
04236D ED 33 0D    0252*      lea iy,iy+cmd_bytes
042370             0253*  
042370 3E 1A       0254*      ld a,26
042372 FD 77 0C    0255*      ld (iy+cmd_volume),a
042375 3E D2       0256*      ld a,0xD2
042377 FD 77 05    0257*      ld (iy+cmd_frequency),a
04237A 3E 01       0258*      ld a,0x01
04237C FD 77 06    0259*      ld (iy+cmd_frequency+1),a
04237F ED 33 0D    0260*      lea iy,iy+cmd_bytes
042382             0261*  
042382 3E 14       0262*      ld a,20
042384 FD 77 0C    0263*      ld (iy+cmd_volume),a
042387 3E 6E       0264*      ld a,0x6E
042389 FD 77 05    0265*      ld (iy+cmd_frequency),a
04238C 3E 02       0266*      ld a,0x02
04238E FD 77 06    0267*      ld (iy+cmd_frequency+1),a
042391 ED 33 0D    0268*      lea iy,iy+cmd_bytes
042394             0269*  
042394 3E 11       0270*      ld a,17
042396 FD 77 0C    0271*      ld (iy+cmd_volume),a
042399 3E 09       0272*      ld a,0x09
04239B FD 77 05    0273*      ld (iy+cmd_frequency),a
04239E 3E 03       0274*      ld a,0x03
0423A0 FD 77 06    0275*      ld (iy+cmd_frequency+1),a
0423A3 ED 33 0D    0276*      lea iy,iy+cmd_bytes
0423A6             0277*  
0423A6 3E 0F       0278*      ld a,15
0423A8 FD 77 0C    0279*      ld (iy+cmd_volume),a
0423AB 3E A5       0280*      ld a,0xA5
0423AD FD 77 05    0281*      ld (iy+cmd_frequency),a
0423B0 3E 03       0282*      ld a,0x03
0423B2 FD 77 06    0283*      ld (iy+cmd_frequency+1),a
0423B5 ED 33 0D    0284*      lea iy,iy+cmd_bytes
0423B8             0285*  
0423B8 21 B2 0D 04 0286*      ld hl,notes_played
0423BC 35          0287*      dec (hl)
0423BD CA 87 27 04 0288*      jp z,organ_notes_bank_4_end
0423C1             0289*  
0423C1             0290*  @note_end33:
0423C1             0291*  
0423C1 DD CB 0C 66 0292*      bit 4,(ix+12)
0423C5 CA 62 24 04 0293*      jp z,@note_end34
0423C9 3E 69       0294*      ld a,105
0423CB FD 77 0C    0295*      ld (iy+cmd_volume),a
0423CE 3E 52       0296*      ld a,0x52
0423D0 FD 77 05    0297*      ld (iy+cmd_frequency),a
0423D3 3E 00       0298*      ld a,0x00
0423D5 FD 77 06    0299*      ld (iy+cmd_frequency+1),a
0423D8 ED 33 0D    0300*      lea iy,iy+cmd_bytes
0423DB             0301*  
0423DB 3E 2B       0302*      ld a,43
0423DD FD 77 0C    0303*      ld (iy+cmd_volume),a
0423E0 3E F7       0304*      ld a,0xF7
0423E2 FD 77 05    0305*      ld (iy+cmd_frequency),a
0423E5 3E 00       0306*      ld a,0x00
0423E7 FD 77 06    0307*      ld (iy+cmd_frequency+1),a
0423EA ED 33 0D    0308*      lea iy,iy+cmd_bytes
0423ED             0309*  
0423ED 3E 3C       0310*      ld a,60
0423EF FD 77 0C    0311*      ld (iy+cmd_volume),a
0423F2 3E A4       0312*      ld a,0xA4
0423F4 FD 77 05    0313*      ld (iy+cmd_frequency),a
0423F7 3E 00       0314*      ld a,0x00
0423F9 FD 77 06    0315*      ld (iy+cmd_frequency+1),a
0423FC ED 33 0D    0316*      lea iy,iy+cmd_bytes
0423FF             0317*  
0423FF 3E 22       0318*      ld a,34
042401 FD 77 0C    0319*      ld (iy+cmd_volume),a
042404 3E 49       0320*      ld a,0x49
042406 FD 77 05    0321*      ld (iy+cmd_frequency),a
042409 3E 01       0322*      ld a,0x01
04240B FD 77 06    0323*      ld (iy+cmd_frequency+1),a
04240E ED 33 0D    0324*      lea iy,iy+cmd_bytes
042411             0325*  
042411 3E 19       0326*      ld a,25
042413 FD 77 0C    0327*      ld (iy+cmd_volume),a
042416 3E EE       0328*      ld a,0xEE
042418 FD 77 05    0329*      ld (iy+cmd_frequency),a
04241B 3E 01       0330*      ld a,0x01
04241D FD 77 06    0331*      ld (iy+cmd_frequency+1),a
042420 ED 33 0D    0332*      lea iy,iy+cmd_bytes
042423             0333*  
042423 3E 13       0334*      ld a,19
042425 FD 77 0C    0335*      ld (iy+cmd_volume),a
042428 3E 93       0336*      ld a,0x93
04242A FD 77 05    0337*      ld (iy+cmd_frequency),a
04242D 3E 02       0338*      ld a,0x02
04242F FD 77 06    0339*      ld (iy+cmd_frequency+1),a
042432 ED 33 0D    0340*      lea iy,iy+cmd_bytes
042435             0341*  
042435 3E 10       0342*      ld a,16
042437 FD 77 0C    0343*      ld (iy+cmd_volume),a
04243A 3E 38       0344*      ld a,0x38
04243C FD 77 05    0345*      ld (iy+cmd_frequency),a
04243F 3E 03       0346*      ld a,0x03
042441 FD 77 06    0347*      ld (iy+cmd_frequency+1),a
042444 ED 33 0D    0348*      lea iy,iy+cmd_bytes
042447             0349*  
042447 3E 0E       0350*      ld a,14
042449 FD 77 0C    0351*      ld (iy+cmd_volume),a
04244C 3E DC       0352*      ld a,0xDC
04244E FD 77 05    0353*      ld (iy+cmd_frequency),a
042451 3E 03       0354*      ld a,0x03
042453 FD 77 06    0355*      ld (iy+cmd_frequency+1),a
042456 ED 33 0D    0356*      lea iy,iy+cmd_bytes
042459             0357*  
042459 21 B2 0D 04 0358*      ld hl,notes_played
04245D 35          0359*      dec (hl)
04245E CA 87 27 04 0360*      jp z,organ_notes_bank_4_end
042462             0361*  
042462             0362*  @note_end34:
042462             0363*  
042462 DD CB 0A 6E 0364*      bit 5,(ix+10)
042466 CA 03 25 04 0365*      jp z,@note_end35
04246A 3E 5C       0366*      ld a,92
04246C FD 77 0C    0367*      ld (iy+cmd_volume),a
04246F 3E 61       0368*      ld a,0x61
042471 FD 77 05    0369*      ld (iy+cmd_frequency),a
042474 3E 00       0370*      ld a,0x00
042476 FD 77 06    0371*      ld (iy+cmd_frequency+1),a
042479 ED 33 0D    0372*      lea iy,iy+cmd_bytes
04247C             0373*  
04247C 3E 26       0374*      ld a,38
04247E FD 77 0C    0375*      ld (iy+cmd_volume),a
042481 3E 25       0376*      ld a,0x25
042483 FD 77 05    0377*      ld (iy+cmd_frequency),a
042486 3E 01       0378*      ld a,0x01
042488 FD 77 06    0379*      ld (iy+cmd_frequency+1),a
04248B ED 33 0D    0380*      lea iy,iy+cmd_bytes
04248E             0381*  
04248E 3E 34       0382*      ld a,52
042490 FD 77 0C    0383*      ld (iy+cmd_volume),a
042493 3E C3       0384*      ld a,0xC3
042495 FD 77 05    0385*      ld (iy+cmd_frequency),a
042498 3E 00       0386*      ld a,0x00
04249A FD 77 06    0387*      ld (iy+cmd_frequency+1),a
04249D ED 33 0D    0388*      lea iy,iy+cmd_bytes
0424A0             0389*  
0424A0 3E 1E       0390*      ld a,30
0424A2 FD 77 0C    0391*      ld (iy+cmd_volume),a
0424A5 3E 87       0392*      ld a,0x87
0424A7 FD 77 05    0393*      ld (iy+cmd_frequency),a
0424AA 3E 01       0394*      ld a,0x01
0424AC FD 77 06    0395*      ld (iy+cmd_frequency+1),a
0424AF ED 33 0D    0396*      lea iy,iy+cmd_bytes
0424B2             0397*  
0424B2 3E 15       0398*      ld a,21
0424B4 FD 77 0C    0399*      ld (iy+cmd_volume),a
0424B7 3E 4B       0400*      ld a,0x4B
0424B9 FD 77 05    0401*      ld (iy+cmd_frequency),a
0424BC 3E 02       0402*      ld a,0x02
0424BE FD 77 06    0403*      ld (iy+cmd_frequency+1),a
0424C1 ED 33 0D    0404*      lea iy,iy+cmd_bytes
0424C4             0405*  
0424C4 3E 11       0406*      ld a,17
0424C6 FD 77 0C    0407*      ld (iy+cmd_volume),a
0424C9 3E 0F       0408*      ld a,0x0F
0424CB FD 77 05    0409*      ld (iy+cmd_frequency),a
0424CE 3E 03       0410*      ld a,0x03
0424D0 FD 77 06    0411*      ld (iy+cmd_frequency+1),a
0424D3 ED 33 0D    0412*      lea iy,iy+cmd_bytes
0424D6             0413*  
0424D6 3E 0E       0414*      ld a,14
0424D8 FD 77 0C    0415*      ld (iy+cmd_volume),a
0424DB 3E D3       0416*      ld a,0xD3
0424DD FD 77 05    0417*      ld (iy+cmd_frequency),a
0424E0 3E 03       0418*      ld a,0x03
0424E2 FD 77 06    0419*      ld (iy+cmd_frequency+1),a
0424E5 ED 33 0D    0420*      lea iy,iy+cmd_bytes
0424E8             0421*  
0424E8 3E 0C       0422*      ld a,12
0424EA FD 77 0C    0423*      ld (iy+cmd_volume),a
0424ED 3E 97       0424*      ld a,0x97
0424EF FD 77 05    0425*      ld (iy+cmd_frequency),a
0424F2 3E 04       0426*      ld a,0x04
0424F4 FD 77 06    0427*      ld (iy+cmd_frequency+1),a
0424F7 ED 33 0D    0428*      lea iy,iy+cmd_bytes
0424FA             0429*  
0424FA 21 B2 0D 04 0430*      ld hl,notes_played
0424FE 35          0431*      dec (hl)
0424FF CA 87 27 04 0432*      jp z,organ_notes_bank_4_end
042503             0433*  
042503             0434*  @note_end35:
042503             0435*  
042503 DD CB 0C 6E 0436*      bit 5,(ix+12)
042507 CA A4 25 04 0437*      jp z,@note_end36
04250B 3E 53       0438*      ld a,83
04250D FD 77 0C    0439*      ld (iy+cmd_volume),a
042510 3E 6D       0440*      ld a,0x6D
042512 FD 77 05    0441*      ld (iy+cmd_frequency),a
042515 3E 00       0442*      ld a,0x00
042517 FD 77 06    0443*      ld (iy+cmd_frequency+1),a
04251A ED 33 0D    0444*      lea iy,iy+cmd_bytes
04251D             0445*  
04251D 3E 22       0446*      ld a,34
04251F FD 77 0C    0447*      ld (iy+cmd_volume),a
042522 3E 49       0448*      ld a,0x49
042524 FD 77 05    0449*      ld (iy+cmd_frequency),a
042527 3E 01       0450*      ld a,0x01
042529 FD 77 06    0451*      ld (iy+cmd_frequency+1),a
04252C ED 33 0D    0452*      lea iy,iy+cmd_bytes
04252F             0453*  
04252F 3E 30       0454*      ld a,48
042531 FD 77 0C    0455*      ld (iy+cmd_volume),a
042534 3E DB       0456*      ld a,0xDB
042536 FD 77 05    0457*      ld (iy+cmd_frequency),a
042539 3E 00       0458*      ld a,0x00
04253B FD 77 06    0459*      ld (iy+cmd_frequency+1),a
04253E ED 33 0D    0460*      lea iy,iy+cmd_bytes
042541             0461*  
042541 3E 1B       0462*      ld a,27
042543 FD 77 0C    0463*      ld (iy+cmd_volume),a
042546 3E B7       0464*      ld a,0xB7
042548 FD 77 05    0465*      ld (iy+cmd_frequency),a
04254B 3E 01       0466*      ld a,0x01
04254D FD 77 06    0467*      ld (iy+cmd_frequency+1),a
042550 ED 33 0D    0468*      lea iy,iy+cmd_bytes
042553             0469*  
042553 3E 13       0470*      ld a,19
042555 FD 77 0C    0471*      ld (iy+cmd_volume),a
042558 3E 93       0472*      ld a,0x93
04255A FD 77 05    0473*      ld (iy+cmd_frequency),a
04255D 3E 02       0474*      ld a,0x02
04255F FD 77 06    0475*      ld (iy+cmd_frequency+1),a
042562 ED 33 0D    0476*      lea iy,iy+cmd_bytes
042565             0477*  
042565 3E 0F       0478*      ld a,15
042567 FD 77 0C    0479*      ld (iy+cmd_volume),a
04256A 3E 6F       0480*      ld a,0x6F
04256C FD 77 05    0481*      ld (iy+cmd_frequency),a
04256F 3E 03       0482*      ld a,0x03
042571 FD 77 06    0483*      ld (iy+cmd_frequency+1),a
042574 ED 33 0D    0484*      lea iy,iy+cmd_bytes
042577             0485*  
042577 3E 0D       0486*      ld a,13
042579 FD 77 0C    0487*      ld (iy+cmd_volume),a
04257C 3E 4B       0488*      ld a,0x4B
04257E FD 77 05    0489*      ld (iy+cmd_frequency),a
042581 3E 04       0490*      ld a,0x04
042583 FD 77 06    0491*      ld (iy+cmd_frequency+1),a
042586 ED 33 0D    0492*      lea iy,iy+cmd_bytes
042589             0493*  
042589 3E 0B       0494*      ld a,11
04258B FD 77 0C    0495*      ld (iy+cmd_volume),a
04258E 3E 27       0496*      ld a,0x27
042590 FD 77 05    0497*      ld (iy+cmd_frequency),a
042593 3E 05       0498*      ld a,0x05
042595 FD 77 06    0499*      ld (iy+cmd_frequency+1),a
042598 ED 33 0D    0500*      lea iy,iy+cmd_bytes
04259B             0501*  
04259B 21 B2 0D 04 0502*      ld hl,notes_played
04259F 35          0503*      dec (hl)
0425A0 CA 87 27 04 0504*      jp z,organ_notes_bank_4_end
0425A4             0505*  
0425A4             0506*  @note_end36:
0425A4             0507*  
0425A4 DD CB 0C 76 0508*      bit 6,(ix+12)
0425A8 CA 45 26 04 0509*      jp z,@note_end37
0425AC 3E 48       0510*      ld a,72
0425AE FD 77 0C    0511*      ld (iy+cmd_volume),a
0425B1 3E 82       0512*      ld a,0x82
0425B3 FD 77 05    0513*      ld (iy+cmd_frequency),a
0425B6 3E 00       0514*      ld a,0x00
0425B8 FD 77 06    0515*      ld (iy+cmd_frequency+1),a
0425BB ED 33 0D    0516*      lea iy,iy+cmd_bytes
0425BE             0517*  
0425BE 3E 1E       0518*      ld a,30
0425C0 FD 77 0C    0519*      ld (iy+cmd_volume),a
0425C3 3E 88       0520*      ld a,0x88
0425C5 FD 77 05    0521*      ld (iy+cmd_frequency),a
0425C8 3E 01       0522*      ld a,0x01
0425CA FD 77 06    0523*      ld (iy+cmd_frequency+1),a
0425CD ED 33 0D    0524*      lea iy,iy+cmd_bytes
0425D0             0525*  
0425D0 3E 29       0526*      ld a,41
0425D2 FD 77 0C    0527*      ld (iy+cmd_volume),a
0425D5 3E 05       0528*      ld a,0x05
0425D7 FD 77 05    0529*      ld (iy+cmd_frequency),a
0425DA 3E 01       0530*      ld a,0x01
0425DC FD 77 06    0531*      ld (iy+cmd_frequency+1),a
0425DF ED 33 0D    0532*      lea iy,iy+cmd_bytes
0425E2             0533*  
0425E2 3E 17       0534*      ld a,23
0425E4 FD 77 0C    0535*      ld (iy+cmd_volume),a
0425E7 3E 0B       0536*      ld a,0x0B
0425E9 FD 77 05    0537*      ld (iy+cmd_frequency),a
0425EC 3E 02       0538*      ld a,0x02
0425EE FD 77 06    0539*      ld (iy+cmd_frequency+1),a
0425F1 ED 33 0D    0540*      lea iy,iy+cmd_bytes
0425F4             0541*  
0425F4 3E 11       0542*      ld a,17
0425F6 FD 77 0C    0543*      ld (iy+cmd_volume),a
0425F9 3E 10       0544*      ld a,0x10
0425FB FD 77 05    0545*      ld (iy+cmd_frequency),a
0425FE 3E 03       0546*      ld a,0x03
042600 FD 77 06    0547*      ld (iy+cmd_frequency+1),a
042603 ED 33 0D    0548*      lea iy,iy+cmd_bytes
042606             0549*  
042606 3E 0D       0550*      ld a,13
042608 FD 77 0C    0551*      ld (iy+cmd_volume),a
04260B 3E 16       0552*      ld a,0x16
04260D FD 77 05    0553*      ld (iy+cmd_frequency),a
042610 3E 04       0554*      ld a,0x04
042612 FD 77 06    0555*      ld (iy+cmd_frequency+1),a
042615 ED 33 0D    0556*      lea iy,iy+cmd_bytes
042618             0557*  
042618 3E 0B       0558*      ld a,11
04261A FD 77 0C    0559*      ld (iy+cmd_volume),a
04261D 3E 1C       0560*      ld a,0x1C
04261F FD 77 05    0561*      ld (iy+cmd_frequency),a
042622 3E 05       0562*      ld a,0x05
042624 FD 77 06    0563*      ld (iy+cmd_frequency+1),a
042627 ED 33 0D    0564*      lea iy,iy+cmd_bytes
04262A             0565*  
04262A 3E 09       0566*      ld a,9
04262C FD 77 0C    0567*      ld (iy+cmd_volume),a
04262F 3E 21       0568*      ld a,0x21
042631 FD 77 05    0569*      ld (iy+cmd_frequency),a
042634 3E 06       0570*      ld a,0x06
042636 FD 77 06    0571*      ld (iy+cmd_frequency+1),a
042639 ED 33 0D    0572*      lea iy,iy+cmd_bytes
04263C             0573*  
04263C 21 B2 0D 04 0574*      ld hl,notes_played
042640 35          0575*      dec (hl)
042641 CA 87 27 04 0576*      jp z,organ_notes_bank_4_end
042645             0577*  
042645             0578*  @note_end37:
042645             0579*  
042645 DD CB 0C 7E 0580*      bit 7,(ix+12)
042649 CA E6 26 04 0581*      jp z,@note_end38
04264D 3E 42       0582*      ld a,66
04264F FD 77 0C    0583*      ld (iy+cmd_volume),a
042652 3E 92       0584*      ld a,0x92
042654 FD 77 05    0585*      ld (iy+cmd_frequency),a
042657 3E 00       0586*      ld a,0x00
042659 FD 77 06    0587*      ld (iy+cmd_frequency+1),a
04265C ED 33 0D    0588*      lea iy,iy+cmd_bytes
04265F             0589*  
04265F 3E 1B       0590*      ld a,27
042661 FD 77 0C    0591*      ld (iy+cmd_volume),a
042664 3E B8       0592*      ld a,0xB8
042666 FD 77 05    0593*      ld (iy+cmd_frequency),a
042669 3E 01       0594*      ld a,0x01
04266B FD 77 06    0595*      ld (iy+cmd_frequency+1),a
04266E ED 33 0D    0596*      lea iy,iy+cmd_bytes
042671             0597*  
042671 3E 26       0598*      ld a,38
042673 FD 77 0C    0599*      ld (iy+cmd_volume),a
042676 3E 25       0600*      ld a,0x25
042678 FD 77 05    0601*      ld (iy+cmd_frequency),a
04267B 3E 01       0602*      ld a,0x01
04267D FD 77 06    0603*      ld (iy+cmd_frequency+1),a
042680 ED 33 0D    0604*      lea iy,iy+cmd_bytes
042683             0605*  
042683 3E 15       0606*      ld a,21
042685 FD 77 0C    0607*      ld (iy+cmd_volume),a
042688 3E 4B       0608*      ld a,0x4B
04268A FD 77 05    0609*      ld (iy+cmd_frequency),a
04268D 3E 02       0610*      ld a,0x02
04268F FD 77 06    0611*      ld (iy+cmd_frequency+1),a
042692 ED 33 0D    0612*      lea iy,iy+cmd_bytes
042695             0613*  
042695 3E 0F       0614*      ld a,15
042697 FD 77 0C    0615*      ld (iy+cmd_volume),a
04269A 3E 70       0616*      ld a,0x70
04269C FD 77 05    0617*      ld (iy+cmd_frequency),a
04269F 3E 03       0618*      ld a,0x03
0426A1 FD 77 06    0619*      ld (iy+cmd_frequency+1),a
0426A4 ED 33 0D    0620*      lea iy,iy+cmd_bytes
0426A7             0621*  
0426A7 3E 0C       0622*      ld a,12
0426A9 FD 77 0C    0623*      ld (iy+cmd_volume),a
0426AC 3E 96       0624*      ld a,0x96
0426AE FD 77 05    0625*      ld (iy+cmd_frequency),a
0426B1 3E 04       0626*      ld a,0x04
0426B3 FD 77 06    0627*      ld (iy+cmd_frequency+1),a
0426B6 ED 33 0D    0628*      lea iy,iy+cmd_bytes
0426B9             0629*  
0426B9 3E 0A       0630*      ld a,10
0426BB FD 77 0C    0631*      ld (iy+cmd_volume),a
0426BE 3E BC       0632*      ld a,0xBC
0426C0 FD 77 05    0633*      ld (iy+cmd_frequency),a
0426C3 3E 05       0634*      ld a,0x05
0426C5 FD 77 06    0635*      ld (iy+cmd_frequency+1),a
0426C8 ED 33 0D    0636*      lea iy,iy+cmd_bytes
0426CB             0637*  
0426CB 3E 09       0638*      ld a,9
0426CD FD 77 0C    0639*      ld (iy+cmd_volume),a
0426D0 3E E1       0640*      ld a,0xE1
0426D2 FD 77 05    0641*      ld (iy+cmd_frequency),a
0426D5 3E 06       0642*      ld a,0x06
0426D7 FD 77 06    0643*      ld (iy+cmd_frequency+1),a
0426DA ED 33 0D    0644*      lea iy,iy+cmd_bytes
0426DD             0645*  
0426DD 21 B2 0D 04 0646*      ld hl,notes_played
0426E1 35          0647*      dec (hl)
0426E2 CA 87 27 04 0648*      jp z,organ_notes_bank_4_end
0426E6             0649*  
0426E6             0650*  @note_end38:
0426E6             0651*  
0426E6 DD CB 0D 46 0652*      bit 0,(ix+13)
0426EA CA 87 27 04 0653*      jp z,@note_end39
0426EE 3E 3F       0654*      ld a,63
0426F0 FD 77 0C    0655*      ld (iy+cmd_volume),a
0426F3 3E 9B       0656*      ld a,0x9B
0426F5 FD 77 05    0657*      ld (iy+cmd_frequency),a
0426F8 3E 00       0658*      ld a,0x00
0426FA FD 77 06    0659*      ld (iy+cmd_frequency+1),a
0426FD ED 33 0D    0660*      lea iy,iy+cmd_bytes
042700             0661*  
042700 3E 1A       0662*      ld a,26
042702 FD 77 0C    0663*      ld (iy+cmd_volume),a
042705 3E D2       0664*      ld a,0xD2
042707 FD 77 05    0665*      ld (iy+cmd_frequency),a
04270A 3E 01       0666*      ld a,0x01
04270C FD 77 06    0667*      ld (iy+cmd_frequency+1),a
04270F ED 33 0D    0668*      lea iy,iy+cmd_bytes
042712             0669*  
042712 3E 24       0670*      ld a,36
042714 FD 77 0C    0671*      ld (iy+cmd_volume),a
042717 3E 37       0672*      ld a,0x37
042719 FD 77 05    0673*      ld (iy+cmd_frequency),a
04271C 3E 01       0674*      ld a,0x01
04271E FD 77 06    0675*      ld (iy+cmd_frequency+1),a
042721 ED 33 0D    0676*      lea iy,iy+cmd_bytes
042724             0677*  
042724 3E 14       0678*      ld a,20
042726 FD 77 0C    0679*      ld (iy+cmd_volume),a
042729 3E 6E       0680*      ld a,0x6E
04272B FD 77 05    0681*      ld (iy+cmd_frequency),a
04272E 3E 02       0682*      ld a,0x02
042730 FD 77 06    0683*      ld (iy+cmd_frequency+1),a
042733 ED 33 0D    0684*      lea iy,iy+cmd_bytes
042736             0685*  
042736 3E 0F       0686*      ld a,15
042738 FD 77 0C    0687*      ld (iy+cmd_volume),a
04273B 3E A5       0688*      ld a,0xA5
04273D FD 77 05    0689*      ld (iy+cmd_frequency),a
042740 3E 03       0690*      ld a,0x03
042742 FD 77 06    0691*      ld (iy+cmd_frequency+1),a
042745 ED 33 0D    0692*      lea iy,iy+cmd_bytes
042748             0693*  
042748 3E 0B       0694*      ld a,11
04274A FD 77 0C    0695*      ld (iy+cmd_volume),a
04274D 3E DC       0696*      ld a,0xDC
04274F FD 77 05    0697*      ld (iy+cmd_frequency),a
042752 3E 04       0698*      ld a,0x04
042754 FD 77 06    0699*      ld (iy+cmd_frequency+1),a
042757 ED 33 0D    0700*      lea iy,iy+cmd_bytes
04275A             0701*  
04275A 3E 0A       0702*      ld a,10
04275C FD 77 0C    0703*      ld (iy+cmd_volume),a
04275F 3E 13       0704*      ld a,0x13
042761 FD 77 05    0705*      ld (iy+cmd_frequency),a
042764 3E 06       0706*      ld a,0x06
042766 FD 77 06    0707*      ld (iy+cmd_frequency+1),a
042769 ED 33 0D    0708*      lea iy,iy+cmd_bytes
04276C             0709*  
04276C 3E 08       0710*      ld a,8
04276E FD 77 0C    0711*      ld (iy+cmd_volume),a
042771 3E 4A       0712*      ld a,0x4A
042773 FD 77 05    0713*      ld (iy+cmd_frequency),a
042776 3E 07       0714*      ld a,0x07
042778 FD 77 06    0715*      ld (iy+cmd_frequency+1),a
04277B ED 33 0D    0716*      lea iy,iy+cmd_bytes
04277E             0717*  
04277E 21 B2 0D 04 0718*      ld hl,notes_played
042782 35          0719*      dec (hl)
042783 CA 87 27 04 0720*      jp z,organ_notes_bank_4_end
042787             0721*  
042787             0722*  @note_end39:
042787             0723*  
042787             0724*  organ_notes_bank_4_end:
042787             0226   
042787             0227   ; play the notes
042787 CD D3 0B 04 0228       call play_notes
04278B             0229   
04278B             0230   ; ; wait a tick
04278B             0231   ;     call vdu_flip
04278B             0232   ;     call vdu_vblank
04278B             0233   
04278B             0234   ; quit if escape key pressed
04278B             0235   ; 113 Escape
04278B DD CB 0E 46 0236       bit 0,(ix+14)
04278F CA B3 0D 04 0237       jp z,main
042793             0238   
042793             0239   ; cleanup and exit
042793 3E 00       0240       ld a,0
042795 CD 1A 08 04 0241       call vdu_set_screen_mode
042799 C9          0242       ret
