PC     Output      Line
040000             0001       include "organ/src/asm/mos_api.asm"
040000             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.asm
040000             0002*  ; Title:	AGON MOS - API for user projects
040000             0003*  ; Author:	Dean Belfield
040000             0004*  ;			Adapted for agon-ez80asm by Jeroen Venema
040000             0005*  ;			Added MOS error codes for return in HL
040000             0006*  ; Created:	03/08/2022
040000             0007*  ; Last Updated:	10/08/2023
040000             0008*  ;
040000             0009*  ; Modinfo:
040000             0010*  ; 05/08/2022:	Added mos_feof
040000             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040000             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040000             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040000             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040000             0015*  ; 13/10/2022:	Added mos_oscli
040000             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040000             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040000             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040000             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040000             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040000             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040000             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040000             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040000             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040000             0025*  ; 19/05/2023:	Added sysvar_scrMode
040000             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040000             0027*  ; 03/08/2023:	Added mos_setkbvector
040000             0028*  ; 10/08/2023:	Added mos_getkbmap
040000             0029*  
040000             0030*  ; VDP control (VDU 23, 0, n)
040000             0031*  ;
040000             0032*  vdp_gp:				EQU 80h
040000             0033*  vdp_keycode:		EQU 81h
040000             0034*  vdp_cursor:			EQU	82h
040000             0035*  vdp_scrchar:		EQU	83h
040000             0036*  vdp_scrpixel:		EQU	84h
040000             0037*  vdp_audio:			EQU	85h
040000             0038*  vdp_mode:			EQU	86h
040000             0039*  vdp_rtc:			EQU	87h
040000             0040*  vdp_keystate:		EQU	88h
040000             0041*  vdp_logicalcoords:	EQU	C0h
040000             0042*  vdp_terminalmode:	EQU	FFh
040000             0043*  
040000             0044*  ; MOS high level functions
040000             0045*  ;
040000             0046*  mos_getkey:			EQU	00h
040000             0047*  mos_load:			EQU	01h
040000             0048*  mos_save:			EQU	02h
040000             0049*  mos_cd:				EQU	03h
040000             0050*  mos_dir:			EQU	04h
040000             0051*  mos_del:			EQU	05h
040000             0052*  mos_ren:			EQU	06h
040000             0053*  mos_mkdir:			EQU	07h
040000             0054*  mos_sysvars:		EQU	08h
040000             0055*  mos_editline:		EQU	09h
040000             0056*  mos_fopen:			EQU	0Ah
040000             0057*  mos_fclose:			EQU	0Bh
040000             0058*  mos_fgetc:			EQU	0Ch
040000             0059*  mos_fputc:			EQU	0Dh
040000             0060*  mos_feof:			EQU	0Eh
040000             0061*  mos_getError:		EQU	0Fh
040000             0062*  mos_oscli:			EQU	10h
040000             0063*  mos_copy:			EQU	11h
040000             0064*  mos_getrtc:			EQU	12h
040000             0065*  mos_setrtc:			EQU	13h
040000             0066*  mos_setintvector:	EQU	14h
040000             0067*  mos_uopen:			EQU	15h
040000             0068*  mos_uclose:			EQU	16h
040000             0069*  mos_ugetc:			EQU	17h
040000             0070*  mos_uputc:			EQU	18h
040000             0071*  mos_getfil:			EQU	19h
040000             0072*  mos_fread:			EQU	1Ah
040000             0073*  mos_fwrite:			EQU	1Bh
040000             0074*  mos_flseek:			EQU	1Ch
040000             0075*  mos_setkbvector:	EQU	1Dh
040000             0076*  mos_getkbmap:		EQU	1Eh
040000             0077*  
040000             0078*  ; MOS program exit codes
040000             0079*  ;
040000             0080*  EXIT_OK:				EQU  0;	"OK",
040000             0081*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040000             0082*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040000             0083*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040000             0084*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040000             0085*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040000             0086*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040000             0087*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040000             0088*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040000             0089*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040000             0090*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040000             0091*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040000             0092*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040000             0093*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040000             0094*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040000             0095*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040000             0096*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040000             0097*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040000             0098*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040000             0099*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040000             0100*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040000             0101*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040000             0102*  ; FatFS file access functions
040000             0103*  ;
040000             0104*  ffs_fopen:			EQU	80h
040000             0105*  ffs_fclose:			EQU	81h
040000             0106*  ffs_fread:			EQU	82h
040000             0107*  ffs_fwrite:			EQU	83h
040000             0108*  ffs_flseek:			EQU	84h
040000             0109*  ffs_ftruncate:		EQU	85h
040000             0110*  ffs_fsync:			EQU	86h
040000             0111*  ffs_fforward:		EQU	87h
040000             0112*  ffs_fexpand:		EQU	88h
040000             0113*  ffs_fgets:			EQU	89h
040000             0114*  ffs_fputc:			EQU	8Ah
040000             0115*  ffs_fputs:			EQU	8Bh
040000             0116*  ffs_fprintf:		EQU	8Ch
040000             0117*  ffs_ftell:			EQU	8Dh
040000             0118*  ffs_feof:			EQU	8Eh
040000             0119*  ffs_fsize:			EQU	8Fh
040000             0120*  ffs_ferror:			EQU	90h
040000             0121*  
040000             0122*  ; FatFS directory access functions
040000             0123*  ;
040000             0124*  ffs_dopen:			EQU	91h
040000             0125*  ffs_dclose:			EQU	92h
040000             0126*  ffs_dread:			EQU	93h
040000             0127*  ffs_dfindfirst:		EQU	94h
040000             0128*  ffs_dfindnext:		EQU	95h
040000             0129*  
040000             0130*  ; FatFS file and directory management functions
040000             0131*  ;
040000             0132*  ffs_stat:			EQU	96h
040000             0133*  ffs_unlink:			EQU	97h
040000             0134*  ffs_rename:			EQU	98h
040000             0135*  ffs_chmod:			EQU	99h
040000             0136*  ffs_utime:			EQU	9Ah
040000             0137*  ffs_mkdir:			EQU	9Bh
040000             0138*  ffs_chdir:			EQU	9Ch
040000             0139*  ffs_chdrive:		EQU	9Dh
040000             0140*  ffs_getcwd:			EQU	9Eh
040000             0141*  
040000             0142*  ; FatFS volume management and system configuration functions
040000             0143*  ;
040000             0144*  ffs_mount:			EQU	9Fh
040000             0145*  ffs_mkfs:			EQU	A0h
040000             0146*  ffs_fdisk:			EQU	A1h
040000             0147*  ffs_getfree:		EQU	A2h
040000             0148*  ffs_getlabel:		EQU	A3h
040000             0149*  ffs_setlabel:		EQU	A4h
040000             0150*  ffs_setcp:			EQU	A5h
040000             0151*  
040000             0152*  ; File access modes
040000             0153*  ;
040000             0154*  fa_read:			EQU	01h
040000             0155*  fa_write:			EQU	02h
040000             0156*  fa_open_existing:	EQU	00h
040000             0157*  fa_create_new:		EQU	04h
040000             0158*  fa_create_always:	EQU	08h
040000             0159*  fa_open_always:		EQU	10h
040000             0160*  fa_open_append:		EQU	30h
040000             0161*  
040000             0162*  ; System variable indexes for api_sysvars
040000             0163*  ; Index into _sysvars in globals.asm
040000             0164*  ;
040000             0165*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040000             0166*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040000             0167*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040000             0168*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040000             0169*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040000             0170*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040000             0171*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040000             0172*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040000             0173*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040000             0174*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040000             0175*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040000             0176*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040000             0177*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040000             0178*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040000             0179*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040000             0180*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040000             0181*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040000             0182*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040000             0183*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040000             0184*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040000             0185*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040000             0186*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040000             0187*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040000             0188*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040000             0189*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040000             0190*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040000             0191*  
040000             0192*  ; Flags for the VPD protocol
040000             0193*  ;
040000             0194*  vdp_pflag_cursor:		EQU	00000001b
040000             0195*  vdp_pflag_scrchar:		EQU	00000010b
040000             0196*  vdp_pflag_point:		EQU	00000100b
040000             0197*  vdp_pflag_audio:		EQU	00001000b
040000             0198*  vdp_pflag_mode:			EQU	00010000b
040000             0199*  vdp_pflag_rtc:			EQU	00100000b
040000             0200*  
040000             0201*  ;
040000             0202*  ; FatFS structures
040000             0203*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040000             0204*  ;
040000             0205*  ; Object ID and allocation information (FFOBJID)
040000             0206*  ;
040000             0207*  ; Indexes into FFOBJID structure
040000             0208*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040000             0209*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040000             0210*  ffobjid_attr:		EQU	5	; 1: Object attribute
040000             0211*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040000             0212*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040000             0213*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040000             0214*  ;
040000             0215*  ; File object structure (FIL)
040000             0216*  ;
040000             0217*  ; Indexes into FIL structure
040000             0218*  fil_obj:		EQU 0	; 15: Object identifier
040000             0219*  fil_flag:		EQU	15 	;  1: File status flags
040000             0220*  fil_err:		EQU	16	;  1: Abort flag (error code)
040000             0221*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040000             0222*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040000             0223*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040000             0224*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040000             0225*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040000             0226*  ;
040000             0227*  ; Directory object structure (DIR)
040000             0228*  ; Indexes into DIR structure
040000             0229*  dir_obj:		EQU  0	; 15: Object identifier
040000             0230*  dir_dptr:		EQU	15	;  4: Current read/write offset
040000             0231*  dir_clust:		EQU	19	;  4: Current cluster
040000             0232*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040000             0233*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040000             0234*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040000             0235*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040000             0236*  ;
040000             0237*  ; File information structure (FILINFO)
040000             0238*  ;
040000             0239*  ; Indexes into FILINFO structure
040000             0240*  filinfo_fsize:		EQU 0	;   4: File size
040000             0241*  filinfo_fdate:		EQU	4	;   2: Modified date
040000             0242*  filinfo_ftime:		EQU	6	;   2: Modified time
040000             0243*  filinfo_fattrib:	EQU	8	;   1: File attribute
040000             0244*  filinfo_altname:	EQU	9	;  13: Alternative file name
040000             0245*  filinfo_fname:		EQU	22	; 256: Primary file name
040000             0246*  ;
040000             0247*  ; Macro for calling the API
040000             0248*  ; Parameters:
040000             0249*  ; - function: One of the function numbers listed above
040000             0250*  ;
040000             0251*  	MACRO	MOSCALL	function
040000             0252*  			LD	A, function
040000             0253*  			RST.LIL	08h
040000             0254*  	ENDMACRO
040000             0002   
040000             0003   ; Command 4: Set waveform
040000             0004   ; VDU 23, 0, &85, channel, 4, 8, bufferId;
040000             0005       MACRO WAVEFORM_SAMPLE channel, buffer_id
040000             0006       ld hl, @startChannel
040000             0007       ld bc, @endChannel - @startChannel
040000             0008       rst.lil $18
040000             0009       jr @endChannel
040000             0010   @startChannel:
040000             0011       .db 23,0,$85    ; do sound
040000             0012       .db channel,4,8 ; channel, command, waveform
040000             0013       .dw buffer_id
040000             0014   @endChannel:
040000             0015       ENDMACRO
040000             0016   
040000             0017   ;MOS INITIALIATION
040000             0018       .assume adl=1
040000             0019       .org 0x040000
040000             0020   
040000 C3 45 00 04 0021       jp start
040004             0022   
040004 FF FF FF FF 0023       .align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0024       .db "MOS"
040043 00          0025       .db 00h
040044 01          0026       .db 01h
040045             0027   
040045             0028   start:
040045 F5          0029       push af
040046 C5          0030       push bc
040047 D5          0031       push de
040048 DD E5       0032       push ix
04004A FD E5       0033       push iy
04004C             0034   
04004C             0035   ; ###############################################
04004C CD 64 00 04 0036   	call	init			; Initialization code
040050 CD 74 23 04 0037   	call 	main			; Call the main function
040054             0038   ; ###############################################
040054             0039   
040054 CD 64 09 04 0040       call cursor_on
040058             0041   
040058             0042   exit:
040058 FD E1       0043       pop iy                              ; Pop all registers back from the stack
04005A DD E1       0044       pop ix
04005C D1          0045       pop de
04005D C1          0046       pop bc
04005E F1          0047       pop af
04005F 21 00 00 00 0048       ld hl,0                             ; Load the MOS API return code (0) for no errors.
040063             0049   
040063 C9          0050       ret                                 ; Return MOS
040064             0051   
040064             0052   ; ###############################################
040064             0053   ; Initialization
040064             0054   ; ###############################################
040064             0055   init:
040064             0056   ; enable all the channels
040064 21 72 00 04 0057       ld hl, enable_channels_cmd
040068 01 91 00 00 0058       ld bc, enable_channels_end - enable_channels_cmd
04006C 5B DF       0059       rst.lil $18
04006E C3 03 01 04 0060       jp enable_channels_end
040072             0061   enable_channels_cmd:
040072 17 00 85 03 0062       db 23, 0, $85, 3, 8
       08          
040077 17 00 85 04 0063       db 23, 0, $85, 4, 8
       08          
04007C 17 00 85 05 0064       db 23, 0, $85, 5, 8
       08          
040081 17 00 85 06 0065       db 23, 0, $85, 6, 8
       08          
040086 17 00 85 07 0066       db 23, 0, $85, 7, 8
       08          
04008B 17 00 85 08 0067       db 23, 0, $85, 8, 8
       08          
040090 17 00 85 09 0068       db 23, 0, $85, 9, 8
       08          
040095 17 00 85 0A 0069       db 23, 0, $85, 10, 8
       08          
04009A 17 00 85 0B 0070       db 23, 0, $85, 11, 8
       08          
04009F 17 00 85 0C 0071       db 23, 0, $85, 12, 8
       08          
0400A4 17 00 85 0D 0072       db 23, 0, $85, 13, 8
       08          
0400A9 17 00 85 0E 0073       db 23, 0, $85, 14, 8
       08          
0400AE 17 00 85 0F 0074       db 23, 0, $85, 15, 8
       08          
0400B3 17 00 85 10 0075       db 23, 0, $85, 16, 8
       08          
0400B8 17 00 85 11 0076       db 23, 0, $85, 17, 8
       08          
0400BD 17 00 85 12 0077       db 23, 0, $85, 18, 8
       08          
0400C2 17 00 85 13 0078       db 23, 0, $85, 19, 8
       08          
0400C7 17 00 85 14 0079       db 23, 0, $85, 20, 8
       08          
0400CC 17 00 85 15 0080       db 23, 0, $85, 21, 8
       08          
0400D1 17 00 85 16 0081       db 23, 0, $85, 22, 8
       08          
0400D6 17 00 85 17 0082       db 23, 0, $85, 23, 8
       08          
0400DB 17 00 85 18 0083       db 23, 0, $85, 24, 8
       08          
0400E0 17 00 85 19 0084       db 23, 0, $85, 25, 8
       08          
0400E5 17 00 85 1A 0085       db 23, 0, $85, 26, 8
       08          
0400EA 17 00 85 1B 0086       db 23, 0, $85, 27, 8
       08          
0400EF 17 00 85 1C 0087       db 23, 0, $85, 28, 8
       08          
0400F4 17 00 85 1D 0088       db 23, 0, $85, 29, 8
       08          
0400F9 17 00 85 1E 0089       db 23, 0, $85, 30, 8
       08          
0400FE 17 00 85 1F 0090       db 23, 0, $85, 31, 8
       08          
040103             0091   enable_channels_end:
040103             0092   
040103             0093   waveform_square: equ 0 ; square wave
040103             0094   waveform_triangle: equ 1 ; triangle wave
040103             0095   waveform_sawtooth: equ 2 ; sawtooth wave
040103             0096   waveform_sine: equ 3 ; sine wave
040103             0097   waveform_noise: equ 4 ; noise wave
040103             0098   waveform_vic_noise: equ 5 ; VIC noise wave
040103             0099   waveform_sample: equ 8 ; PCM sound sample
040103             0100   
040103             0101   waveform: equ waveform_sine
040103             0102   
040103             0103   ; set waveform for all channels
040103 21 11 01 04 0104       ld hl, waveform_channels_cmd
040107 01 C0 00 00 0105       ld bc, waveform_channels_end - waveform_channels_cmd
04010B 5B DF       0106       rst.lil $18
04010D C3 D1 01 04 0107       jp waveform_channels_end
040111             0108   waveform_channels_cmd:
040111 17 00 85 00 0109       db 23, 0, $85, 0, 4, waveform
       04 03       
040117 17 00 85 01 0110       db 23, 0, $85, 1, 4, waveform
       04 03       
04011D 17 00 85 02 0111       db 23, 0, $85, 2, 4, waveform
       04 03       
040123 17 00 85 03 0112       db 23, 0, $85, 3, 4, waveform
       04 03       
040129 17 00 85 04 0113       db 23, 0, $85, 4, 4, waveform
       04 03       
04012F 17 00 85 05 0114       db 23, 0, $85, 5, 4, waveform
       04 03       
040135 17 00 85 06 0115       db 23, 0, $85, 6, 4, waveform
       04 03       
04013B 17 00 85 07 0116       db 23, 0, $85, 7, 4, waveform
       04 03       
040141 17 00 85 08 0117       db 23, 0, $85, 8, 4, waveform
       04 03       
040147 17 00 85 09 0118       db 23, 0, $85, 9, 4, waveform
       04 03       
04014D 17 00 85 0A 0119       db 23, 0, $85, 10, 4, waveform
       04 03       
040153 17 00 85 0B 0120       db 23, 0, $85, 11, 4, waveform
       04 03       
040159 17 00 85 0C 0121       db 23, 0, $85, 12, 4, waveform
       04 03       
04015F 17 00 85 0D 0122       db 23, 0, $85, 13, 4, waveform
       04 03       
040165 17 00 85 0E 0123       db 23, 0, $85, 14, 4, waveform
       04 03       
04016B 17 00 85 0F 0124       db 23, 0, $85, 15, 4, waveform
       04 03       
040171 17 00 85 10 0125       db 23, 0, $85, 16, 4, waveform
       04 03       
040177 17 00 85 11 0126       db 23, 0, $85, 17, 4, waveform
       04 03       
04017D 17 00 85 12 0127       db 23, 0, $85, 18, 4, waveform
       04 03       
040183 17 00 85 13 0128       db 23, 0, $85, 19, 4, waveform
       04 03       
040189 17 00 85 14 0129       db 23, 0, $85, 20, 4, waveform
       04 03       
04018F 17 00 85 15 0130       db 23, 0, $85, 21, 4, waveform
       04 03       
040195 17 00 85 16 0131       db 23, 0, $85, 22, 4, waveform
       04 03       
04019B 17 00 85 17 0132       db 23, 0, $85, 23, 4, waveform
       04 03       
0401A1 17 00 85 18 0133       db 23, 0, $85, 24, 4, waveform
       04 03       
0401A7 17 00 85 19 0134       db 23, 0, $85, 25, 4, waveform
       04 03       
0401AD 17 00 85 1A 0135       db 23, 0, $85, 26, 4, waveform
       04 03       
0401B3 17 00 85 1B 0136       db 23, 0, $85, 27, 4, waveform
       04 03       
0401B9 17 00 85 1C 0137       db 23, 0, $85, 28, 4, waveform
       04 03       
0401BF 17 00 85 1D 0138       db 23, 0, $85, 29, 4, waveform
       04 03       
0401C5 17 00 85 1E 0139       db 23, 0, $85, 30, 4, waveform
       04 03       
0401CB 17 00 85 1F 0140       db 23, 0, $85, 31, 4, waveform
       04 03       
0401D1             0141   waveform_channels_end:
0401D1             0142   
0401D1 3E 03       0143       ld a,3
0401D3 CD FB 07 04 0144       call vdu_set_screen_mode
0401D7             0145   
0401D7 CD 72 09 04 0146       call cursor_off
0401DB CD 6E 07 04 0147       call vdu_cls
0401DF C9          0148       ret
0401E0             0149   
0401E0             0150       include "organ/src/asm/functions.asm"
0401E0             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
0401E0             0002*  ; Print a zero-terminated string
0401E0             0003*  ; HL: Pointer to string
0401E0             0004*  printString:
0401E0 C5          0005*  	PUSH	BC
0401E1 01 00 00 00 0006*  	LD		BC,0
0401E5 3E 00       0007*  	LD 	 	A,0
0401E7 5B DF       0008*  	RST.LIL 18h
0401E9 C1          0009*  	POP		BC
0401EA C9          0010*  	RET
0401EB             0011*  ; print a VDU sequence
0401EB             0012*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
0401EB             0013*  sendVDUsequence:
0401EB C5          0014*  	PUSH	BC
0401EC 01 00 00 00 0015*  	LD		BC, 0
0401F0 4E          0016*  	LD		C, (HL)
0401F1 5B DF       0017*  	RST.LIL	18h
0401F3 C1          0018*  	POP		BC
0401F4 C9          0019*  	RET
0401F5             0020*  ; Print Newline sequence to VDP
0401F5             0021*  printNewline:
0401F5 3E 0D       0022*  	LD	A, '\r'
0401F7 5B D7       0023*  	RST.LIL 10h
0401F9 3E 0A       0024*  	LD	A, '\n'
0401FB 5B D7       0025*  	RST.LIL 10h
0401FD C9          0026*  	RET
0401FE             0027*  ; Print a 24-bit HEX number
0401FE             0028*  ; HLU: Number to print
0401FE             0029*  printHex24:
0401FE E5          0030*  	PUSH	HL
0401FF 21 02 00 00 0031*  	LD		HL, 2
040203 39          0032*  	ADD		HL, SP
040204 7E          0033*  	LD		A, (HL)
040205 E1          0034*  	POP		HL
040206 CD 10 02 04 0035*  	CALL	printHex8
04020A             0036*  ; Print a 16-bit HEX number
04020A             0037*  ; HL: Number to print
04020A             0038*  printHex16:
04020A 7C          0039*  	LD		A,H
04020B CD 10 02 04 0040*  	CALL	printHex8
04020F 7D          0041*  	LD		A,L
040210             0042*  ; Print an 8-bit HEX number
040210             0043*  ; A: Number to print
040210             0044*  printHex8:
040210 4F          0045*  	LD		C,A
040211 1F          0046*  	RRA
040212 1F          0047*  	RRA
040213 1F          0048*  	RRA
040214 1F          0049*  	RRA
040215 CD 1A 02 04 0050*  	CALL	@F
040219 79          0051*  	LD		A,C
04021A             0052*  @@:
04021A E6 0F       0053*  	AND		0Fh
04021C C6 90       0054*  	ADD		A,90h
04021E 27          0055*  	DAA
04021F CE 40       0056*  	ADC		A,40h
040221 27          0057*  	DAA
040222 5B D7       0058*  	RST.LIL	10h
040224 C9          0059*  	RET
040225             0060*  
040225             0061*  ; Print a 0x HEX prefix
040225             0062*  DisplayHexPrefix:
040225 3E 30       0063*  	LD	A, '0'
040227 5B D7       0064*  	RST.LIL 10h
040229 3E 78       0065*  	LD	A, 'x'
04022B 5B D7       0066*  	RST.LIL 10h
04022D C9          0067*  	RET
04022E             0068*  
04022E             0069*  ; Prints the decimal value in HL without leading zeroes
04022E             0070*  ; HL : Value to print
04022E             0071*  printDec:
04022E 11 3F 02 04 0072*  	LD	 DE, _printDecBuffer
040232 CD 48 02 04 0073*  	CALL Num2String
040236 21 3F 02 04 0074*  	LD	 HL, _printDecBuffer
04023A CD E0 01 04 0075*  	CALL printString
04023E C9          0076*  	RET
04023F 00 00 00 00 0077*  _printDecBuffer: blkb 9,0 ; nine bytes full of zeroes
       00 00 00 00 
       00          
040248             0078*  
040248             0079*  ; This routine converts the value from HL into it's ASCII representation,
040248             0080*  ; starting to memory location pointing by DE, in decimal form and with trailing zeroes
040248             0081*  ; so it will allways be 5 characters length
040248             0082*  ; HL : Value to convert to string
040248             0083*  ; DE : pointer to buffer, at least 8 byte + 0
040248             0084*  Num2String:
040248 01 80 69 67 0085*  	LD	 BC,-10000000
04024C CD 7F 02 04 0086*  	CALL OneDigit
040250 01 C0 BD F0 0087*  	LD	 BC,-1000000
040254 CD 7F 02 04 0088*  	CALL OneDigit
040258 01 60 79 FE 0089*  	LD	 BC,-100000
04025C CD 7F 02 04 0090*  	CALL OneDigit
040260 01 F0 D8 FF 0091*  	LD   BC,-10000
040264 CD 7F 02 04 0092*  	CALL OneDigit
040268 01 18 FC FF 0093*  	LD   BC,-1000
04026C CD 7F 02 04 0094*  	CALL OneDigit
040270 01 9C FF FF 0095*  	LD   BC,-100
040274 CD 7F 02 04 0096*  	CALL OneDigit
040278 0E F6       0097*  	LD   C,-10
04027A CD 7F 02 04 0098*  	CALL OneDigit
04027E 48          0099*  	LD   C,B
04027F             0100*  OneDigit:
04027F 3E 2F       0101*  	LD   A,'0'-1
040281             0102*  DivideMe:
040281 3C          0103*  	INC  A
040282 09          0104*  	ADD  HL,BC
040283 38 FC       0105*  	JR   C,DivideMe
040285 ED 42       0106*  	SBC  HL,BC
040287 12          0107*  	LD   (DE),A
040288 13          0108*  	INC  DE
040289 C9          0109*  	RET
04028A             0110*  
04028A             0111*  ; #### new functions added by Brandon R. Gates ####
04028A             0112*  
04028A             0113*  ; print the binary representation of the 8-bit value in a
04028A             0114*  ; destroys a, hl, bc
04028A             0115*  printBin8:
04028A 06 08       0116*      ld b,8      ; loop counter for 8 bits
04028C 21 A7 02 04 0117*      ld hl,@cmd  ; set hl to the low byte of the output string
040290             0118*                  ; (which will be the high bit of the value in a)
040290             0119*  @loop:
040290 07          0120*      rlca ; put the next highest bit into carry
040291 38 04       0121*      jr c,@one
040293 36 30       0122*      ld (hl),'0'
040295 18 02       0123*      jr @next_bit
040297             0124*  @one:
040297 36 31       0125*      ld (hl),'1'
040299             0126*  @next_bit:
040299 23          0127*      inc hl
04029A 10 F4       0128*      djnz @loop
04029C             0129*  ; print it
04029C 21 A7 02 04 0130*  	ld hl,@cmd
0402A0 01 08 00 00 0131*  	ld bc,@end-@cmd
0402A4 5B DF       0132*  	rst.lil $18
0402A6 C9          0133*  	ret
0402A7             0134*  @cmd: ds 8 ; eight bytes for eight bits
0402AF             0135*  @end:
0402AF             0136*  
0402AF             0137*  ; print the binary representation of the 8-bit value in a
0402AF             0138*  ; in reverse order (lsb first)
0402AF             0139*  ; destroys a, hl, bc
0402AF             0140*  printBin8Rev:
0402AF 06 08       0141*      ld b,8      ; loop counter for 8 bits
0402B1 21 CC 02 04 0142*      ld hl,@cmd  ; set hl to the low byte of the output string
0402B5             0143*                  ; (which will be the high bit of the value in a)
0402B5             0144*  @loop:
0402B5 0F          0145*      rrca ; put the next lowest bit into carry
0402B6 38 04       0146*      jr c,@one
0402B8 36 30       0147*      ld (hl),'0'
0402BA 18 02       0148*      jr @next_bit
0402BC             0149*  @one:
0402BC 36 31       0150*      ld (hl),'1'
0402BE             0151*  @next_bit:
0402BE 23          0152*      inc hl
0402BF 10 F4       0153*      djnz @loop
0402C1             0154*  ; print it
0402C1 21 CC 02 04 0155*  	ld hl,@cmd
0402C5 01 08 00 00 0156*  	ld bc,@end-@cmd
0402C9 5B DF       0157*  	rst.lil $18
0402CB C9          0158*  	ret
0402CC             0159*  @cmd: ds 8 ; eight bytes for eight bits
0402D4             0160*  @end:
0402D4             0161*  
0402D4             0162*  ; print registers to screen in hexidecimal format
0402D4             0163*  ; inputs: none
0402D4             0164*  ; outputs: values of every register printed to screen
0402D4             0165*  ;    values of each register in global scratch memory
0402D4             0166*  ; destroys: nothing
0402D4             0167*  stepRegistersHex:
0402D4             0168*  ; store everything in scratch
0402D4 22 D3 04 04 0169*      ld (uhl),hl
0402D8 ED 43 D6 04 0170*      ld (ubc),bc
       04          
0402DD ED 53 D9 04 0171*      ld (ude),de
       04          
0402E2 DD 22 DC 04 0172*      ld (uix),ix
       04          
0402E7 FD 22 DF 04 0173*      ld (uiy),iy
       04          
0402EC F5          0174*      push af ; fml
0402ED E1          0175*      pop hl  ; thanks, zilog
0402EE 22 D0 04 04 0176*      ld (uaf),hl
0402F2 F5          0177*      push af ; dammit
0402F3             0178*  
0402F3             0179*  ; home the cursor
0402F3 CD A6 08 04 0180*      call vdu_home_cursor
0402F7             0181*  
0402F7             0182*  ; print each register
0402F7 21 5C 04 04 0183*      ld hl,str_afu
0402FB CD E0 01 04 0184*      call printString
0402FF 2A D0 04 04 0185*      ld hl,(uaf)
040303 CD FE 01 04 0186*      call printHex24
040307 CD F5 01 04 0187*      call printNewline
04030B             0188*  
04030B 21 60 04 04 0189*      ld hl,str_hlu
04030F CD E0 01 04 0190*      call printString
040313 2A D3 04 04 0191*      ld hl,(uhl)
040317 CD FE 01 04 0192*      call printHex24
04031B CD F5 01 04 0193*      call printNewline
04031F             0194*  
04031F 21 64 04 04 0195*      ld hl,str_bcu
040323 CD E0 01 04 0196*      call printString
040327 2A D6 04 04 0197*      ld hl,(ubc)
04032B CD FE 01 04 0198*      call printHex24
04032F CD F5 01 04 0199*      call printNewline
040333             0200*  
040333 21 68 04 04 0201*      ld hl,str_deu
040337 CD E0 01 04 0202*      call printString
04033B 2A D9 04 04 0203*      ld hl,(ude)
04033F CD FE 01 04 0204*      call printHex24
040343 CD F5 01 04 0205*      call printNewline
040347             0206*  
040347 21 6C 04 04 0207*      ld hl,str_ixu
04034B CD E0 01 04 0208*      call printString
04034F 2A DC 04 04 0209*      ld hl,(uix)
040353 CD FE 01 04 0210*      call printHex24
040357 CD F5 01 04 0211*      call printNewline
04035B             0212*  
04035B 21 70 04 04 0213*      ld hl,str_iyu
04035F CD E0 01 04 0214*      call printString
040363 2A DF 04 04 0215*      ld hl,(uiy)
040367 CD FE 01 04 0216*      call printHex24
04036B CD F5 01 04 0217*      call printNewline
04036F             0218*  
04036F             0219*      ; call vsync
04036F             0220*  
04036F CD F5 01 04 0221*      call printNewline
040373             0222*  
040373             0223*  ; check for escape key and quit if pressed
040373             0224*  	MOSCALL mos_getkbmap
040373 3E 1E       0001*M 			LD	A, function
040375 5B CF       0002*M 			RST.LIL	08h
040377             0225*  @stayhere:
040377             0226*  ; 113 Escape
040377 DD CB 0E 46 0227*      bit 0,(ix+14)
04037B 20 02       0228*      jr nz,@Escape
04037D 18 F8       0229*  	jr @stayhere
04037F             0230*  @Escape:
04037F DD CB 0E 86 0231*      res 0,(ix+14) ; debounce the key (hopefully)
040383 3E 80       0232*      ld a,%10000000
040385 CD CB 06 04 0233*      call multiPurposeDelay
040389             0234*  
040389             0235*  ; restore everything
040389 2A D3 04 04 0236*      ld hl, (uhl)
04038D ED 4B D6 04 0237*      ld bc, (ubc)
       04          
040392 ED 5B D9 04 0238*      ld de, (ude)
       04          
040397 DD 2A DC 04 0239*      ld ix, (uix)
       04          
04039C FD 2A DF 04 0240*      ld iy, (uiy)
       04          
0403A1 F1          0241*      pop af
0403A2             0242*  ; all done
0403A2 C9          0243*      ret
0403A3             0244*  
0403A3             0245*  ; print registers to screen in hexidecimal format
0403A3             0246*  ; inputs: none
0403A3             0247*  ; outputs: values of every register printed to screen
0403A3             0248*  ;    values of each register in global scratch memory
0403A3             0249*  ; destroys: nothing
0403A3             0250*  dumpRegistersHex:
0403A3             0251*  ; store everything in scratch
0403A3 22 D3 04 04 0252*      ld (uhl),hl
0403A7 ED 43 D6 04 0253*      ld (ubc),bc
       04          
0403AC ED 53 D9 04 0254*      ld (ude),de
       04          
0403B1 DD 22 DC 04 0255*      ld (uix),ix
       04          
0403B6 FD 22 DF 04 0256*      ld (uiy),iy
       04          
0403BB F5          0257*      push af ; fml
0403BC E1          0258*      pop hl  ; thanks, zilog
0403BD 22 D0 04 04 0259*      ld (uaf),hl
0403C1 F5          0260*      push af ; dammit
0403C2             0261*  
0403C2             0262*  ; home the cursor
0403C2             0263*      ; call vdu_home_cursor
0403C2             0264*  
0403C2             0265*  ; print each register
0403C2 21 5C 04 04 0266*      ld hl,str_afu
0403C6 CD E0 01 04 0267*      call printString
0403CA 2A D0 04 04 0268*      ld hl,(uaf)
0403CE CD FE 01 04 0269*      call printHex24
0403D2 CD F5 01 04 0270*      call printNewline
0403D6             0271*  
0403D6 21 60 04 04 0272*      ld hl,str_hlu
0403DA CD E0 01 04 0273*      call printString
0403DE 2A D3 04 04 0274*      ld hl,(uhl)
0403E2 CD FE 01 04 0275*      call printHex24
0403E6 CD F5 01 04 0276*      call printNewline
0403EA             0277*  
0403EA 21 64 04 04 0278*      ld hl,str_bcu
0403EE CD E0 01 04 0279*      call printString
0403F2 2A D6 04 04 0280*      ld hl,(ubc)
0403F6 CD FE 01 04 0281*      call printHex24
0403FA CD F5 01 04 0282*      call printNewline
0403FE             0283*  
0403FE 21 68 04 04 0284*      ld hl,str_deu
040402 CD E0 01 04 0285*      call printString
040406 2A D9 04 04 0286*      ld hl,(ude)
04040A CD FE 01 04 0287*      call printHex24
04040E CD F5 01 04 0288*      call printNewline
040412             0289*  
040412 21 6C 04 04 0290*      ld hl,str_ixu
040416 CD E0 01 04 0291*      call printString
04041A 2A DC 04 04 0292*      ld hl,(uix)
04041E CD FE 01 04 0293*      call printHex24
040422 CD F5 01 04 0294*      call printNewline
040426             0295*  
040426 21 70 04 04 0296*      ld hl,str_iyu
04042A CD E0 01 04 0297*      call printString
04042E 2A DF 04 04 0298*      ld hl,(uiy)
040432 CD FE 01 04 0299*      call printHex24
040436 CD F5 01 04 0300*      call printNewline
04043A             0301*  
04043A CD 80 09 04 0302*      call vdu_vblank
04043E             0303*  
04043E CD F5 01 04 0304*      call printNewline
040442             0305*  ; restore everything
040442 2A D3 04 04 0306*      ld hl, (uhl)
040446 ED 4B D6 04 0307*      ld bc, (ubc)
       04          
04044B ED 5B D9 04 0308*      ld de, (ude)
       04          
040450 DD 2A DC 04 0309*      ld ix, (uix)
       04          
040455 FD 2A DF 04 0310*      ld iy, (uiy)
       04          
04045A F1          0311*      pop af
04045B             0312*  ; all done
04045B C9          0313*      ret
04045C             0314*  
04045C 61 66 3D 00 0315*  str_afu: db "af=",0
040460 68 6C 3D 00 0316*  str_hlu: db "hl=",0
040464 62 63 3D 00 0317*  str_bcu: db "bc=",0
040468 64 65 3D 00 0318*  str_deu: db "de=",0
04046C 69 78 3D 00 0319*  str_ixu: db "ix=",0
040470 69 79 3D 00 0320*  str_iyu: db "iy=",0
040474             0321*  
040474             0322*  ; print udeuhl to screen in hexidecimal format
040474             0323*  ; inputs: none
040474             0324*  ; outputs: concatenated hexidecimal udeuhl
040474             0325*  ; destroys: nothing
040474             0326*  dumpUDEUHLHex:
040474             0327*  ; store everything in scratch
040474 22 D3 04 04 0328*      ld (uhl),hl
040478 ED 43 D6 04 0329*      ld (ubc),bc
       04          
04047D ED 53 D9 04 0330*      ld (ude),de
       04          
040482 DD 22 DC 04 0331*      ld (uix),ix
       04          
040487 FD 22 DF 04 0332*      ld (uiy),iy
       04          
04048C F5          0333*      push af
04048D             0334*  
04048D             0335*  ; print each register
04048D             0336*  
04048D 21 C7 04 04 0337*      ld hl,str_udeuhl
040491 CD E0 01 04 0338*      call printString
040495 2A D9 04 04 0339*      ld hl,(ude)
040499 CD FE 01 04 0340*      call printHex24
04049D 3E 2E       0341*  	ld a,'.'	; print a dot to separate the values
04049F 5B D7       0342*  	rst.lil 10h
0404A1 2A D3 04 04 0343*      ld hl,(uhl)
0404A5 CD FE 01 04 0344*      call printHex24
0404A9 CD F5 01 04 0345*      call printNewline
0404AD             0346*  
0404AD             0347*  ; restore everything
0404AD 2A D3 04 04 0348*      ld hl, (uhl)
0404B1 ED 4B D6 04 0349*      ld bc, (ubc)
       04          
0404B6 ED 5B D9 04 0350*      ld de, (ude)
       04          
0404BB DD 2A DC 04 0351*      ld ix, (uix)
       04          
0404C0 FD 2A DF 04 0352*      ld iy, (uiy)
       04          
0404C5 F1          0353*      pop af
0404C6             0354*  ; all done
0404C6 C9          0355*      ret
0404C7             0356*  
0404C7 75 64 65 2E 0357*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
0404D0             0358*  
0404D0             0359*  ; global scratch memory for registers
0404D0 00 00 00    0360*  uaf: dl 0
0404D3 00 00 00    0361*  uhl: dl 0
0404D6 00 00 00    0362*  ubc: dl 0
0404D9 00 00 00    0363*  ude: dl 0
0404DC 00 00 00    0364*  uix: dl 0
0404DF 00 00 00    0365*  uiy: dl 0
0404E2 00 00 00    0366*  usp: dl 0
0404E5 00 00 00    0367*  upc: dl 0
0404E8             0368*  
0404E8             0369*  ; inputs: whatever is in the flags register
0404E8             0370*  ; outputs: binary representation of flags
0404E8             0371*  ;          with a header so we know which is what
0404E8             0372*  ; destroys: nothing
0404E8             0373*  ; preserves: everything
0404E8             0374*  dumpFlags:
0404E8             0375*  ; first we curse zilog for not giving direct access to flags
0404E8 F5          0376*      push af ; this is so we can send it back unharmed
0404E9 F5          0377*      push af ; this is so we can pop it to hl
0404EA             0378*  ; store everything in scratch
0404EA 22 D3 04 04 0379*      ld (uhl),hl
0404EE ED 43 D6 04 0380*      ld (ubc),bc
       04          
0404F3 ED 53 D9 04 0381*      ld (ude),de
       04          
0404F8 DD 22 DC 04 0382*      ld (uix),ix
       04          
0404FD FD 22 DF 04 0383*      ld (uiy),iy
       04          
040502             0384*  ; next we print the header
040502 21 2E 05 04 0385*      ld hl,@header
040506 CD E0 01 04 0386*      call printString
04050A E1          0387*      pop hl ; flags are now in l
04050B 7D          0388*      ld a,l ; flags are now in a
04050C CD 8A 02 04 0389*      call printBin8
040510 CD F5 01 04 0390*  	call printNewline
040514             0391*  ; restore everything
040514 2A D3 04 04 0392*      ld hl, (uhl)
040518 ED 4B D6 04 0393*      ld bc, (ubc)
       04          
04051D ED 5B D9 04 0394*      ld de, (ude)
       04          
040522 DD 2A DC 04 0395*      ld ix, (uix)
       04          
040527 FD 2A DF 04 0396*      ld iy, (uiy)
       04          
04052C F1          0397*      pop af ; send her home the way she came
04052D C9          0398*      ret
04052E             0399*  ; Bit 7 (S): Sign flag
04052E             0400*  ; Bit 6 (Z): Zero flag
04052E             0401*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
04052E             0402*  ; Bit 4 (H): Half Carry flag
04052E             0403*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
04052E             0404*  ; Bit 2 (PV): Parity/Overflow flag
04052E             0405*  ; Bit 1 (N): Subtract flag
04052E             0406*  ; Bit 0 (C): Carry flag
04052E 53 5A 78 48 0407*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
040539             0408*  
040539             0409*  ; set all the bits in the flag register
040539             0410*  ; more of an academic exercise than anything useful
040539             0411*  ; inputs; none
040539             0412*  ; outputs; a=0,f=255
040539             0413*  ; destroys: flags, hl
040539             0414*  ; preserves: a, because why not
040539             0415*  setAllFlags:
040539 21 FF 00 00 0416*      ld hl,255
04053D 67          0417*      ld h,a ; four cycles to preserve a is cheap
04053E E5          0418*      push hl
04053F F1          0419*      pop af
040540 C9          0420*      ret
040541             0421*  
040541             0422*  ; reset all the bits in the flag register
040541             0423*  ; unlike its inverse counterpart, this may actually be useful
040541             0424*  ; inputs; none
040541             0425*  ; outputs; a=0,f=0
040541             0426*  ; destroys: flags, hl
040541             0427*  ; preserves: a, because why not
040541             0428*  resetAllFlags:
040541 21 00 00 00 0429*      ld hl,0
040545 67          0430*      ld h,a ; four cycles to preserve a is cheap
040546 E5          0431*      push hl
040547 F1          0432*      pop af
040548 C9          0433*      ret
040549             0434*  
040549             0435*  
040549             0436*  ; print bytes from an address to the screen in hexidecimal format
040549             0437*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040549             0438*  ; outputs: values of each byte printed to screen separated by spaces
040549             0439*  ; destroys: nothing
040549             0440*  dumpMemoryHex:
040549             0441*  ; save all registers to the stack
040549 F5          0442*      push af
04054A C5          0443*      push bc
04054B D5          0444*      push de
04054C E5          0445*      push hl
04054D DD E5       0446*      push ix
04054F FD E5       0447*      push iy
040551             0448*  
040551             0449*  ; set b to be our loop counter
040551 47          0450*      ld b,a
040552             0451*  @loop:
040552             0452*  ; print the byte
040552 7E          0453*      ld a,(hl)
040553 CD 10 02 04 0454*      call printHex8
040557             0455*  ; print a space
040557 3E 20       0456*      ld a,' '
040559 5B D7       0457*      rst.lil 10h
04055B 23          0458*      inc hl
04055C 10 F4       0459*      djnz @loop
04055E CD F5 01 04 0460*      call printNewline
040562             0461*  
040562             0462*  ; restore everything
040562 FD E1       0463*      pop iy
040564 DD E1       0464*      pop ix
040566 E1          0465*      pop hl
040567 D1          0466*      pop de
040568 C1          0467*      pop bc
040569 F1          0468*      pop af
04056A             0469*  ; all done
04056A C9          0470*      ret
04056B             0471*  
04056B             0472*  
04056B             0473*  ; print bytes from an address to the screen in binary format
04056B             0474*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04056B             0475*  ; outputs: values of each byte printed to screen separated by spaces
04056B             0476*  ; destroys: nothing
04056B             0477*  dumpMemoryBin:
04056B             0478*  ; save all registers to the stack
04056B F5          0479*      push af
04056C C5          0480*      push bc
04056D D5          0481*      push de
04056E E5          0482*      push hl
04056F DD E5       0483*      push ix
040571 FD E5       0484*      push iy
040573             0485*  
040573             0486*  ; set b to be our loop counter
040573 47          0487*      ld b,a
040574             0488*  @loop:
040574             0489*  ; print the byte
040574 7E          0490*      ld a,(hl)
040575 E5          0491*      push hl
040576 C5          0492*      push bc
040577 CD 8A 02 04 0493*      call printBin8
04057B C1          0494*      pop bc
04057C             0495*  ; print a space
04057C 3E 20       0496*      ld a,' '
04057E 5B D7       0497*      rst.lil 10h
040580 E1          0498*      pop hl
040581 23          0499*      inc hl
040582 10 F0       0500*      djnz @loop
040584 CD F5 01 04 0501*      call printNewline
040588             0502*  
040588             0503*  ; restore everything
040588 FD E1       0504*      pop iy
04058A DD E1       0505*      pop ix
04058C E1          0506*      pop hl
04058D D1          0507*      pop de
04058E C1          0508*      pop bc
04058F F1          0509*      pop af
040590             0510*  ; all done
040590 C9          0511*      ret
040591             0512*  
040591             0513*  ; print bytes from an address to the screen in binary format
040591             0514*  ; with the bits of each byte in reverse order (lsb first)
040591             0515*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040591             0516*  ; outputs: values of each byte printed to screen separated by spaces
040591             0517*  ; destroys: nothing
040591             0518*  dumpMemoryBinRev:
040591             0519*  ; save all registers to the stack
040591 F5          0520*      push af
040592 C5          0521*      push bc
040593 D5          0522*      push de
040594 E5          0523*      push hl
040595 DD E5       0524*      push ix
040597 FD E5       0525*      push iy
040599             0526*  
040599             0527*  ; set b to be our loop counter
040599 47          0528*      ld b,a
04059A             0529*  @loop:
04059A             0530*  ; print the byte
04059A 7E          0531*      ld a,(hl)
04059B E5          0532*      push hl
04059C C5          0533*      push bc
04059D CD AF 02 04 0534*      call printBin8Rev
0405A1 C1          0535*      pop bc
0405A2             0536*  ; print a space
0405A2 3E 20       0537*      ld a,' '
0405A4 5B D7       0538*      rst.lil 10h
0405A6 E1          0539*      pop hl
0405A7 23          0540*      inc hl
0405A8 10 F0       0541*      djnz @loop
0405AA CD F5 01 04 0542*      call printNewline
0405AE             0543*  
0405AE             0544*  ; restore everything
0405AE FD E1       0545*      pop iy
0405B0 DD E1       0546*      pop ix
0405B2 E1          0547*      pop hl
0405B3 D1          0548*      pop de
0405B4 C1          0549*      pop bc
0405B5 F1          0550*      pop af
0405B6             0551*  ; all done
0405B6 C9          0552*      ret
0405B7             0151       include "organ/src/asm/timer.asm"
0405B7             0001*  ; Table 32. Timer Control Registers
0405B7             0002*  ; this constant is the base address of the timer control registers
0405B7             0003*  ; each timer takes three bytes:
0405B7             0004*  ;   0: control register
0405B7             0005*  ;   1: low byte of timer reset value
0405B7             0006*  ;   2: high byte of timer reset value
0405B7             0007*  ; note that the value is only 8-bits, so we use in0/out0 i/o calls,
0405B7             0008*  ; which correctly force the high and upper bytes of the address bus to zero
0405B7             0009*  TMR_CTL:     equ 80h
0405B7             0010*  
0405B7             0011*  ; Timer Control Register Bit Definitions
0405B7             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0405B7             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
0405B7             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0405B7             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
0405B7             0016*                              ; the TMRx_CTL register is read.
0405B7             0017*  
0405B7             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0405B7             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0405B7             0020*  
0405B7             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0405B7             0022*                              ;  0, and counting stops when the end-of-count value is reached.
0405B7             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0405B7             0024*                              ; written to the counter when the end-of-count value is reached.
0405B7             0025*  
0405B7             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0405B7             0027*  CLK_DIV_256:  equ %00001100 ;
0405B7             0028*  CLK_DIV_64:   equ %00001000 ;
0405B7             0029*  CLK_DIV_16:   equ %00000100 ;
0405B7             0030*  CLK_DIV_4:    equ %00000000 ;
0405B7             0031*  
0405B7             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0405B7             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0405B7             0034*                              ; When a 1 is written to this bit, the values in the reload registers
0405B7             0035*                              ;  are loaded into the downcounter when the timer restarts. The
0405B7             0036*                              ; programmer must ensure that this bit is set to 1 each time
0405B7             0037*                              ; SINGLE-PASS mode is used.
0405B7             0038*  
0405B7             0039*  ; disable/enable the programmable reload timer
0405B7             0040*  PRT_EN_0:     equ %00000000 ;
0405B7             0041*  PRT_EN_1:     equ %00000001 ;
0405B7             0042*  
0405B7             0043*  ; Table 37. Timer Input Source Select Register
0405B7             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
0405B7             0045*  ; in little-endian order, with TMR0 using bits 0 and 1, TMR1 using bits 2 and 3, etc.
0405B7             0046*  ;   00: System clock / CLK_DIV
0405B7             0047*  ;   01: RTC / CLK_DIV
0405B7             0048*  ;   NOTE: these are the values given in the manual, but it may be a typo
0405B7             0049*  ;   10: GPIO port B pin 1.
0405B7             0050*  ;   11: GPIO port B pin 1.
0405B7             0051*  TMR_ISS:   equ 92h ; register address
0405B7             0052*  
0405B7             0053*  ; Table 51. Real-Time Clock Control Register
0405B7             0054*  RTC_CTRL: equ EDh ; register address
0405B7             0055*  
0405B7             0056*  ; alarm interrupt disable/enable
0405B7             0057*  RTC_ALARM_0:    equ %00000000
0405B7             0058*  RTC_ALARM_1:    equ %10000000
0405B7             0059*  
0405B7             0060*  ; interrupt on alarm disable/enable
0405B7             0061*  RTC_INT_ENT_0:  equ %00000000
0405B7             0062*  RTC_INT_ENT_1:  equ %01000000
0405B7             0063*  
0405B7             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0405B7             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0405B7             0066*  
0405B7             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0405B7             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
0405B7             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0405B7             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
0405B7             0071*  
0405B7             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0405B7             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0405B7             0074*  
0405B7             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0405B7             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0405B7             0077*  
0405B7             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0405B7             0079*                                  ; RTC counter is enabled.
0405B7             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0405B7             0081*                                  ; RTC counter is disabled.
0405B7             0082*  
0405B7             0083*  ; returns 0 if running on hardware, 1 if running on emulator
0405B7             0084*  prt_calibrate:
0405B7             0085*  ; set a MOS timer
0405B7 21 78 00 00 0086*      ld hl,120*1 ; 1 second
0405BB FD 21 C5 06 0087*      ld iy,timer_test
       04          
0405C0 CD A3 06 04 0088*      call timer_set
0405C4             0089*  ; set a PRT timer
0405C4 21 E8 03 00 0090*      ld hl,1000
0405C8 22 47 06 04 0091*      ld (prt_reload),hl
0405CC CD 52 06 04 0092*      call prt_set
0405D0             0093*  @loop:
0405D0             0094*  ; check time remaining on MOS timer
0405D0 CD B1 06 04 0095*      call timer_get
0405D4 CA DE 05 04 0096*      jp z,@done ; time expired, so quit
0405D8 FA DE 05 04 0097*      jp m,@done ; time past expiration (negative), so quit
0405DC 18 F2       0098*      jr @loop
0405DE             0099*  @done:
0405DE 01 00 12 00 0100*      ld bc,0x1200 ; default value for running on hardware
0405E2 ED 43 47 06 0101*      ld (prt_reload),bc
       04          
0405E7 ED 5B 98 06 0102*      ld de,(prt_irq_counter)
       04          
0405EC 21 66 0F 00 0103*      ld hl,3942 ; halfway between 4608 for real hardware and 3276 for emulator
0405F0 AF          0104*      xor a; clear carry, zero is default value for running on hardware
0405F1 ED 52       0105*      sbc hl,de
0405F3 21 31 06 04 0106*      ld hl,on_hardware ; default message for running on hardware
0405F7 F8          0107*      ret m ; negative result means we're on hardware
0405F8 3C          0108*      inc a ; we're on emulator
0405F9 01 CC 0C 00 0109*      ld bc,0x0CCC
0405FD ED 43 47 06 0110*      ld (prt_reload),bc
       04          
040602 21 1B 06 04 0111*      ld hl,on_emulator
040606 C9          0112*      ret
040607             0113*  
040607 43 61 6C 69 0114*  calibrating_timer: defb "Calibrating timer\r\n",0
       62 72 61 74 
       69 6E 67 20 
       74 69 6D 65 
       72 0D 0A 00 
04061B 52 75 6E 6E 0115*  on_emulator: defb "Running on emulator\r\n",0
       69 6E 67 20 
       6F 6E 20 65 
       6D 75 6C 61 
       74 6F 72 0D 
       0A 00       
040631 52 75 6E 6E 0116*  on_hardware: defb "Running on hardware\r\n",0
       69 6E 67 20 
       6F 6E 20 68 
       61 72 64 77 
       61 72 65 0D 
       0A 00       
040647             0117*  
040647             0118*  ; 3276d = 1,000 milliseconds on emulator
040647             0119*  ; 1200h = 1,000 milliseconds on hardware
040647 00 00 00    0120*  prt_reload: dl 0x000000
04064A             0121*  prt_reload_str: ds 8
040652             0122*  
040652             0123*  ; set PRT timer
040652             0124*  prt_set:
040652             0125*  ; set PRT reload value
040652 2A 47 06 04 0126*      ld hl, (prt_reload)
040656 ED 29 84    0127*      out0 ($84), l
040659 ED 21 85    0128*  	out0 ($85), h
04065C             0129*  ; enable PRT, with interrupt and CONTINUOUS mode, clock divider 4
04065C 3E 53       0130*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_4 | RST_EN_1 | PRT_EN_1 ; 0x53
04065E ED 39 83    0131*  	out0 ($83), a
040661 C9          0132*      ret
040662             0133*  
040662             0134*  ; ===============================================
040662             0135*  ; PRT Timer Interrupt Handling
040662             0136*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.asm
040662             0137*  ; -----------------------------------------------
040662             0138*  prt_irq_init:
040662             0139*      ; set up interrupt vector table 2
040662 21 00 00 00 0140*  	ld hl, 0
040666 3A 0C 01 00 0141*  	ld a,($10c)
04066A 6F          0142*  	ld l, a
04066B 3A 0D 01 00 0143*  	ld a,($10d)
04066F 67          0144*  	ld h, a
040670             0145*  
040670             0146*  	; skip over CALL ($c3)
040670 23          0147*  	inc hl
040671             0148*  	; load address of jump into vector table 2 (in ram)
040671 ED 27       0149*  	ld hl,(hl)
040673             0150*  
040673             0151*  	; write CALL prt_irq_handler to vector table 2
040673 3E C3       0152*  	ld a, $c3
040675 77          0153*  	ld (hl), a
040676 23          0154*  	inc hl
040677 11 7E 06 04 0155*  	ld de, prt_irq_handler
04067B ED 1F       0156*  	ld (hl), de
04067D             0157*  
04067D C9          0158*      ret
04067E             0159*  
04067E             0160*  prt_irq_handler:
04067E F3          0161*  	di
04067F F5          0162*  	push af
040680 E5          0163*      push hl
040681 ED 38 83    0164*  	in0 a,($83)
040684 32 97 06 04 0165*  	ld (prt_got_irq),a
040688 2A 98 06 04 0166*  	ld hl,(prt_irq_counter)
04068C 23          0167*  	inc hl
04068D 22 98 06 04 0168*  	ld (prt_irq_counter),hl
040691 E1          0169*      pop hl
040692 F1          0170*  	pop af
040693 FB          0171*  	ei
040694 5B ED 4D    0172*  	reti.l
040697             0173*  
040697             0174*  prt_got_irq:
040697 00          0175*  	.db 0
040698             0176*  prt_irq_counter:
040698 00 00 00    0177*  	.dl 0
04069B             0178*  prt_irq_counter_str: ds 8
0406A3             0179*  
0406A3             0180*  ; ===============================================
0406A3             0181*  ; Timer functions
0406A3             0182*  ; -----------------------------------------------
0406A3             0183*  ; set a countdown timer
0406A3             0184*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time, iy+3 = pointer to 3-byte buffer holding timer set value
0406A3             0185*  ; returns: hl = current time
0406A3             0186*  timer_set:
0406A3 FD 2F 03    0187*      ld (iy+3),hl            ; set time remaining
0406A6             0188*      MOSCALL mos_sysvars     ; ix points to syvars table
0406A6 3E 08       0001*M 			LD	A, function
0406A8 5B CF       0002*M 			RST.LIL	08h
0406AA DD 27 00    0189*      ld hl,(ix+sysvar_time)  ; get current time
0406AD FD 2F 00    0190*      ld (iy+0),hl            ; set start time
0406B0 C9          0191*      ret
0406B1             0192*  
0406B1             0193*  ; gets time remaining on a countdown timer
0406B1             0194*  ; inputs: iy = pointer to 3-byte buffer holding start time, iy+3 = pointer to 3-byte buffer holding timer set value
0406B1             0195*  ; returns: hl pos = time remaining in 1/120ths of a second, hl neg = time past expiration
0406B1             0196*  ;          sign flags: pos = time not expired, zero or neg = time expired
0406B1             0197*  timer_get:
0406B1             0198*      MOSCALL mos_sysvars     ; ix points to syvars table
0406B1 3E 08       0001*M 			LD	A, function
0406B3 5B CF       0002*M 			RST.LIL	08h
0406B5 DD 17 00    0199*      ld de,(ix+sysvar_time)  ; get current time
0406B8 FD 27 00    0200*      ld hl,(iy+0)            ; get start time
0406BB AF          0201*      xor a                   ; clear carry
0406BC ED 52       0202*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0406BE FD 17 03    0203*      ld de,(iy+3)            ; get timer set value
0406C1 AF          0204*      xor a                   ; clear carry
0406C2 ED 5A       0205*      adc hl,de               ; hl = time remaining
0406C4             0206*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0406C4 C9          0207*      ret
0406C5             0208*  
0406C5             0209*  timer_test: ds 6 ; example of a buffer to hold timer data
0406CB             0210*  
0406CB             0211*  
0406CB             0212*  ; ------------------
0406CB             0213*  ; delay routine
0406CB             0214*  ; Author: Richard Turrnidge
0406CB             0215*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.asm
0406CB             0216*  ; routine waits a fixed time, then returns
0406CB             0217*  ; arrive with A =  the delay byte. One bit to be set only.
0406CB             0218*  ; eg. ld A, 00000100b
0406CB             0219*  
0406CB             0220*  multiPurposeDelay:
0406CB F5          0221*      push af
0406CC C5          0222*      push bc
0406CD DD E5       0223*      push ix
0406CF 47          0224*      ld b, a
0406D0 3E 08       0225*      ld a,$08
0406D2 5B CF       0226*      RST.LIL	08h                 ; get IX pointer to sysvars
0406D4             0227*  
0406D4             0228*  waitLoop:
0406D4             0229*  
0406D4 DD 7E 00    0230*      ld a, (ix + 0)              ; ix+0h is lowest byte of clock timer
0406D7             0231*  
0406D7             0232*                                  ;   we check if bit set is same as last time we checked.
0406D7             0233*                                  ;   bit 0 - don't use
0406D7             0234*                                  ;   bit 1 - changes 64 times per second
0406D7             0235*                                  ;   bit 2 - changes 32 times per second
0406D7             0236*                                  ;   bit 3 - changes 16 times per second
0406D7             0237*  
0406D7             0238*                                  ;   bit 4 - changes 8 times per second
0406D7             0239*                                  ;   bit 5 - changes 4 times per second
0406D7             0240*                                  ;   bit 6 - changes 2 times per second
0406D7             0241*                                  ;   bit 7 - changes 1 times per second
0406D7 A0          0242*      and b
0406D8 4F          0243*      ld c,a
0406D9 3A EA 06 04 0244*      ld a, (oldTimeStamp)
0406DD B9          0245*      cp c                        ; is A same as last value?
0406DE 28 F4       0246*      jr z, waitLoop              ; loop here if it is
0406E0 79          0247*      ld a, c
0406E1 32 EA 06 04 0248*      ld (oldTimeStamp), a        ; set new value
0406E5             0249*  
0406E5 DD E1       0250*      pop ix
0406E7 C1          0251*      pop bc
0406E8 F1          0252*      pop af
0406E9 C9          0253*      ret
0406EA             0254*  
0406EA 00          0255*  oldTimeStamp:   .db 00h
0406EB             0152       include "organ/src/asm/maths.asm"
0406EB 00 00 00 00 0001*  add_bcd_arg1: db #00,#00,#00,#00
0406EF 00 00 00 00 0002*  add_bcd_arg2: db #00,#00,#00,#00
0406F3             0003*  
0406F3             0004*  ; set bcd values in a scratch memory address from registers bcde
0406F3             0005*  ; input: hl; scratch address,bcde; 8-place bcd number
0406F3             0006*  ; destroys ; hl
0406F3             0007*  set_bcd:
0406F3 73          0008*      ld (hl),e
0406F4 23          0009*      inc hl
0406F5 72          0010*      ld (hl),d
0406F6 23          0011*      inc hl
0406F7 71          0012*      ld (hl),c
0406F8 23          0013*      inc hl
0406F9 70          0014*      ld (hl),b
0406FA C9          0015*      ret
0406FB             0016*  
0406FB             0017*  ; load bcd values from a scratch memory address to bcde
0406FB             0018*  ; input: hl; scratch address
0406FB             0019*  ; output: bcde; 8-place bcd number
0406FB             0020*  ; destroys: hl
0406FB             0021*  get_bcd:
0406FB 5E          0022*      ld e,(hl)
0406FC 23          0023*      inc hl
0406FD 56          0024*      ld d,(hl)
0406FE 23          0025*      inc hl
0406FF 4E          0026*      ld c,(hl)
040700 23          0027*      inc hl
040701 46          0028*      ld b,(hl)
040702 C9          0029*      ret
040703             0030*  
040703             0031*  ; BCD addition
040703             0032*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040703             0033*  ;       a is the number of bytes holding each number (number of places/2)
040703             0034*  ; outputs: (hl) + (de) --> (hl)
040703             0035*  ; destroys: a,b,de,hl
040703             0036*  add_bcd:
040703 47          0037*      ld b,a ; loop counter
040704 AF          0038*      xor a ; reset a, clear carry flag
040705             0039*  adcec:
040705 1A          0040*      ld a,(de) ; addend to acc
040706 8E          0041*      adc a,(hl) ; add (hl) to acc
040707 27          0042*      daa ; adjust result to bcd
040708 77          0043*      ld (hl),a ; store result
040709 23          0044*      inc hl ; advance memory pointers
04070A 13          0045*      inc de
04070B 10 F8       0046*      djnz adcec ; loop until b == 0
04070D C9          0047*      ret
04070E             0048*  
04070E             0049*  ; BCD subtraction
04070E             0050*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04070E             0051*  ;       a is the number of bytes holding each number (number of places/2)
04070E             0052*  ; outputs: (hl) - (de) --> (hl)
04070E             0053*  ; destroys: a,b,de,hl
04070E             0054*  sub_bcd:
04070E 47          0055*      ld b,a ; loop counter
04070F AF          0056*      xor a ; reset a,clear carry flag
040710             0057*  subdec:
040710 1A          0058*      ld a,(de) ; subtrahend to acc
040711 9E          0059*      sbc a,(hl) ; subtract (hl) from acc
040712 27          0060*      daa ; adjust result to bcd
040713 77          0061*      ld (hl),a ; store result
040714 23          0062*      inc hl ; advance memory pointers
040715 13          0063*      inc de
040716 10 F8       0064*      djnz subdec ; loop until b == 0
040718 C9          0065*      ret
040719             0066*  
040719             0067*  ; http://www.z80.info/pseudo-random.txt
040719             0068*  rand_8:
040719 C5          0069*      push bc
04071A 3A 2D 07 04 0070*      ld a,(r_seed)
04071E 4F          0071*      ld c,a
04071F             0072*  
04071F 0F          0073*      rrca ; multiply by 32
040720 0F          0074*      rrca
040721 0F          0075*      rrca
040722 EE 1F       0076*      xor 0x1f
040724             0077*  
040724 81          0078*      add a,c
040725 DE FF       0079*      sbc a,255 ; carry
040727             0080*  
040727 32 2D 07 04 0081*      ld (r_seed),a
04072B C1          0082*      pop bc
04072C C9          0083*      ret
04072D 50          0084*  r_seed: defb $50
04072E             0153       include "organ/src/asm/organ_vdu.asm"
04072E             0001*  ; VDU 4: Write text at text cursor
04072E             0002*  ;     This causes text to be written at the current text cursor position.
04072E             0003*  ;     This is the default mode for text display.
04072E             0004*  ;     Text is written using the current text foreground and background colours.
04072E             0005*  ; inputs: a is the character to write to the screen
04072E             0006*  ; prerequisites: the text cursor at the intended position on screen
04072E             0007*  ; outputs: prints the character and moves text cursor right one position
04072E             0008*  ; destroys: a, hl, bc
04072E             0009*  vdu_char_to_text_cursor:
04072E 32 3E 07 04 0010*  	ld (@arg),a
040732 21 3D 07 04 0011*  	ld hl,@cmd
040736 01 02 00 00 0012*  	ld bc,@end-@cmd
04073A 5B DF       0013*  	rst.lil $18
04073C C9          0014*  	ret
04073D 04          0015*  @cmd: db 4
04073E 00          0016*  @arg: db 0
04073F             0017*  @end:
04073F             0018*  
04073F             0019*  ; VDU 5: Write text at graphics cursor
04073F             0020*  ;     This causes text to be written at the current graphics cursor position.
04073F             0021*  ;     Using this, characters may be positioned at any graphics coordinate within
04073F             0022*  ;     the graphics viewport. This is useful for positioning text over graphics,
04073F             0023*  ;     or for positioning text at a specific location on the screen.
04073F             0024*  ;     Characters are plotted using the current graphics foreground colour,
04073F             0025*  ;     using the current graphics foreground plotting mode (see VDU 18).
04073F             0026*  ;     The character background is transparent, and will not overwrite any
04073F             0027*  ;     graphics that are already present at the character’s location.
04073F             0028*  ;     The exception to this is VDU 27, the “delete” character, which backspaces
04073F             0029*  ;     and deletes as per its usual behaviour, but will erase using the current
04073F             0030*  ;     graphics background colour.
04073F             0031*  ; inputs: a is the character to write to the screen
04073F             0032*  ; prerequisites: the graphics cursor at the intended position on screen
04073F             0033*  ; outputs: see the name of the function
04073F             0034*  ; destroys: a, hl, bc
04073F             0035*  vdu_char_to_gfx_cursor:
04073F 32 4F 07 04 0036*  	ld (@arg),a
040743 21 4E 07 04 0037*  	ld hl,@cmd
040747 01 02 00 00 0038*  	ld bc,@end-@cmd
04074B 5B DF       0039*  	rst.lil $18
04074D C9          0040*  	ret
04074E 05          0041*  @cmd: db 5
04074F 00          0042*  @arg: db 0
040750             0043*  @end:
040750             0044*  
040750             0045*  ; VDU 6: Enable screen (opposite of VDU 21) §§
040750             0046*  ;     This enables the screen, and re-enables VDU command processing,
040750             0047*  ;     reversing the effect of VDU 21.
040750             0048*  ; inputs: none
040750             0049*  ; outputs: a functioning screen and VDU
040750             0050*  ; destroys: a
040750             0051*  vdu_enable_screen:
040750 3E 06       0052*      ld a,6
040752 5B D7       0053*  	rst.lil $10
040754 C9          0054*  	ret
040755             0055*  
040755             0056*  ; PASSES
040755             0057*  ; VDU 7: Make a short beep (BEL)
040755             0058*  ;     Plays a short beep sound on audio channel 0. If the audio channel
040755             0059*  ;     is already in use, or has been disabled, then this command will have no effect.
040755             0060*  ; inputs: none
040755             0061*  ; outputs: an unpleasant but thankfully short-lived audio tone
040755             0062*  ; destroys: a
040755             0063*  vdu_beep:
040755 3E 07       0064*      ld a,7
040757 5B D7       0065*  	rst.lil $10
040759 C9          0066*  	ret
04075A             0067*  
04075A             0068*  ; VDU 8: Move cursor back one character
04075A             0069*  ;     Moves the text cursor one character in the negative “X” direction.
04075A             0070*  ;     By default, when at the start of a line it will move to the end of
04075A             0071*  ;     the previous line (as defined by the current text viewport).
04075A             0072*  ;     If the cursor is also at the top of the screen then the viewport will scroll down.
04075A             0073*  ;     The cursor remains constrained to the current text viewport.
04075A             0074*  ;     When in VDU 5 mode and the graphics cursor is active, the viewport will not scroll.
04075A             0075*  ;     The cursor is just moved left by one character width.
04075A             0076*  ;     Further behaviour of the cursor can be controlled using the VDU 23,16 command.
04075A             0077*  ;     It should be noted that as of Console8 VDP 2.5.0, the cursor system does not
04075A             0078*  ;     support adjusting the direction of the cursor’s X axis, so this command
04075A             0079*  ;     will move the cursor to the left. This is likely to change in the future.
04075A             0080*  vdu_cursor_back:
04075A 3E 08       0081*      ld a,8
04075C 5B D7       0082*  	rst.lil $10
04075E C9          0083*  	ret
04075F             0084*  
04075F             0085*  ; VDU 9: Move cursor forward one character
04075F             0086*  vdu_cursor_forward:
04075F 3E 09       0087*      ld a,9
040761 5B D7       0088*  	rst.lil $10
040763 C9          0089*  	ret
040764             0090*  
040764             0091*  ; VDU 10: Move cursor down one line
040764             0092*  vdu_cursor_down:
040764 3E 0A       0093*      ld a,10
040766 5B D7       0094*  	rst.lil $10
040768 C9          0095*  	ret
040769             0096*  
040769             0097*  ; VDU 11: Move cursor up one line
040769             0098*  vdu_cursor_up:
040769 3E 0B       0099*      ld a,11
04076B 5B D7       0100*  	rst.lil $10
04076D C9          0101*  	ret
04076E             0102*  
04076E             0103*  ; VDU 12: Clear text area (CLS)
04076E             0104*  vdu_cls:
04076E 3E 0C       0105*      ld a,12
040770 5B D7       0106*  	rst.lil $10
040772 C9          0107*  	ret
040773             0108*  
040773             0109*  ; VDU 13: Carriage return
040773             0110*  vdu_cr:
040773 3E 0D       0111*      ld a,13
040775 5B D7       0112*  	rst.lil $10
040777 C9          0113*  	ret
040778             0114*  
040778             0115*  ; VDU 14: Page mode On *
040778             0116*  vdu_page_on:
040778 3E 0E       0117*      ld a,14
04077A 5B D7       0118*  	rst.lil $10
04077C C9          0119*  	ret
04077D             0120*  
04077D             0121*  ; VDU 15: Page mode Off *
04077D             0122*  vdu_page_off:
04077D 3E 0F       0123*      ld a,15
04077F 5B D7       0124*  	rst.lil $10
040781 C9          0125*  	ret
040782             0126*  
040782             0127*  ; VDU 16: Clear graphics area (CLG)
040782             0128*  vdu_clg:
040782 3E 10       0129*      ld a,16
040784 5B D7       0130*  	rst.lil $10
040786 C9          0131*  	ret
040787             0132*  
040787             0133*  ; VDU 17, colour: Define text colour (COLOUR)
040787             0134*  vdu_colour_text:
040787 32 97 07 04 0135*  	ld (@arg),a
04078B 21 96 07 04 0136*  	ld hl,@cmd
04078F 01 02 00 00 0137*  	ld bc,@end-@cmd
040793 5B DF       0138*  	rst.lil $18
040795 C9          0139*  	ret
040796 11          0140*  @cmd: db 17
040797 00          0141*  @arg: db 0
040798             0142*  @end:
040798             0143*  
040798             0144*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
040798             0145*  ; inputs: a is the plotting mode, c is the colour
040798             0146*  ; outputs: a VDU set to put pixels on the screen with the selected mode/colour
040798             0147*  vdu_gcol_fg:
040798             0148*  ; This command will set both the current graphics colour,
040798             0149*  ; and the current graphics plotting mode.
040798             0150*  ; As with VDU 17 the colour number will set the foreground colour
040798             0151*  ; if it is in the range 0-127, or the background colour if it is
040798             0152*  ; in the range 128-255, and will be interpreted in the same manner.
040798             0153*  ; Support for different plotting modes on Agon is currently very limited.
040798             0154*  ; The only fully supported mode is mode 0, which is the default mode.
040798             0155*  ; This mode will plot the given colour at the given graphics coordinate,
040798             0156*  ; and will overwrite any existing graphics at that coordinate. There is
040798             0157*  ; very limited support for mode 4, which will invert the colour of any
040798             0158*  ; existing graphics at the given coordinate, but this is not fully supported
040798             0159*  ; and may not work as expected.
040798             0160*  ; Support for other plotting modes, matching those provided by Acorn’s
040798             0161*  ; original VDU system, may be added in the future.
040798             0162*  ; This command is identical to the BASIC GCOL keyword.
040798 32 AD 07 04 0163*  	ld (@mode),a
04079C 79          0164*      ld a,c
04079D 32 AE 07 04 0165*      ld (@col),a
0407A1 21 AC 07 04 0166*  	ld hl,@cmd
0407A5 01 03 00 00 0167*  	ld bc,@end-@cmd
0407A9 5B DF       0168*  	rst.lil $18
0407AB C9          0169*  	ret
0407AC 12          0170*  @cmd: db 18
0407AD 00          0171*  @mode: db 0
0407AE 00          0172*  @col: db 0
0407AF             0173*  @end:
0407AF             0174*  
0407AF             0175*  vdu_gcol_bg:
0407AF 32 C6 07 04 0176*  	ld (@mode),a
0407B3 79          0177*      ld a,c
0407B4 C6 80       0178*      add a,128
0407B6 32 C7 07 04 0179*      ld (@col),a
0407BA 21 C5 07 04 0180*  	ld hl,@cmd
0407BE 01 03 00 00 0181*  	ld bc,@end-@cmd
0407C2 5B DF       0182*  	rst.lil $18
0407C4 C9          0183*  	ret
0407C5 12          0184*  @cmd:  db 18
0407C6 00          0185*  @mode: db 0
0407C7 00          0186*  @col:  db 0
0407C8             0187*  @end:
0407C8             0188*  
0407C8             0189*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
0407C8             0190*  ;     This command sets the colour palette, by mapping a logical colour
0407C8             0191*  ;     to a physical colour. This is useful for defining custom colours,
0407C8             0192*  ;     or for redefining the default colours.
0407C8             0193*  ;     If the physical colour number is given as 255 then the colour will
0407C8             0194*  ;     be defined using the red, green, and blue values given. If the physical
0407C8             0195*  ;     colour number is given as any other value then the colour will be defined
0407C8             0196*  ;     using the colour palette entry given by that number, up to colour number 63.
0407C8             0197*  ;     If the physical colour is not 255 then the red, green, and blue values
0407C8             0198*  ;     must still be provided, but will be ignored.
0407C8             0199*  ;     The values for red, green and blue must be given in the range 0-255.
0407C8             0200*  ;     You should note that the physical Agon hardware only supports 64 colours,
0407C8             0201*  ;     so the actual colour displayed may not be exactly the same as the colour
0407C8             0202*  ;     requested. The nearest colour will be chosen.
0407C8             0203*  ;     This command is equivalent to the BASIC COLOUR keyword.
0407C8             0204*  ; inputs: a=physcial colour, b=logical colour, chl=r,g,b
0407C8             0205*  vdu_def_log_colour:
0407C8 32 ED 07 04 0206*  	ld (@physical),a
0407CC 47          0207*      ld b,a
0407CD 32 EC 07 04 0208*      ld (@logical),a
0407D1 79          0209*      ld a,c
0407D2 32 EE 07 04 0210*      ld (@red),a
0407D6 7C          0211*      ld a,h
0407D7 32 EF 07 04 0212*      ld (@green),a
0407DB 7D          0213*      ld a,l
0407DC 32 F0 07 04 0214*      ld (@blue),a
0407E0 21 EB 07 04 0215*  	ld hl,@cmd
0407E4 01 06 00 00 0216*  	ld bc,@end-@cmd
0407E8 5B DF       0217*  	rst.lil $18
0407EA C9          0218*  	ret
0407EB 13          0219*  @cmd: db 19
0407EC 00          0220*  @logical: db 0
0407ED 00          0221*  @physical: db 0
0407EE 00          0222*  @red: db 0
0407EF 00          0223*  @green: db 0
0407F0 00          0224*  @blue: db 0
0407F1             0225*  @end:
0407F1             0226*  
0407F1             0227*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
0407F1             0228*  vdu_reset_gfx:
0407F1 3E 14       0229*      ld a,20
0407F3 5B D7       0230*  	rst.lil $10
0407F5 C9          0231*  	ret
0407F6             0232*  
0407F6             0233*  ; VDU 21: Disable screen (turns off VDU command processing,
0407F6             0234*  ; except for VDU 1 and VDU 6) §§
0407F6             0235*  vdu_disable_screen:
0407F6 3E 15       0236*      ld a,21
0407F8 5B D7       0237*  	rst.lil $10
0407FA C9          0238*  	ret
0407FB             0239*  
0407FB             0240*  ; VDU 22, n: Select screen mode (MODE n)
0407FB             0241*  ; Inputs: a, screen mode (8-bit unsigned integer), in the following list:
0407FB             0242*  ; https://agonconsole8.github.io/agon-docs/VDP---Screen-Modes.html
0407FB             0243*  ; Screen modes
0407FB             0244*  ; Modes over 128 are double-buffered
0407FB             0245*  ; From Version 1.04 or greater
0407FB             0246*  ; Mode 	Horz 	Vert 	Cols 	Refresh
0407FB             0247*  ; 0 	640 	480 	16 	    60hz
0407FB             0248*  ; * 1 	640 	480 	4 	    60hz
0407FB             0249*  ; 2 	640 	480 	2 	    60hz
0407FB             0250*  ; 3 	640 	240 	64 	    60hz
0407FB             0251*  ; 4 	640 	240 	16 	    60hz
0407FB             0252*  ; 5 	640 	240 	4 	    60hz
0407FB             0253*  ; 6 	640 	240 	2 	    60hz
0407FB             0254*  ; ** 7 	n/a 	n/a 	16 	    60hz
0407FB             0255*  ; 8 	320 	240 	64 	    60hz
0407FB             0256*  ; 9 	320 	240 	16 	    60hz
0407FB             0257*  ; 10 	320 	240 	4 	    60hz
0407FB             0258*  ; 11 	320 	240 	2 	    60hz
0407FB             0259*  ; 12 	320 	200 	64 	    70hz
0407FB             0260*  ; 13 	320 	200 	16 	    70hz
0407FB             0261*  ; 14 	320 	200 	4 	    70hz
0407FB             0262*  ; 15 	320 	200 	2 	    70hz
0407FB             0263*  ; 16 	800 	600 	4 	    60hz
0407FB             0264*  ; 17 	800 	600 	2 	    60hz
0407FB             0265*  ; 18 	1024 	768 	2 	    60hz
0407FB             0266*  ; 129 	640 	480 	4 	    60hz
0407FB             0267*  ; 130 	640 	480 	2 	    60hz
0407FB             0268*  ; 132 	640 	240 	16 	    60hz
0407FB             0269*  ; 133 	640 	240 	4 	    60hz
0407FB             0270*  ; 134 	640 	240 	2 	    60hz
0407FB             0271*  ; 136 	320 	240 	64 	    60hz
0407FB             0272*  ; 137 	320 	240 	16 	    60hz
0407FB             0273*  ; 138 	320 	240 	4 	    60hz
0407FB             0274*  ; 139 	320 	240 	2 	    60hz
0407FB             0275*  ; 140 	320 	200 	64 	    70hz
0407FB             0276*  ; 141 	320 	200 	16 	    70hz
0407FB             0277*  ; 142 	320 	200 	4 	    70hz
0407FB             0278*  ; 143 	320 	200 	2 	    70hz
0407FB             0279*  ; * Mode 1 is the “default” mode, and is the mode that the system will use on startup.
0407FB             0280*  ; It is also the mode that the system will fall back to use if it was not possible to
0407FB             0281*  ; change to the requested mode.
0407FB             0282*  ; ** Mode 7 is the “Teletext” mode, and essentially works in a very similar manner to
0407FB             0283*  ; the BBC Micro’s Teletext mode, which was also mode 7.
0407FB             0284*  vdu_set_screen_mode:
0407FB 32 0B 08 04 0285*  	ld (@arg),a
0407FF 21 0A 08 04 0286*  	ld hl,@cmd
040803 01 02 00 00 0287*  	ld bc,@end-@cmd
040807 5B DF       0288*  	rst.lil $18
040809 C9          0289*  	ret
04080A 16          0290*  @cmd: db 22 ; set screen mode
04080B 00          0291*  @arg: db 0  ; screen mode parameter
04080C             0292*  @end:
04080C             0293*  
04080C             0294*  ; VDU 23, n: Re-program display character / System Commands
04080C             0295*  ; inputs: a, ascii code; hl, pointer to bitmask data
04080C             0296*  vdu_define_character:
04080C 32 28 08 04 0297*  	ld (@ascii),a
040810 11 29 08 04 0298*  	ld de,@data
040814 06 08       0299*  	ld b,8 ; loop counter for 8 bytes of data
040816             0300*  @loop:
040816 7E          0301*  	ld a,(hl)
040817 12          0302*  	ld (de),a
040818 23          0303*  	inc hl
040819 13          0304*  	inc de
04081A 10 FA       0305*  	djnz @loop
04081C 21 27 08 04 0306*  	ld hl,@cmd
040820 01 0A 00 00 0307*  	ld bc,@end-@cmd
040824 5B DF       0308*  	rst.lil $18
040826 C9          0309*  	ret
040827 17          0310*  @cmd:   db 23
040828 00          0311*  @ascii: db 0
040829             0312*  @data:  ds 8
040831             0313*  @end:
040831             0314*  
040831             0315*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
040831             0316*  ; NOTE: the order of the y-coordinate parameters are inverted
040831             0317*  ; 	because we have turned off logical screen scaling
040831             0318*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
040831             0319*  ; outputs; nothing
040831             0320*  ; destroys: a might make it out alive
040831             0321*  vdu_set_gfx_viewport:
040831 ED 43 51 08 0322*      ld (@x0),bc
       04          
040836 FD 22 53 08 0323*      ld (@y1),iy
       04          
04083B DD 22 55 08 0324*  	ld (@x1),ix
       04          
040840 ED 53 57 08 0325*  	ld (@y0),de
       04          
040845 21 50 08 04 0326*  	ld hl,@cmd
040849 01 09 00 00 0327*  	ld bc,@end-@cmd
04084D 5B DF       0328*  	rst.lil $18
04084F C9          0329*  	ret
040850 18          0330*  @cmd:   db 24 ; set graphics viewport command
040851 00 00       0331*  @x0: 	dw 0x0000 ; set by bc
040853 00 00       0332*  @y1: 	dw 0x0000 ; set by iy
040855 00 00       0333*  @x1: 	dw 0x0000 ; set by ix
040857 00 00       0334*  @y0: 	dw 0x0000 ; set by de
040859 00          0335*  @end:   db 0x00	  ; padding
04085A             0336*  
04085A             0337*  ; VDU 25, mode, x; y;: PLOT command
04085A             0338*  ; Implemented in vdu_plot.asm
04085A             0339*  
04085A             0340*  ; VDU 26: Reset graphics and text viewports **
04085A             0341*  vdu_reset_txt_gfx_view:
04085A 3E 1A       0342*      ld a,26
04085C 5B D7       0343*  	rst.lil $10
04085E C9          0344*  	ret
04085F             0345*  
04085F             0346*  ; PASSES
04085F             0347*  ; VDU 27, char: Output character to screen §
04085F             0348*  ; inputs: a is the ascii code of the character to draw
04085F             0349*  vdu_draw_char:
04085F 32 6F 08 04 0350*  	ld (@arg),a
040863 21 6E 08 04 0351*  	ld hl,@cmd
040867 01 02 00 00 0352*  	ld bc,@end-@cmd
04086B 5B DF       0353*  	rst.lil $18
04086D C9          0354*  	ret
04086E 1B          0355*  @cmd: db 27
04086F 00          0356*  @arg: db 0  ; ascii code of character to draw
040870             0357*  @end:
040870             0358*  
040870             0359*  ; VDU 28, left, bottom, right, top: Set text viewport **
040870             0360*  ; MIND THE LITTLE-ENDIANESS
040870             0361*  ; inputs: c=left,b=bottom,e=right,d=top
040870             0362*  ; outputs; nothing
040870             0363*  ; destroys: a might make it out alive
040870             0364*  vdu_set_txt_viewport:
040870 ED 43 86 08 0365*      ld (@lb),bc
       04          
040875 ED 53 88 08 0366*  	ld (@rt),de
       04          
04087A 21 85 08 04 0367*  	ld hl,@cmd
04087E 01 05 00 00 0368*  	ld bc,@end-@cmd
040882 5B DF       0369*  	rst.lil $18
040884 C9          0370*  	ret
040885 1C          0371*  @cmd:   db 28 ; set text viewport command
040886 00 00       0372*  @lb: 	dw 0x0000 ; set by bc
040888 00 00       0373*  @rt: 	dw 0x0000 ; set by de
04088A 00          0374*  @end:   db 0x00	  ; padding
04088B             0375*  
04088B             0376*  ; PASSES
04088B             0377*  ; VDU 29, x; y;: Set graphics origin
04088B             0378*  ; inputs: bc,de x,y coordinates
04088B             0379*  vdu_set_gfx_origin:
04088B ED 43 A1 08 0380*      ld (@x0),bc
       04          
040890 ED 53 A3 08 0381*      ld (@y0),de
       04          
040895 21 A0 08 04 0382*  	ld hl,@cmd
040899 01 05 00 00 0383*  	ld bc,@end-@cmd
04089D 5B DF       0384*  	rst.lil $18
04089F C9          0385*  	ret
0408A0 1D          0386*  @cmd:	db 29
0408A1 00 00       0387*  @x0: 	dw 0
0408A3 00 00       0388*  @y0: 	dw 0
0408A5 00          0389*  @end: 	db 0 ; padding
0408A6             0390*  
0408A6             0391*  ; PASSES
0408A6             0392*  ; VDU 30: Home cursor
0408A6             0393*  vdu_home_cursor:
0408A6 3E 1E       0394*      ld a,30
0408A8 5B D7       0395*  	rst.lil $10
0408AA C9          0396*  	ret
0408AB             0397*  
0408AB             0398*  ; PASSES
0408AB             0399*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
0408AB             0400*  ; inputs: c=x, b=y 8-bit unsigned integers
0408AB             0401*  vdu_move_cursor:
0408AB ED 43 BC 08 0402*      ld (@x0),bc
       04          
0408B0 21 BB 08 04 0403*  	ld hl,@cmd
0408B4 01 03 00 00 0404*  	ld bc,@end-@cmd
0408B8 5B DF       0405*  	rst.lil $18
0408BA C9          0406*  	ret
0408BB 1F          0407*  @cmd: 	db 31
0408BC 00          0408*  @x0:	db 0
0408BD 00          0409*  @y0: 	db 0
0408BE 00          0410*  @end: 	db 0 ; padding
0408BF             0411*  
0408BF             0412*  
0408BF             0413*  ; VDU 127: Backspace
0408BF             0414*  vdu_bksp:
0408BF 3E 7F       0415*      ld a,127
0408C1 5B D7       0416*  	rst.lil $10
0408C3 C9          0417*  	ret
0408C4             0418*  
0408C4             0419*  ; activate a bitmap in preparation to draw it
0408C4             0420*  ; inputs: a holding the bitmap index
0408C4             0421*  vdu_bmp_select:
0408C4 32 D6 08 04 0422*  	ld (@bmp),a
0408C8 21 D3 08 04 0423*  	ld hl,@cmd
0408CC 01 04 00 00 0424*  	ld bc,@end-@cmd
0408D0 5B DF       0425*  	rst.lil $18
0408D2 C9          0426*  	ret
0408D3 17 1B 00    0427*  @cmd: db 23,27,0
0408D6 00          0428*  @bmp: db 0
0408D7             0429*  @end:
0408D7             0430*  
0408D7             0431*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
0408D7             0432*  ; inputs: hl=bufferId
0408D7             0433*  vdu_buff_select:
0408D7 22 E9 08 04 0434*  	ld (@bufferId),hl
0408DB 21 E6 08 04 0435*  	ld hl,@cmd
0408DF 01 05 00 00 0436*  	ld bc,@end-@cmd
0408E3 5B DF       0437*  	rst.lil $18
0408E5 C9          0438*  	ret
0408E6 17 1B 20    0439*  @cmd: db 23,27,0x20
0408E9 00 00       0440*  @bufferId: dw 0x0000
0408EB 00          0441*  @end: db 0x00 ; padding
0408EC             0442*  
0408EC             0443*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
0408EC             0444*  ; inputs: a=format; bc=width; de=height
0408EC             0445*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
0408EC             0446*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
0408EC             0447*  ; 0 	RGBA8888 (4-bytes per pixel)
0408EC             0448*  ; 1 	RGBA2222 (1-bytes per pixel)
0408EC             0449*  ; 2 	Mono/Mask (1-bit per pixel)
0408EC             0450*  ; 3 	Reserved for internal use by VDP (“native” format)
0408EC             0451*  vdu_bmp_create:
0408EC ED 43 08 09 0452*      ld (@width),bc
       04          
0408F1 ED 53 0A 09 0453*      ld (@height),de
       04          
0408F6 32 0C 09 04 0454*      ld (@fmt),a
0408FA 21 05 09 04 0455*  	ld hl,@cmd
0408FE 01 08 00 00 0456*  	ld bc,@end-@cmd
040902 5B DF       0457*  	rst.lil $18
040904 C9          0458*  	ret
040905 17 1B 21    0459*  @cmd:       db 23,27,0x21
040908 00 00       0460*  @width:     dw 0x0000
04090A 00 00       0461*  @height:    dw 0x0000
04090C 00          0462*  @fmt:       db 0x00
04090D             0463*  @end:
04090D             0464*  
04090D             0465*  ; Draw a bitmap on the screen
04090D             0466*  ; inputs: bc, x-coordinate; de, y-coordinate
04090D             0467*  ; prerequisite: bitmap index set by e.g. vdu_bmp_select
04090D             0468*  vdu_bmp_draw:
04090D ED 43 25 09 0469*      ld (@x0),bc
       04          
040912 ED 53 27 09 0470*      ld (@y0),de
       04          
040917 21 22 09 04 0471*  	ld hl,@cmd
04091B 01 07 00 00 0472*  	ld bc,@end-@cmd
04091F 5B DF       0473*  	rst.lil $18
040921 C9          0474*  	ret
040922 17 1B 03    0475*  @cmd: db 23,27,3
040925 00 00       0476*  @x0:  dw 0x0000
040927 00 00       0477*  @y0:  dw 0x0000
040929 00          0478*  @end: db 0x00 ; padding
04092A             0479*  
04092A             0480*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
04092A             0481*  ; inputs: a is scaling mode, 1=on, 0=off
04092A             0482*  ; note: default setting on boot is scaling ON
04092A             0483*  vdu_set_scaling:
04092A 32 3C 09 04 0484*  	ld (@arg),a
04092E 21 39 09 04 0485*  	ld hl,@cmd
040932 01 04 00 00 0486*  	ld bc,@end-@cmd
040936 5B DF       0487*  	rst.lil $18
040938 C9          0488*  	ret
040939 17 00 C0    0489*  @cmd: db 23,0,0xC0
04093C 00          0490*  @arg: db 0  ; scaling on/off
04093D             0491*  @end:
04093D             0492*  
04093D             0493*  ; VDU 23, 0, &C3: Swap the screen buffer and/or wait for VSYNC **
04093D             0494*  ; 	Swap the screen buffer (double-buffered modes only) or wait for VSYNC
04093D             0495*  ; 	(all modes).
04093D             0496*  
04093D             0497*  ; 	This command will swap the screen buffer, if the current screen mode
04093D             0498*  ; 	is double-buffered, doing so at the next VSYNC. If the current screen
04093D             0499*  ; 	mode is not double-buffered then this command will wait for the next
04093D             0500*  ; 	VSYNC signal before returning. This can be used to synchronise the
04093D             0501*  ; 	screen with the vertical refresh rate of the monitor.
04093D             0502*  
04093D             0503*  ; 	Waiting for VSYNC can be useful for ensuring smooth graphical animation,
04093D             0504*  ; 	as it will prevent tearing of the screen.
04093D             0505*  ; inputs: none
04093D             0506*  ; outputs: none
04093D             0507*  ; destroys: hl, bc
04093D             0508*  vdu_flip:
04093D 21 48 09 04 0509*  	ld hl,@cmd
040941 01 03 00 00 0510*  	ld bc,@end-@cmd
040945 5B DF       0511*  	rst.lil $18
040947 C9          0512*  	ret
040948 17 00 C3    0513*  @cmd: db 23,0,0xC3
04094B             0514*  @end:
04094B             0515*  
04094B             0516*  ; #### from vdp.asm ####
04094B             0517*  
04094B             0518*  ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
04094B             0519*  ; VDU 23, 7: Scrolling
04094B             0520*  ;     VDU 23, 7, extent, direction, speed: Scroll the screen
04094B             0521*  ; inputs: a, extent; l, direction; h; speed
04094B             0522*  vdu_scroll_down:
04094B 32 60 09 04 0523*  	ld (@extent),a
04094F 22 61 09 04 0524*  	ld (@dir),hl ; implicitly populates @speed
040953 21 5E 09 04 0525*  	ld hl,@cmd
040957 01 05 00 00 0526*  	ld bc,@end-@cmd
04095B 5B DF       0527*  	rst.lil $18     ;; Sending command to VDP
04095D C9          0528*  	ret
04095E 17 07       0529*  @cmd:       db 23,7
040960 00          0530*  @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
040961 00          0531*  @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
040962 00          0532*  @speed:     db 0x00 ; pixels
040963 00          0533*  @end:		db 0x00 ; padding
040964             0534*  
040964             0535*  cursor_on:
040964 21 6F 09 04 0536*  	ld hl,@cmd
040968 01 03 00 00 0537*  	ld bc,@end-@cmd
04096C 5B DF       0538*  	rst.lil $18
04096E C9          0539*  	ret
04096F             0540*  @cmd:
04096F 17 01 01    0541*  	db 23,1,1
040972             0542*  @end:
040972             0543*  
040972             0544*  cursor_off:
040972 21 7D 09 04 0545*  	ld hl,@cmd
040976 01 03 00 00 0546*  	ld bc,@end-@cmd
04097A 5B DF       0547*  	rst.lil $18
04097C C9          0548*  	ret
04097D             0549*  @cmd:
04097D 17 01 00    0550*  	db 23,1,0
040980             0551*  @end:
040980             0552*  
040980 DD E5       0553*  vdu_vblank:		PUSH 	IX			; Wait for VBLANK interrupt
040982             0554*  			MOSCALL	mos_sysvars		; Fetch pointer to system variables
040982 3E 08       0001*M 			LD	A, function
040984 5B CF       0002*M 			RST.LIL	08h
040986 DD 7E 00    0555*  			LD	A, (IX + sysvar_time + 0)
040989 DD BE 00    0556*  @wait:			CP 	A, (IX + sysvar_time + 0)
04098C 28 FB       0557*  			JR	Z, @wait
04098E DD E1       0558*  			POP	IX
040990 C9          0559*  			RET
040991             0560*  
040991             0561*  ; #### from vdu_plot.asm ####
040991             0562*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
040991             0563*  ; PLOT code 	(Decimal) 	Effect
040991             0564*  ; &00-&07 	0-7 	Solid line, includes both ends
040991             0565*  plot_sl_both: equ 0x00
040991             0566*  
040991             0567*  ; &08-&0F 	8-15 	Solid line, final point omitted
040991             0568*  plot_sl_first: equ 0x08
040991             0569*  
040991             0570*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
040991             0571*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
040991             0572*  
040991             0573*  ; &20-&27 	32-39 	Solid line, first point omitted
040991             0574*  plot_sl_last: equ 0x20
040991             0575*  
040991             0576*  ; &28-&2F 	40-47 	Solid line, both points omitted
040991             0577*  plot_sl_none: equ 0x28
040991             0578*  
040991             0579*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
040991             0580*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
040991             0581*  
040991             0582*  ; &40-&47 	64-71 	Point plot
040991             0583*  plot_pt: equ 0x40
040991             0584*  
040991             0585*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
040991             0586*  plot_lf_lr_non_bg: equ 0x48
040991             0587*  
040991             0588*  ; &50-&57 	80-87 	Triangle fill
040991             0589*  plot_tf: equ 0x50
040991             0590*  
040991             0591*  ; &58-&5F 	88-95 	Line fill right to background §§
040991             0592*  plot_lf_r_bg: equ 0x58
040991             0593*  
040991             0594*  ; &60-&67 	96-103 	Rectangle fill
040991             0595*  plot_rf: equ 0x60
040991             0596*  
040991             0597*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
040991             0598*  plot_lf_lr_fg: equ 0x60
040991             0599*  
040991             0600*  ; &70-&77 	112-119 	Parallelogram fill
040991             0601*  plot_pf: equ 0x70
040991             0602*  
040991             0603*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
040991             0604*  plot_lf_r_non_fg: equ 0x78
040991             0605*  
040991             0606*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
040991             0607*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
040991             0608*  
040991             0609*  ; &90-&97 	144-151 	Circle outline
040991             0610*  plot_co: equ 0x90
040991             0611*  
040991             0612*  ; &98-&9F 	152-159 	Circle fill
040991             0613*  plot_cf: equ 0x98
040991             0614*  
040991             0615*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
040991             0616*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
040991             0617*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
040991             0618*  
040991             0619*  ; &B8-&BF 	184-191 	Rectangle copy/move
040991             0620*  plot_rcm: equ 0xB8
040991             0621*  
040991             0622*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
040991             0623*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
040991             0624*  ; &D0-&D7 	208-215 	Not defined
040991             0625*  ; &D8-&DF 	216-223 	Not defined
040991             0626*  ; &E0-&E7 	224-231 	Not defined
040991             0627*  
040991             0628*  ; &E8-&EF 	232-239 	Bitmap plot §
040991             0629*  plot_bmp: equ 0xE8
040991             0630*  
040991             0631*  ; &F0-&F7 	240-247 	Not defined
040991             0632*  ; &F8-&FF 	248-255 	Not defined
040991             0633*  
040991             0634*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
040991             0635*  ; Agon Console8 VDP 2.2.0
040991             0636*  
040991             0637*  ; Within each group of eight plot codes, the effects are as follows:
040991             0638*  ; Plot code 	Effect
040991             0639*  ; 0 	Move relative
040991             0640*  mv_rel: equ 0
040991             0641*  
040991             0642*  ; 1 	Plot relative in current foreground colour
040991             0643*  dr_rel_fg: equ 1
040991             0644*  
040991             0645*  ; 2 	Not supported (Plot relative in logical inverse colour)
040991             0646*  ; 3 	Plot relative in current background colour
040991             0647*  dr_rel_bg: equ 3
040991             0648*  
040991             0649*  ; 4 	Move absolute
040991             0650*  mv_abs: equ 4
040991             0651*  
040991             0652*  ; 5 	Plot absolute in current foreground colour
040991             0653*  dr_abs_fg: equ 5
040991             0654*  
040991             0655*  ; 6 	Not supported (Plot absolute in logical inverse colour)
040991             0656*  ; 7 	Plot absolute in current background colour
040991             0657*  dr_abs_bg: equ 7
040991             0658*  
040991             0659*  ; Codes 0-3 use the position data provided as part of the command
040991             0660*  ; as a relative position, adding the position given to the current
040991             0661*  ; graphical cursor position. Codes 4-7 use the position data provided
040991             0662*  ; as part of the command as an absolute position, setting the current
040991             0663*  ; graphical cursor position to the position given.
040991             0664*  
040991             0665*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
040991             0666*  ; current pixel colour. These operations cannot currently be supported
040991             0667*  ; by the graphics system the Agon VDP uses, so these codes are not
040991             0668*  ; supported. Support for these codes may be added in a future version
040991             0669*  ; of the VDP firmware.
040991             0670*  
040991             0671*  ; 16 colour palette constants
040991             0672*  c_black: equ 0
040991             0673*  c_red_dk: equ 1
040991             0674*  c_green_dk: equ 2
040991             0675*  c_yellow_dk: equ 3
040991             0676*  c_blue_dk: equ 4
040991             0677*  c_magenta_dk: equ 5
040991             0678*  c_cyan_dk: equ 6
040991             0679*  c_grey: equ 7
040991             0680*  c_grey_dk: equ 8
040991             0681*  c_red: equ 9
040991             0682*  c_green: equ 10
040991             0683*  c_yellow: equ 11
040991             0684*  c_blue: equ 12
040991             0685*  c_magenta: equ 13
040991             0686*  c_cyan: equ 14
040991             0687*  c_white: equ 15
040991             0688*  
040991             0689*  ; VDU 25, mode, x; y;: PLOT command
040991             0690*  ; inputs: a=mode, bc=x0, de=y0
040991             0691*  vdu_plot:
040991 32 AB 09 04 0692*      ld (@mode),a
040995 ED 43 AC 09 0693*      ld (@x0),bc
       04          
04099A ED 53 AE 09 0694*      ld (@y0),de
       04          
04099F 21 AA 09 04 0695*  	ld hl,@cmd
0409A3 01 06 00 00 0696*  	ld bc,@end-@cmd
0409A7 5B DF       0697*  	rst.lil $18
0409A9 C9          0698*  	ret
0409AA 19          0699*  @cmd:   db 25
0409AB 00          0700*  @mode:  db 0
0409AC 00 00       0701*  @x0: 	dw 0
0409AE 00 00       0702*  @y0: 	dw 0
0409B0 00          0703*  @end:   db 0 ; extra byte to soak up deu
0409B1             0704*  
0409B1             0705*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0409B1             0706*  ; &E8-&EF 	232-239 	Bitmap plot §
0409B1             0707*  ; VDU 25, mode, x; y;: PLOT command
0409B1             0708*  ; inputs: bc=x0, de=y0
0409B1             0709*  ; prerequisites: vdu_buff_select
0409B1             0710*  vdu_plot_bmp:
0409B1 ED 43 C8 09 0711*      ld (@x0),bc
       04          
0409B6 ED 53 CA 09 0712*      ld (@y0),de
       04          
0409BB 21 C6 09 04 0713*  	ld hl,@cmd
0409BF 01 06 00 00 0714*  	ld bc,@end-@cmd
0409C3 5B DF       0715*  	rst.lil $18
0409C5 C9          0716*  	ret
0409C6 19          0717*  @cmd:   db 25
0409C7 ED          0718*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
0409C8 00 00       0719*  @x0: 	dw 0x0000
0409CA 00 00       0720*  @y0: 	dw 0x0000
0409CC 00          0721*  @end:   db 0x00 ; padding
0409CD             0722*  
0409CD             0723*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0409CD             0724*  ; &E8-&EF 	232-239 	Bitmap plot §
0409CD             0725*  ; VDU 25, mode, x; y;: PLOT command
0409CD             0726*  ; inputs: bc=x0, de=y0
0409CD             0727*  ; USING 16.8 FIXED POINT COORDINATES
0409CD             0728*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
0409CD             0729*  ;   the fractional portiion of the inputs are truncated
0409CD             0730*  ;   leaving only the 16-bit integer portion
0409CD             0731*  ; prerequisites: vdu_buff_select
0409CD             0732*  vdu_plot_bmp168:
0409CD             0733*  ; populate in the reverse of normal to keep the
0409CD             0734*  ; inputs from stomping on each other
0409CD ED 53 EB 09 0735*      ld (@y0-1),de
       04          
0409D2 ED 43 E9 09 0736*      ld (@x0-1),bc
       04          
0409D7 3E ED       0737*      ld a,plot_bmp+dr_abs_fg ; 0xED
0409D9 32 E9 09 04 0738*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
0409DD 21 E8 09 04 0739*  	ld hl,@cmd
0409E1 01 06 00 00 0740*  	ld bc,@end-@cmd
0409E5 5B DF       0741*  	rst.lil $18
0409E7 C9          0742*  	ret
0409E8 19          0743*  @cmd:   db 25
0409E9 ED          0744*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
0409EA 00 00       0745*  @x0: 	dw 0x0000
0409EC 00 00       0746*  @y0: 	dw 0x0000
0409EE             0747*  @end:  ; no padding required b/c we shifted de right
0409EE             0748*  
0409EE             0749*  ; draw a filled rectangle
0409EE             0750*  vdu_plot_rf:
0409EE ED 43 15 0A 0751*      ld (@x0),bc
       04          
0409F3 ED 53 17 0A 0752*      ld (@y0),de
       04          
0409F8 DD 22 1B 0A 0753*      ld (@x1),ix
       04          
0409FD FD 22 1D 0A 0754*      ld (@y1),iy
       04          
040A02 3E 19       0755*      ld a,25 ; we have to reload the 2nd plot command
040A04 32 19 0A 04 0756*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
040A08 21 13 0A 04 0757*  	ld hl,@cmd0
040A0C 01 0C 00 00 0758*  	ld bc,@end-@cmd0
040A10 5B DF       0759*  	rst.lil $18
040A12 C9          0760*      ret
040A13 19          0761*  @cmd0:  db 25 ; plot
040A14 04          0762*  @arg0:  db plot_sl_both+mv_abs
040A15 00 00       0763*  @x0:    dw 0x0000
040A17 00 00       0764*  @y0:    dw 0x0000
040A19 19          0765*  @cmd1:  db 25 ; plot
040A1A 65          0766*  @arg1:  db plot_rf+dr_abs_fg
040A1B 00 00       0767*  @x1:    dw 0x0000
040A1D 00 00       0768*  @y1:    dw 0x0000
040A1F 00          0769*  @end:   db 0x00 ; padding
040A20             0770*  
040A20             0771*  ; draw a filled circle
040A20             0772*  vdu_plot_cf:
040A20 ED 43 47 0A 0773*      ld (@x0),bc
       04          
040A25 ED 53 49 0A 0774*      ld (@y0),de
       04          
040A2A DD 22 4D 0A 0775*      ld (@x1),ix
       04          
040A2F FD 22 4F 0A 0776*      ld (@y1),iy
       04          
040A34 3E 19       0777*      ld a,25 ; we have to reload the 2nd plot command
040A36 32 4B 0A 04 0778*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
040A3A 21 45 0A 04 0779*  	ld hl,@cmd0
040A3E 01 0C 00 00 0780*  	ld bc,@end-@cmd0
040A42 5B DF       0781*  	rst.lil $18
040A44 C9          0782*      ret
040A45 19          0783*  @cmd0:  db 25 ; plot
040A46 04          0784*  @arg0:  db plot_sl_both+mv_abs
040A47 00 00       0785*  @x0:    dw 0x0000
040A49 00 00       0786*  @y0:    dw 0x0000
040A4B 19          0787*  @cmd1:  db 25 ; plot
040A4C 9D          0788*  @arg1:  db plot_cf+dr_abs_fg
040A4D 00 00       0789*  @x1:    dw 0x0000
040A4F 00 00       0790*  @y1:    dw 0x0000
040A51 00          0791*  @end:   db 0x00 ; padding
040A52             0792*  
040A52             0793*  
040A52             0794*  ; VDU 23, 27, 4, n: Select sprite n
040A52             0795*  ; inputs: a is the 8-bit sprite id
040A52             0796*  vdu_sprite_select:
040A52 32 64 0A 04 0797*      ld (@sprite),a
040A56 21 61 0A 04 0798*      ld hl,@cmd
040A5A 01 04 00 00 0799*      ld bc,@end-@cmd
040A5E 5B DF       0800*      rst.lil $18
040A60 C9          0801*      ret
040A61 17 1B 04    0802*  @cmd:    db 23,27,4
040A64 00          0803*  @sprite: db 0x00
040A65             0804*  @end:
040A65             0805*  
040A65             0806*  ; VDU 23, 27, 5: Clear frames in current sprite
040A65             0807*  ; inputs: none
040A65             0808*  ; prerequisites: vdu_sprite_select
040A65             0809*  vdu_sprite_clear_frames:
040A65 21 70 0A 04 0810*      ld hl,@cmd
040A69 01 03 00 00 0811*      ld bc,@end-@cmd
040A6D 5B DF       0812*      rst.lil $18
040A6F C9          0813*      ret
040A70 17 1B 05    0814*  @cmd: db 23,27,5
040A73             0815*  @end:
040A73             0816*  
040A73             0817*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
040A73             0818*  ; inputs: a is the 8-bit bitmap number
040A73             0819*  ; prerequisites: vdu_sprite_select
040A73             0820*  vdu_sprite_add_bmp:
040A73 32 85 0A 04 0821*      ld (@bmp),a
040A77 21 82 0A 04 0822*      ld hl,@cmd
040A7B 01 04 00 00 0823*      ld bc,@end-@cmd
040A7F 5B DF       0824*      rst.lil $18
040A81 C9          0825*      ret
040A82 17 1B 06    0826*  @cmd: db 23,27,6
040A85 00          0827*  @bmp: db 0x00
040A86             0828*  @end:
040A86             0829*  
040A86             0830*  ; VDU 23, 27, 7, n: Activate n sprites
040A86             0831*  ; inputs: a is the number of sprites to activate
040A86             0832*  vdu_sprite_activate:
040A86 32 98 0A 04 0833*      ld (@num),a
040A8A 21 95 0A 04 0834*      ld hl,@cmd
040A8E 01 04 00 00 0835*      ld bc,@end-@cmd
040A92 5B DF       0836*      rst.lil $18
040A94 C9          0837*      ret
040A95 17 1B 07    0838*  @cmd: db 23,27,7
040A98 00          0839*  @num: db 0x00
040A99             0840*  @end:
040A99             0841*  
040A99             0842*  ; VDU 23, 27, 8: Select next frame of current sprite
040A99             0843*  ; inputs: none
040A99             0844*  ; prerequisites: vdu_sprite_select
040A99             0845*  vdu_sprite_next_frame:
040A99 21 A4 0A 04 0846*      ld hl,@cmd
040A9D 01 03 00 00 0847*      ld bc,@end-@cmd
040AA1 5B DF       0848*      rst.lil $18
040AA3 C9          0849*      ret
040AA4 17 1B 08    0850*  @cmd: db 23,27,8
040AA7             0851*  @end:
040AA7             0852*  
040AA7             0853*  ; VDU 23, 27, 9: Select previous frame of current sprite
040AA7             0854*  ; inputs: none
040AA7             0855*  ; prerequisites: vdu_sprite_select
040AA7             0856*  vdu_sprite_prev_frame:
040AA7 21 B2 0A 04 0857*      ld hl,@cmd
040AAB 01 03 00 00 0858*      ld bc,@end-@cmd
040AAF 5B DF       0859*      rst.lil $18
040AB1 C9          0860*      ret
040AB2 17 1B 09    0861*  @cmd: db 23,27,9
040AB5             0862*  @end:
040AB5             0863*  
040AB5             0864*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
040AB5             0865*  ; inputs: a is frame number to select
040AB5             0866*  ; prerequisites: vdu_sprite_select
040AB5             0867*  vdu_sprite_select_frame:
040AB5 32 C7 0A 04 0868*      ld (@frame),a
040AB9 21 C4 0A 04 0869*      ld hl,@cmd
040ABD 01 04 00 00 0870*      ld bc,@end-@cmd
040AC1 5B DF       0871*      rst.lil $18
040AC3 C9          0872*      ret
040AC4 17 1B 0A    0873*  @cmd:    db 23,27,10
040AC7 00          0874*  @frame:  db 0x00
040AC8             0875*  @end:
040AC8             0876*  
040AC8             0877*  ; VDU 23, 27, 11: Show current sprite
040AC8             0878*  ; inputs: none
040AC8             0879*  ; prerequisites: vdu_sprite_select
040AC8             0880*  vdu_sprite_show:
040AC8 21 D3 0A 04 0881*      ld hl,@cmd
040ACC 01 03 00 00 0882*      ld bc,@end-@cmd
040AD0 5B DF       0883*      rst.lil $18
040AD2 C9          0884*      ret
040AD3 17 1B 0B    0885*  @cmd: db 23,27,11
040AD6             0886*  @end:
040AD6             0887*  
040AD6             0888*  ; VDU 23, 27, 12: Hide current sprite
040AD6             0889*  ; inputs: none
040AD6             0890*  ; prerequisites: vdu_sprite_select
040AD6             0891*  vdu_sprite_hide:
040AD6 21 E1 0A 04 0892*      ld hl,@cmd
040ADA 01 03 00 00 0893*      ld bc,@end-@cmd
040ADE 5B DF       0894*      rst.lil $18
040AE0 C9          0895*      ret
040AE1 17 1B 0C    0896*  @cmd: db 23,27,12
040AE4             0897*  @end:
040AE4             0898*  
040AE4             0899*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
040AE4             0900*  ; inputs: bc is x coordinate, de is y coordinate
040AE4             0901*  ; prerequisites: vdu_sprite_select
040AE4             0902*  vdu_sprite_move_abs:
040AE4 ED 43 FC 0A 0903*      ld (@xpos),bc
       04          
040AE9 ED 53 FE 0A 0904*      ld (@ypos),de
       04          
040AEE 21 F9 0A 04 0905*      ld hl,@cmd
040AF2 01 07 00 00 0906*      ld bc,@end-@cmd
040AF6 5B DF       0907*      rst.lil $18
040AF8 C9          0908*      ret
040AF9 17 1B 0D    0909*  @cmd:  db 23,27,13
040AFC 00 00       0910*  @xpos: dw 0x0000
040AFE 00 00       0911*  @ypos: dw 0x0000
040B00 00          0912*  @end:  db 0x00 ; padding
040B01             0913*  
040B01             0914*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
040B01             0915*  ; inputs: bc is x coordinate, de is y coordinate
040B01             0916*  ; prerequisites: vdu_sprite_select
040B01             0917*  vdu_sprite_move_rel:
040B01 ED 43 19 0B 0918*      ld (@dx),bc
       04          
040B06 ED 53 1B 0B 0919*      ld (@dy),de
       04          
040B0B 21 16 0B 04 0920*      ld hl,@cmd
040B0F 01 07 00 00 0921*      ld bc,@end-@cmd
040B13 5B DF       0922*      rst.lil $18
040B15 C9          0923*      ret
040B16 17 1B 0E    0924*  @cmd: db 23,27,14
040B19 00 00       0925*  @dx:  dw 0x0000
040B1B 00 00       0926*  @dy:  dw 0x0000
040B1D 00          0927*  @end: db 0x00 ; padding
040B1E             0928*  
040B1E             0929*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
040B1E             0930*  ; USING 16.8 FIXED POINT COORDINATES
040B1E             0931*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
040B1E             0932*  ;   the fractional portiion of the inputs are truncated
040B1E             0933*  ;   leaving only the 16-bit integer portion
040B1E             0934*  ; prerequisites: vdu_sprite_select
040B1E             0935*  vdu_sprite_move_abs168:
040B1E             0936*  ; populate in the reverse of normal to keep the
040B1E             0937*  ; inputs from stomping on each other
040B1E ED 53 3D 0B 0938*      ld (@ypos-1),de
       04          
040B23 ED 43 3B 0B 0939*      ld (@xpos-1),bc
       04          
040B28 3E 0D       0940*      ld a,13       ; restore the final byte of the command
040B2A 32 3B 0B 04 0941*      ld (@cmd+2),a ; string that got stomped on by bcu
040B2E 21 39 0B 04 0942*      ld hl,@cmd
040B32 01 07 00 00 0943*      ld bc,@end-@cmd
040B36 5B DF       0944*      rst.lil $18
040B38 C9          0945*      ret
040B39 17 1B 0D    0946*  @cmd:  db 23,27,13
040B3C 00 00       0947*  @xpos: dw 0x0000
040B3E 00 00       0948*  @ypos: dw 0x0000
040B40             0949*  @end:  ; no padding required b/c we shifted de right
040B40             0950*  
040B40             0951*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
040B40             0952*  ; USING 16.8 FIXED POINT COORDINATES
040B40             0953*  ; inputs: ub.c is dx, ud.e is dy
040B40             0954*  ;   the fractional portiion of the inputs are truncated
040B40             0955*  ;   leaving only the 16-bit integer portion
040B40             0956*  ; prerequisites: vdu_sprite_select
040B40             0957*  vdu_sprite_move_rel168:
040B40             0958*  ; populate in the reverse of normal to keep the
040B40             0959*  ; inputs from stomping on each other
040B40 ED 53 5F 0B 0960*      ld (@dy-1),de
       04          
040B45 ED 43 5D 0B 0961*      ld (@dx-1),bc
       04          
040B4A 3E 0E       0962*      ld a,14       ; restore the final byte of the command
040B4C 32 5D 0B 04 0963*      ld (@cmd+2),a ; string that got stomped on by bcu
040B50 21 5B 0B 04 0964*      ld hl,@cmd
040B54 01 07 00 00 0965*      ld bc,@end-@cmd
040B58 5B DF       0966*      rst.lil $18
040B5A C9          0967*      ret
040B5B 17 1B 0E    0968*  @cmd:  db 23,27,14
040B5E 00 00       0969*  @dx: dw 0x0000
040B60 00 00       0970*  @dy: dw 0x0000
040B62             0971*  @end:  ; no padding required b/c we shifted de right
040B62             0972*  
040B62             0973*  ; VDU 23, 27, 15: Update the sprites in the GPU
040B62             0974*  ; inputs: none
040B62             0975*  vdu_sprite_update:
040B62 21 6D 0B 04 0976*      ld hl,@cmd
040B66 01 03 00 00 0977*      ld bc,@end-@cmd
040B6A 5B DF       0978*      rst.lil $18
040B6C C9          0979*      ret
040B6D 17 1B 0F    0980*  @cmd: db 23,27,15
040B70             0981*  @end:
040B70             0982*  
040B70             0983*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
040B70             0984*  ; inputs: none
040B70             0985*  vdu_sprite_bmp_reset:
040B70 21 7B 0B 04 0986*      ld hl,@cmd
040B74 01 03 00 00 0987*      ld bc,@end-@cmd
040B78 5B DF       0988*      rst.lil $18
040B7A C9          0989*      ret
040B7B 17 1B 10    0990*  @cmd: db 23,27,16
040B7E             0991*  @end:
040B7E             0992*  
040B7E             0993*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
040B7E             0994*  ; inputs: none
040B7E             0995*  vdu_sprite_reset:
040B7E 21 89 0B 04 0996*      ld hl,@cmd
040B82 01 03 00 00 0997*      ld bc,@end-@cmd
040B86 5B DF       0998*      rst.lil $18
040B88 C9          0999*      ret
040B89 17 1B 11    1000*  @cmd: db 23,27,17
040B8C             1001*  @end:
040B8C             1002*  
040B8C             1003*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
040B8C             1004*  ; inputs: a is the GCOL paint mode
040B8C             1005*  ; prerequisites: vdu_sprite_select
040B8C             1006*  vdu_sprite_set_gcol:
040B8C 32 9E 0B 04 1007*      ld (@mode),a
040B90 21 9B 0B 04 1008*      ld hl,@cmd
040B94 01 04 00 00 1009*      ld bc,@end-@cmd
040B98 5B DF       1010*      rst.lil $18
040B9A C9          1011*      ret
040B9B 17 1B 12    1012*  @cmd:  db 23,27,18
040B9E 00          1013*  @mode: db 0x00
040B9F             1014*  @end:
040B9F             1015*  
040B9F             1016*  ; VDU 23, 27, &26, n;: Add bitmap bufferId
040B9F             1017*  ;     as a frame to current sprite using a 16-bit buffer ID
040B9F             1018*  ; inputs: hl=bufferId
040B9F             1019*  ; prerequisites: vdu_sprite_select
040B9F             1020*  vdu_sprite_add_buff:
040B9F 22 B1 0B 04 1021*      ld (@bufferId),hl
040BA3 21 AE 0B 04 1022*      ld hl,@cmd
040BA7 01 05 00 00 1023*      ld bc,@end-@cmd
040BAB 5B DF       1024*      rst.lil $18
040BAD C9          1025*      ret
040BAE 17 1B 26    1026*  @cmd:      db 23,27,0x26
040BB1 00 00       1027*  @bufferId: dw 0x0000
040BB3 00          1028*  @end:      db 0x00 ; padding
040BB4             0154       include "organ/src/asm/organ_channels.asm"
040BB4             0001*  play_notes:
040BB4             0002*  
040BB4 21 BF 0B 04 0003*      ld hl,play_notes_cmd
040BB8 01 A0 01 00 0004*      ld bc,play_notes_end-play_notes_cmd
040BBC 5B DF       0005*      rst.lil $18
040BBE C9          0006*      ret
040BBF             0007*  play_notes_cmd:
040BBF             0008*  
040BBF             0009*  cmd0:
040BBF 17 00 85 00 0010*                db 23, 0, $85, 0, 3
       03          
040BC4 00 00       0011*  frequency0:   dw 0
040BC6 17 00 85 00 0012*                db 23, 0, $85, 0, 2
       02          
040BCB 00          0013*  volume0:      db 0
040BCC             0014*  
040BCC             0015*  cmd1:
040BCC 17 00 85 01 0016*                db 23, 0, $85, 1, 3
       03          
040BD1 00 00       0017*  frequency1:   dw 0
040BD3 17 00 85 01 0018*                db 23, 0, $85, 1, 2
       02          
040BD8 00          0019*  volume1:      db 0
040BD9             0020*  
040BD9             0021*  cmd2:
040BD9 17 00 85 02 0022*                db 23, 0, $85, 2, 3
       03          
040BDE 00 00       0023*  frequency2:   dw 0
040BE0 17 00 85 02 0024*                db 23, 0, $85, 2, 2
       02          
040BE5 00          0025*  volume2:      db 0
040BE6             0026*  
040BE6             0027*  cmd3:
040BE6 17 00 85 03 0028*                db 23, 0, $85, 3, 3
       03          
040BEB 00 00       0029*  frequency3:   dw 0
040BED 17 00 85 03 0030*                db 23, 0, $85, 3, 2
       02          
040BF2 00          0031*  volume3:      db 0
040BF3             0032*  
040BF3             0033*  cmd4:
040BF3 17 00 85 04 0034*                db 23, 0, $85, 4, 3
       03          
040BF8 00 00       0035*  frequency4:   dw 0
040BFA 17 00 85 04 0036*                db 23, 0, $85, 4, 2
       02          
040BFF 00          0037*  volume4:      db 0
040C00             0038*  
040C00             0039*  cmd5:
040C00 17 00 85 05 0040*                db 23, 0, $85, 5, 3
       03          
040C05 00 00       0041*  frequency5:   dw 0
040C07 17 00 85 05 0042*                db 23, 0, $85, 5, 2
       02          
040C0C 00          0043*  volume5:      db 0
040C0D             0044*  
040C0D             0045*  cmd6:
040C0D 17 00 85 06 0046*                db 23, 0, $85, 6, 3
       03          
040C12 00 00       0047*  frequency6:   dw 0
040C14 17 00 85 06 0048*                db 23, 0, $85, 6, 2
       02          
040C19 00          0049*  volume6:      db 0
040C1A             0050*  
040C1A             0051*  cmd7:
040C1A 17 00 85 07 0052*                db 23, 0, $85, 7, 3
       03          
040C1F 00 00       0053*  frequency7:   dw 0
040C21 17 00 85 07 0054*                db 23, 0, $85, 7, 2
       02          
040C26 00          0055*  volume7:      db 0
040C27             0056*  
040C27             0057*  cmd8:
040C27 17 00 85 08 0058*                db 23, 0, $85, 8, 3
       03          
040C2C 00 00       0059*  frequency8:   dw 0
040C2E 17 00 85 08 0060*                db 23, 0, $85, 8, 2
       02          
040C33 00          0061*  volume8:      db 0
040C34             0062*  
040C34             0063*  cmd9:
040C34 17 00 85 09 0064*                db 23, 0, $85, 9, 3
       03          
040C39 00 00       0065*  frequency9:   dw 0
040C3B 17 00 85 09 0066*                db 23, 0, $85, 9, 2
       02          
040C40 00          0067*  volume9:      db 0
040C41             0068*  
040C41             0069*  cmd10:
040C41 17 00 85 0A 0070*                db 23, 0, $85, 10, 3
       03          
040C46 00 00       0071*  frequency10:   dw 0
040C48 17 00 85 0A 0072*                db 23, 0, $85, 10, 2
       02          
040C4D 00          0073*  volume10:      db 0
040C4E             0074*  
040C4E             0075*  cmd11:
040C4E 17 00 85 0B 0076*                db 23, 0, $85, 11, 3
       03          
040C53 00 00       0077*  frequency11:   dw 0
040C55 17 00 85 0B 0078*                db 23, 0, $85, 11, 2
       02          
040C5A 00          0079*  volume11:      db 0
040C5B             0080*  
040C5B             0081*  cmd12:
040C5B 17 00 85 0C 0082*                db 23, 0, $85, 12, 3
       03          
040C60 00 00       0083*  frequency12:   dw 0
040C62 17 00 85 0C 0084*                db 23, 0, $85, 12, 2
       02          
040C67 00          0085*  volume12:      db 0
040C68             0086*  
040C68             0087*  cmd13:
040C68 17 00 85 0D 0088*                db 23, 0, $85, 13, 3
       03          
040C6D 00 00       0089*  frequency13:   dw 0
040C6F 17 00 85 0D 0090*                db 23, 0, $85, 13, 2
       02          
040C74 00          0091*  volume13:      db 0
040C75             0092*  
040C75             0093*  cmd14:
040C75 17 00 85 0E 0094*                db 23, 0, $85, 14, 3
       03          
040C7A 00 00       0095*  frequency14:   dw 0
040C7C 17 00 85 0E 0096*                db 23, 0, $85, 14, 2
       02          
040C81 00          0097*  volume14:      db 0
040C82             0098*  
040C82             0099*  cmd15:
040C82 17 00 85 0F 0100*                db 23, 0, $85, 15, 3
       03          
040C87 00 00       0101*  frequency15:   dw 0
040C89 17 00 85 0F 0102*                db 23, 0, $85, 15, 2
       02          
040C8E 00          0103*  volume15:      db 0
040C8F             0104*  
040C8F             0105*  cmd16:
040C8F 17 00 85 10 0106*                db 23, 0, $85, 16, 3
       03          
040C94 00 00       0107*  frequency16:   dw 0
040C96 17 00 85 10 0108*                db 23, 0, $85, 16, 2
       02          
040C9B 00          0109*  volume16:      db 0
040C9C             0110*  
040C9C             0111*  cmd17:
040C9C 17 00 85 11 0112*                db 23, 0, $85, 17, 3
       03          
040CA1 00 00       0113*  frequency17:   dw 0
040CA3 17 00 85 11 0114*                db 23, 0, $85, 17, 2
       02          
040CA8 00          0115*  volume17:      db 0
040CA9             0116*  
040CA9             0117*  cmd18:
040CA9 17 00 85 12 0118*                db 23, 0, $85, 18, 3
       03          
040CAE 00 00       0119*  frequency18:   dw 0
040CB0 17 00 85 12 0120*                db 23, 0, $85, 18, 2
       02          
040CB5 00          0121*  volume18:      db 0
040CB6             0122*  
040CB6             0123*  cmd19:
040CB6 17 00 85 13 0124*                db 23, 0, $85, 19, 3
       03          
040CBB 00 00       0125*  frequency19:   dw 0
040CBD 17 00 85 13 0126*                db 23, 0, $85, 19, 2
       02          
040CC2 00          0127*  volume19:      db 0
040CC3             0128*  
040CC3             0129*  cmd20:
040CC3 17 00 85 14 0130*                db 23, 0, $85, 20, 3
       03          
040CC8 00 00       0131*  frequency20:   dw 0
040CCA 17 00 85 14 0132*                db 23, 0, $85, 20, 2
       02          
040CCF 00          0133*  volume20:      db 0
040CD0             0134*  
040CD0             0135*  cmd21:
040CD0 17 00 85 15 0136*                db 23, 0, $85, 21, 3
       03          
040CD5 00 00       0137*  frequency21:   dw 0
040CD7 17 00 85 15 0138*                db 23, 0, $85, 21, 2
       02          
040CDC 00          0139*  volume21:      db 0
040CDD             0140*  
040CDD             0141*  cmd22:
040CDD 17 00 85 16 0142*                db 23, 0, $85, 22, 3
       03          
040CE2 00 00       0143*  frequency22:   dw 0
040CE4 17 00 85 16 0144*                db 23, 0, $85, 22, 2
       02          
040CE9 00          0145*  volume22:      db 0
040CEA             0146*  
040CEA             0147*  cmd23:
040CEA 17 00 85 17 0148*                db 23, 0, $85, 23, 3
       03          
040CEF 00 00       0149*  frequency23:   dw 0
040CF1 17 00 85 17 0150*                db 23, 0, $85, 23, 2
       02          
040CF6 00          0151*  volume23:      db 0
040CF7             0152*  
040CF7             0153*  cmd24:
040CF7 17 00 85 18 0154*                db 23, 0, $85, 24, 3
       03          
040CFC 00 00       0155*  frequency24:   dw 0
040CFE 17 00 85 18 0156*                db 23, 0, $85, 24, 2
       02          
040D03 00          0157*  volume24:      db 0
040D04             0158*  
040D04             0159*  cmd25:
040D04 17 00 85 19 0160*                db 23, 0, $85, 25, 3
       03          
040D09 00 00       0161*  frequency25:   dw 0
040D0B 17 00 85 19 0162*                db 23, 0, $85, 25, 2
       02          
040D10 00          0163*  volume25:      db 0
040D11             0164*  
040D11             0165*  cmd26:
040D11 17 00 85 1A 0166*                db 23, 0, $85, 26, 3
       03          
040D16 00 00       0167*  frequency26:   dw 0
040D18 17 00 85 1A 0168*                db 23, 0, $85, 26, 2
       02          
040D1D 00          0169*  volume26:      db 0
040D1E             0170*  
040D1E             0171*  cmd27:
040D1E 17 00 85 1B 0172*                db 23, 0, $85, 27, 3
       03          
040D23 00 00       0173*  frequency27:   dw 0
040D25 17 00 85 1B 0174*                db 23, 0, $85, 27, 2
       02          
040D2A 00          0175*  volume27:      db 0
040D2B             0176*  
040D2B             0177*  cmd28:
040D2B 17 00 85 1C 0178*                db 23, 0, $85, 28, 3
       03          
040D30 00 00       0179*  frequency28:   dw 0
040D32 17 00 85 1C 0180*                db 23, 0, $85, 28, 2
       02          
040D37 00          0181*  volume28:      db 0
040D38             0182*  
040D38             0183*  cmd29:
040D38 17 00 85 1D 0184*                db 23, 0, $85, 29, 3
       03          
040D3D 00 00       0185*  frequency29:   dw 0
040D3F 17 00 85 1D 0186*                db 23, 0, $85, 29, 2
       02          
040D44 00          0187*  volume29:      db 0
040D45             0188*  
040D45             0189*  cmd30:
040D45 17 00 85 1E 0190*                db 23, 0, $85, 30, 3
       03          
040D4A 00 00       0191*  frequency30:   dw 0
040D4C 17 00 85 1E 0192*                db 23, 0, $85, 30, 2
       02          
040D51 00          0193*  volume30:      db 0
040D52             0194*  
040D52             0195*  cmd31:
040D52 17 00 85 1F 0196*                db 23, 0, $85, 31, 3
       03          
040D57 00 00       0197*  frequency31:   dw 0
040D59 17 00 85 1F 0198*                db 23, 0, $85, 31, 2
       02          
040D5E 00          0199*  volume31:      db 0
040D5F             0200*  
040D5F             0201*  
040D5F             0202*  play_notes_end:
040D5F             0155       include "organ/src/asm/organ_drawbars.asm"
040D5F 08 08 08 08 0001*  drawbar_volumes: blkb 9,8 ; 9 drawbars, default volume 8
       08 08 08 08 
       08          
040D68 00 00 00 00 0002*  drawbar_timers: blkb 9*6,0 ; 9 drawbars, 6 bytes per timer, default 0
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00       
040D9E             0003*  
040D9E             0004*  set_drawbar:
040D9E E5          0005*      push hl
040D9F CD B1 06 04 0006*      call timer_get
040DA3 E1          0007*      pop hl
040DA4 F0          0008*      ret p
040DA5 E5          0009*      push hl
040DA6 21 1E 00 00 0010*      ld hl,120/4 ; 1/4 second
040DAA CD A3 06 04 0011*      call timer_set
040DAE E1          0012*      pop hl
040DAF 34          0013*      inc (hl)
040DB0 3E 09       0014*      ld a,9
040DB2 BE          0015*      cp (hl)
040DB3 C0          0016*      ret nz
040DB4 AF          0017*      xor a
040DB5 77          0018*      ld (hl),a
040DB6 C9          0019*      ret
040DB7             0020*  
040DB7             0021*  ; change drawbar settings based on keypresses and set bank volumes accordingly
040DB7             0022*  ; inputs: ix pointing to virtual keys table
040DB7             0023*  ; outputs: drawbar settings changed
040DB7             0024*  ; destroys: everything
040DB7             0025*  set_drawbars:
040DB7 21 5F 0D 04 0026*      ld hl,drawbar_volumes
040DBB FD 21 68 0D 0027*      ld iy,drawbar_timers
       04          
040DC0             0028*  ; 114 F1
040DC0 DD CB 0E 4E 0029*      bit 1,(ix+14)
040DC4 28 08       0030*      jr z,@F1
040DC6 DD E5       0031*      push ix
040DC8 CD 9E 0D 04 0032*      call set_drawbar
040DCC DD E1       0033*      pop ix
040DCE             0034*  @F1:
040DCE 23          0035*      inc hl
040DCF ED 33 06    0036*      lea iy,iy+6
040DD2             0037*  ; 115 F2
040DD2 DD CB 0E 56 0038*      bit 2,(ix+14)
040DD6 28 08       0039*      jr z,@F2
040DD8 DD E5       0040*      push ix
040DDA CD 9E 0D 04 0041*      call set_drawbar
040DDE DD E1       0042*      pop ix
040DE0             0043*  @F2:
040DE0 23          0044*      inc hl
040DE1 ED 33 06    0045*      lea iy,iy+6
040DE4             0046*  ; 116 F3
040DE4 DD CB 0E 5E 0047*      bit 3,(ix+14)
040DE8 28 08       0048*      jr z,@F3
040DEA DD E5       0049*      push ix
040DEC CD 9E 0D 04 0050*      call set_drawbar
040DF0 DD E1       0051*      pop ix
040DF2             0052*  @F3:
040DF2 23          0053*      inc hl
040DF3 ED 33 06    0054*      lea iy,iy+6
040DF6             0055*  ; 21 F4
040DF6 DD CB 02 66 0056*      bit 4,(ix+2)
040DFA 28 08       0057*      jr z,@F4
040DFC DD E5       0058*      push ix
040DFE CD 9E 0D 04 0059*      call set_drawbar
040E02 DD E1       0060*      pop ix
040E04             0061*  @F4:
040E04 23          0062*      inc hl
040E05 ED 33 06    0063*      lea iy,iy+6
040E08             0064*  ; 117 F5
040E08 DD CB 0E 66 0065*      bit 4,(ix+14)
040E0C 28 08       0066*      jr z,@F5
040E0E DD E5       0067*      push ix
040E10 CD 9E 0D 04 0068*      call set_drawbar
040E14 DD E1       0069*      pop ix
040E16             0070*  @F5:
040E16 23          0071*      inc hl
040E17 ED 33 06    0072*      lea iy,iy+6
040E1A             0073*  ; 118 F6
040E1A DD CB 0E 6E 0074*      bit 5,(ix+14)
040E1E 28 08       0075*      jr z,@F6
040E20 DD E5       0076*      push ix
040E22 CD 9E 0D 04 0077*      call set_drawbar
040E26 DD E1       0078*      pop ix
040E28             0079*  @F6:
040E28 23          0080*      inc hl
040E29 ED 33 06    0081*      lea iy,iy+6
040E2C             0082*  ; 23 F7
040E2C DD CB 02 76 0083*      bit 6,(ix+2)
040E30 28 08       0084*      jr z,@F7
040E32 DD E5       0085*      push ix
040E34 CD 9E 0D 04 0086*      call set_drawbar
040E38 DD E1       0087*      pop ix
040E3A             0088*  @F7:
040E3A 23          0089*      inc hl
040E3B ED 33 06    0090*      lea iy,iy+6
040E3E             0091*  ; 119 F8
040E3E DD CB 0E 76 0092*      bit 6,(ix+14)
040E42 28 08       0093*      jr z,@F8
040E44 DD E5       0094*      push ix
040E46 CD 9E 0D 04 0095*      call set_drawbar
040E4A DD E1       0096*      pop ix
040E4C             0097*  @F8:
040E4C 23          0098*      inc hl
040E4D ED 33 06    0099*      lea iy,iy+6
040E50             0100*  ; 120 F9
040E50 DD CB 0E 7E 0101*      bit 7,(ix+14)
040E54 28 08       0102*      jr z,@F9
040E56 DD E5       0103*      push ix
040E58 CD 9E 0D 04 0104*      call set_drawbar
040E5C DD E1       0105*      pop ix
040E5E             0106*  @F9:
040E5E 21 71 0E 04 0107*      ld hl,@str_drawbars
040E62 CD E0 01 04 0108*      call printString
040E66 21 5F 0D 04 0109*      ld hl,drawbar_volumes
040E6A 3E 09       0110*      ld a,9
040E6C CD 49 05 04 0111*      call dumpMemoryHex
040E70 C9          0112*      ret
040E71 44 72 61 77 0113*  @str_drawbars: db "Drawbars:\r\n 1  2  3  4  5  6  7  8  9\r\n",0
       62 61 72 73 
       3A 0D 0A 20 
       31 20 20 32 
       20 20 33 20 
       20 34 20 20 
       35 20 20 36 
       20 20 37 20 
       20 38 20 20 
       39 0D 0A 00 
040E99             0114*  
040E99             0115*  set_volumes:
040E99 0E 20       0116*      ld c,32 ; 32 channels
040E9B 06 54       0117*      ld b,84 ; 84 tonewheels
040E9D DD 21 BF 0B 0118*      ld ix,play_notes_cmd
       04          
040EA2 FD 21 A4 0F 0119*      ld iy,tonewheel_frequencies
       04          
040EA7             0120*  @loop:
040EA7 FD 17 02    0121*      ld de,(iy+2) ; e = drawbar setting, d = tonewheel base volume
040EAA 7B          0122*      ld a,e
040EAB A7          0123*      and a
040EAC 28 2C       0124*      jr z,@next_tonewheel
040EAE 21 00 00 00 0125*      ld hl,0 ; make sure hlu is 0
040EB2 FD 6E 00    0126*      ld l,(iy+0) ; l = tonewheel frequency low byte
040EB5 FD 66 01    0127*      ld h,(iy+1) ; h = tonewheel frequency high byte
040EB8 FE 08       0128*      cp 8
040EBA 28 08       0129*      jr z,@set_volume
040EBC 87          0130*      add a,a ; x 2
040EBD 87          0131*      add a,a ; x 4
040EBE 87          0132*      add a,a ; x 8
040EBF 87          0133*      add a,a ; x 16
040EC0 87          0134*      add a,a ; x 32
040EC1 5F          0135*      ld e,a
040EC2 ED 5C       0136*      mlt de
040EC4             0137*  @set_volume:
040EC4 DD 72 0C    0138*      ld (ix+volume0-play_notes_cmd),d
040EC7 ED 5B E1 0E 0139*      ld de,(vibrato_value)
       04          
040ECC 19          0140*      add hl,de
040ECD DD 75 05    0141*      ld (ix+frequency0-play_notes_cmd),l
040ED0 DD 74 06    0142*      ld (ix+frequency0-play_notes_cmd+1),h
040ED3 ED 32 0D    0143*      lea ix,ix+cmd1-cmd0
040ED6 0D          0144*      dec c
040ED7 20 01       0145*      jr nz,@next_tonewheel
040ED9 C9          0146*      ret
040EDA             0147*  @next_tonewheel:
040EDA ED 33 04    0148*      lea iy,iy+4
040EDD 10 C8       0149*      djnz @loop
040EDF C9          0150*      ret
040EE0             0151*  
040EE0 00          0152*  vibrato_step: db 0
040EE1 00 00 00    0153*  vibrato_value: dl 0
040EE4             0154*  
040EE4             0155*  vibrato_lut:
040EE4 00 00 00    0156*      dl 0 ; 0
040EE7 08 00 00    0157*      dl 8 ; 1
040EEA 0C 00 00    0158*      dl 12 ; 2
040EED 0B 00 00    0159*      dl 11 ; 3
040EF0 05 00 00    0160*      dl 5 ; 4
040EF3 FD FF FF    0161*      dl -3 ; 5
040EF6 F6 FF FF    0162*      dl -10 ; 6
040EF9 F4 FF FF    0163*      dl -12 ; 7
040EFC F8 FF FF    0164*      dl -8 ; 8
040EFF FF FF FF    0165*      dl -1 ; 9
040F02 07 00 00    0166*      dl 7 ; 10
040F05 0B 00 00    0167*      dl 11 ; 11
040F08 0B 00 00    0168*      dl 11 ; 12
040F0B 06 00 00    0169*      dl 6 ; 13
040F0E FE FF FF    0170*      dl -2 ; 14
040F11 F7 FF FF    0171*      dl -9 ; 15
040F14 F4 FF FF    0172*      dl -12 ; 16
040F17 F7 FF FF    0173*      dl -9 ; 17
040F1A FE FF FF    0174*      dl -2 ; 18
040F1D 06 00 00    0175*      dl 6 ; 19
040F20 0B 00 00    0176*      dl 11 ; 20
040F23 0B 00 00    0177*      dl 11 ; 21
040F26 07 00 00    0178*      dl 7 ; 22
040F29 FF FF FF    0179*      dl -1 ; 23
040F2C F8 FF FF    0180*      dl -8 ; 24
040F2F F4 FF FF    0181*      dl -12 ; 25
040F32 F6 FF FF    0182*      dl -10 ; 26
040F35 FD FF FF    0183*      dl -3 ; 27
040F38 05 00 00    0184*      dl 5 ; 28
040F3B 0B 00 00    0185*      dl 11 ; 29
040F3E 0C 00 00    0186*      dl 12 ; 30
040F41 08 00 00    0187*      dl 8 ; 31
040F44 00 00 00    0188*      dl 0 ; 32
040F47 F8 FF FF    0189*      dl -8 ; 33
040F4A F4 FF FF    0190*      dl -12 ; 34
040F4D F5 FF FF    0191*      dl -11 ; 35
040F50 FB FF FF    0192*      dl -5 ; 36
040F53 03 00 00    0193*      dl 3 ; 37
040F56 0A 00 00    0194*      dl 10 ; 38
040F59 0C 00 00    0195*      dl 12 ; 39
040F5C 08 00 00    0196*      dl 8 ; 40
040F5F 01 00 00    0197*      dl 1 ; 41
040F62 F9 FF FF    0198*      dl -7 ; 42
040F65 F5 FF FF    0199*      dl -11 ; 43
040F68 F5 FF FF    0200*      dl -11 ; 44
040F6B FA FF FF    0201*      dl -6 ; 45
040F6E 02 00 00    0202*      dl 2 ; 46
040F71 09 00 00    0203*      dl 9 ; 47
040F74 0C 00 00    0204*      dl 12 ; 48
040F77 09 00 00    0205*      dl 9 ; 49
040F7A 02 00 00    0206*      dl 2 ; 50
040F7D FA FF FF    0207*      dl -6 ; 51
040F80 F5 FF FF    0208*      dl -11 ; 52
040F83 F5 FF FF    0209*      dl -11 ; 53
040F86 F9 FF FF    0210*      dl -7 ; 54
040F89 01 00 00    0211*      dl 1 ; 55
040F8C 08 00 00    0212*      dl 8 ; 56
040F8F 0C 00 00    0213*      dl 12 ; 57
040F92 0A 00 00    0214*      dl 10 ; 58
040F95 03 00 00    0215*      dl 3 ; 59
040F98 FB FF FF    0216*      dl -5 ; 60
040F9B F5 FF FF    0217*      dl -11 ; 61
040F9E F4 FF FF    0218*      dl -12 ; 62
040FA1 F8 FF FF    0219*      dl -8 ; 63
040FA4             0156       include "organ/src/asm/organ_tonewheels.asm"
040FA4             0001*  tonewheel_frequencies:
040FA4 41 00 00 80 0002*      db 65,0,0,128 ; 65 0
040FA8 45 00 00 80 0003*      db 69,0,0,128 ; 69 1
040FAC 49 00 00 78 0004*      db 73,0,0,120 ; 73 2
040FB0 4E 00 00 78 0005*      db 78,0,0,120 ; 78 3
040FB4 52 00 00 70 0006*      db 82,0,0,112 ; 82 4
040FB8 57 00 00 70 0007*      db 87,0,0,112 ; 87 5
040FBC 5C 00 00 68 0008*      db 92,0,0,104 ; 92 6
040FC0 62 00 00 68 0009*      db 98,0,0,104 ; 98 7
040FC4 68 00 00 68 0010*      db 104,0,0,104 ; 104 8
040FC8 6E 00 00 60 0011*      db 110,0,0,96 ; 110 9
040FCC 75 00 00 60 0012*      db 117,0,0,96 ; 117 10
040FD0 7B 00 00 60 0013*      db 123,0,0,96 ; 123 11
040FD4 83 00 00 58 0014*      db 131,0,0,88 ; 131 12
040FD8 8B 00 00 58 0015*      db 139,0,0,88 ; 139 13
040FDC 93 00 00 58 0016*      db 147,0,0,88 ; 147 14
040FE0 9C 00 00 50 0017*      db 156,0,0,80 ; 156 15
040FE4 A5 00 00 50 0018*      db 165,0,0,80 ; 165 16
040FE8 AF 00 00 50 0019*      db 175,0,0,80 ; 175 17
040FEC B9 00 00 48 0020*      db 185,0,0,72 ; 185 18
040FF0 C4 00 00 48 0021*      db 196,0,0,72 ; 196 19
040FF4 D0 00 00 48 0022*      db 208,0,0,72 ; 208 20
040FF8 DC 00 00 48 0023*      db 220,0,0,72 ; 220 21
040FFC E9 00 00 40 0024*      db 233,0,0,64 ; 233 22
041000 F7 00 00 40 0025*      db 247,0,0,64 ; 247 23
041004 06 01 00 40 0026*      db 6,1,0,64 ; 262 24
041008 15 01 00 40 0027*      db 21,1,0,64 ; 277 25
04100C 26 01 00 40 0028*      db 38,1,0,64 ; 294 26
041010 37 01 00 38 0029*      db 55,1,0,56 ; 311 27
041014 4A 01 00 38 0030*      db 74,1,0,56 ; 330 28
041018 5D 01 00 38 0031*      db 93,1,0,56 ; 349 29
04101C 72 01 00 38 0032*      db 114,1,0,56 ; 370 30
041020 88 01 00 38 0033*      db 136,1,0,56 ; 392 31
041024 9F 01 00 30 0034*      db 159,1,0,48 ; 415 32
041028 B8 01 00 30 0035*      db 184,1,0,48 ; 440 33
04102C D2 01 00 30 0036*      db 210,1,0,48 ; 466 34
041030 EE 01 00 30 0037*      db 238,1,0,48 ; 494 35
041034 0B 02 00 30 0038*      db 11,2,0,48 ; 523 36
041038 2A 02 00 28 0039*      db 42,2,0,40 ; 554 37
04103C 4B 02 00 28 0040*      db 75,2,0,40 ; 587 38
041040 6E 02 00 28 0041*      db 110,2,0,40 ; 622 39
041044 93 02 00 28 0042*      db 147,2,0,40 ; 659 40
041048 BA 02 00 28 0043*      db 186,2,0,40 ; 698 41
04104C E4 02 00 28 0044*      db 228,2,0,40 ; 740 42
041050 10 03 00 28 0045*      db 16,3,0,40 ; 784 43
041054 3E 03 00 20 0046*      db 62,3,0,32 ; 830 44
041058 70 03 00 20 0047*      db 112,3,0,32 ; 880 45
04105C A4 03 00 20 0048*      db 164,3,0,32 ; 932 46
041060 DB 03 00 20 0049*      db 219,3,0,32 ; 987 47
041064 16 04 00 20 0050*      db 22,4,0,32 ; 1046 48
041068 54 04 00 20 0051*      db 84,4,0,32 ; 1108 49
04106C 97 04 00 20 0052*      db 151,4,0,32 ; 1175 50
041070 DC 04 00 20 0053*      db 220,4,0,32 ; 1244 51
041074 26 05 00 20 0054*      db 38,5,0,32 ; 1318 52
041078 74 05 00 18 0055*      db 116,5,0,24 ; 1396 53
04107C C8 05 00 18 0056*      db 200,5,0,24 ; 1480 54
041080 20 06 00 18 0057*      db 32,6,0,24 ; 1568 55
041084 7D 06 00 18 0058*      db 125,6,0,24 ; 1661 56
041088 E0 06 00 18 0059*      db 224,6,0,24 ; 1760 57
04108C 48 07 00 18 0060*      db 72,7,0,24 ; 1864 58
041090 B7 07 00 18 0061*      db 183,7,0,24 ; 1975 59
041094 2C 08 00 18 0062*      db 44,8,0,24 ; 2092 60
041098 A9 08 00 18 0063*      db 169,8,0,24 ; 2217 61
04109C 2E 09 00 18 0064*      db 46,9,0,24 ; 2350 62
0410A0 B9 09 00 18 0065*      db 185,9,0,24 ; 2489 63
0410A4 4D 0A 00 18 0066*      db 77,10,0,24 ; 2637 64
0410A8 E9 0A 00 10 0067*      db 233,10,0,16 ; 2793 65
0410AC 90 0B 00 10 0068*      db 144,11,0,16 ; 2960 66
0410B0 40 0C 00 10 0069*      db 64,12,0,16 ; 3136 67
0410B4 F9 0C 00 10 0070*      db 249,12,0,16 ; 3321 68
0410B8 C0 0D 00 10 0071*      db 192,13,0,16 ; 3520 69
0410BC 91 0E 00 10 0072*      db 145,14,0,16 ; 3729 70
0410C0 6E 0F 00 10 0073*      db 110,15,0,16 ; 3950 71
0410C4 42 0C 00 10 0074*      db 66,12,0,16 ; 3138 72
0410C8 FD 0C 00 10 0075*      db 253,12,0,16 ; 3325 73
0410CC C4 0D 00 10 0076*      db 196,13,0,16 ; 3524 74
0410D0 95 0E 00 10 0077*      db 149,14,0,16 ; 3733 75
0410D4 73 0F 00 10 0078*      db 115,15,0,16 ; 3955 76
0410D8 5D 10 00 10 0079*      db 93,16,0,16 ; 4189 77
0410DC 58 11 00 10 0080*      db 88,17,0,16 ; 4440 78
0410E0 60 12 00 10 0081*      db 96,18,0,16 ; 4704 79
0410E4 76 13 00 10 0082*      db 118,19,0,16 ; 4982 80
0410E8 A0 14 00 10 0083*      db 160,20,0,16 ; 5280 81
0410EC D9 15 00 10 0084*      db 217,21,0,16 ; 5593 82
0410F0 25 17 00 10 0085*      db 37,23,0,16 ; 5925 83
0410F4             0157   
0410F4             0158       include "organ/src/asm/organ_notes_bank_1.asm"
0410F4             0001*  organ_notes_bank_1:
0410F4 FD 21 BF 0B 0002*      ld iy,cmd0
       04          
0410F9             0003*  
0410F9 DD CB 06 46 0004*      bit 0,(ix+6)
0410FD CA 6D 11 04 0005*      jp z,@note_end0
041101             0006*  
041101 3A 5F 0D 04 0007*      ld a,(drawbar_volumes+0)
041105 21 2A 10 04 0008*      ld hl,tonewheel_frequencies+134
041109 BE          0009*      cp (hl)
04110A 38 01       0010*      db 0x38, 0x01 ; jr c,1
04110C 77          0011*      ld (hl),a
04110D             0012*  
04110D 3A 60 0D 04 0013*      ld a,(drawbar_volumes+1)
041111 21 76 10 04 0014*      ld hl,tonewheel_frequencies+210
041115 BE          0015*      cp (hl)
041116 38 01       0016*      db 0x38, 0x01 ; jr c,1
041118 77          0017*      ld (hl),a
041119             0018*  
041119 3A 61 0D 04 0019*      ld a,(drawbar_volumes+2)
04111D 21 5A 10 04 0020*      ld hl,tonewheel_frequencies+182
041121 BE          0021*      cp (hl)
041122 38 01       0022*      db 0x38, 0x01 ; jr c,1
041124 77          0023*      ld (hl),a
041125             0024*  
041125 3A 62 0D 04 0025*      ld a,(drawbar_volumes+3)
041129 21 8A 10 04 0026*      ld hl,tonewheel_frequencies+230
04112D BE          0027*      cp (hl)
04112E 38 01       0028*      db 0x38, 0x01 ; jr c,1
041130 77          0029*      ld (hl),a
041131             0030*  
041131 3A 63 0D 04 0031*      ld a,(drawbar_volumes+4)
041135 21 A6 10 04 0032*      ld hl,tonewheel_frequencies+258
041139 BE          0033*      cp (hl)
04113A 38 01       0034*      db 0x38, 0x01 ; jr c,1
04113C 77          0035*      ld (hl),a
04113D             0036*  
04113D 3A 64 0D 04 0037*      ld a,(drawbar_volumes+5)
041141 21 BA 10 04 0038*      ld hl,tonewheel_frequencies+278
041145 BE          0039*      cp (hl)
041146 38 01       0040*      db 0x38, 0x01 ; jr c,1
041148 77          0041*      ld (hl),a
041149             0042*  
041149 3A 65 0D 04 0043*      ld a,(drawbar_volumes+6)
04114D 21 DE 10 04 0044*      ld hl,tonewheel_frequencies+314
041151 BE          0045*      cp (hl)
041152 38 01       0046*      db 0x38, 0x01 ; jr c,1
041154 77          0047*      ld (hl),a
041155             0048*  
041155 3A 66 0D 04 0049*      ld a,(drawbar_volumes+7)
041159 21 EA 10 04 0050*      ld hl,tonewheel_frequencies+326
04115D BE          0051*      cp (hl)
04115E 38 01       0052*      db 0x38, 0x01 ; jr c,1
041160 77          0053*      ld (hl),a
041161             0054*  
041161 3A 67 0D 04 0055*      ld a,(drawbar_volumes+8)
041165 21 BA 10 04 0056*      ld hl,tonewheel_frequencies+278
041169 BE          0057*      cp (hl)
04116A 38 01       0058*      db 0x38, 0x01 ; jr c,1
04116C 77          0059*      ld (hl),a
04116D             0060*  
04116D             0061*  @note_end0:
04116D             0062*  
04116D DD CB 06 4E 0063*      bit 1,(ix+6)
041171 CA E1 11 04 0064*      jp z,@note_end1
041175             0065*  
041175 3A 5F 0D 04 0066*      ld a,(drawbar_volumes+0)
041179 21 36 10 04 0067*      ld hl,tonewheel_frequencies+146
04117D BE          0068*      cp (hl)
04117E 38 01       0069*      db 0x38, 0x01 ; jr c,1
041180 77          0070*      ld (hl),a
041181             0071*  
041181 3A 60 0D 04 0072*      ld a,(drawbar_volumes+1)
041185 21 82 10 04 0073*      ld hl,tonewheel_frequencies+222
041189 BE          0074*      cp (hl)
04118A 38 01       0075*      db 0x38, 0x01 ; jr c,1
04118C 77          0076*      ld (hl),a
04118D             0077*  
04118D 3A 61 0D 04 0078*      ld a,(drawbar_volumes+2)
041191 21 66 10 04 0079*      ld hl,tonewheel_frequencies+194
041195 BE          0080*      cp (hl)
041196 38 01       0081*      db 0x38, 0x01 ; jr c,1
041198 77          0082*      ld (hl),a
041199             0083*  
041199 3A 62 0D 04 0084*      ld a,(drawbar_volumes+3)
04119D 21 96 10 04 0085*      ld hl,tonewheel_frequencies+242
0411A1 BE          0086*      cp (hl)
0411A2 38 01       0087*      db 0x38, 0x01 ; jr c,1
0411A4 77          0088*      ld (hl),a
0411A5             0089*  
0411A5 3A 63 0D 04 0090*      ld a,(drawbar_volumes+4)
0411A9 21 C6 10 04 0091*      ld hl,tonewheel_frequencies+290
0411AD BE          0092*      cp (hl)
0411AE 38 01       0093*      db 0x38, 0x01 ; jr c,1
0411B0 77          0094*      ld (hl),a
0411B1             0095*  
0411B1 3A 64 0D 04 0096*      ld a,(drawbar_volumes+5)
0411B5 21 DA 10 04 0097*      ld hl,tonewheel_frequencies+310
0411B9 BE          0098*      cp (hl)
0411BA 38 01       0099*      db 0x38, 0x01 ; jr c,1
0411BC 77          0100*      ld (hl),a
0411BD             0101*  
0411BD 3A 65 0D 04 0102*      ld a,(drawbar_volumes+6)
0411C1 21 EA 10 04 0103*      ld hl,tonewheel_frequencies+326
0411C5 BE          0104*      cp (hl)
0411C6 38 01       0105*      db 0x38, 0x01 ; jr c,1
0411C8 77          0106*      ld (hl),a
0411C9             0107*  
0411C9 3A 66 0D 04 0108*      ld a,(drawbar_volumes+7)
0411CD 21 C6 10 04 0109*      ld hl,tonewheel_frequencies+290
0411D1 BE          0110*      cp (hl)
0411D2 38 01       0111*      db 0x38, 0x01 ; jr c,1
0411D4 77          0112*      ld (hl),a
0411D5             0113*  
0411D5 3A 67 0D 04 0114*      ld a,(drawbar_volumes+8)
0411D9 21 DA 10 04 0115*      ld hl,tonewheel_frequencies+310
0411DD BE          0116*      cp (hl)
0411DE 38 01       0117*      db 0x38, 0x01 ; jr c,1
0411E0 77          0118*      ld (hl),a
0411E1             0119*  
0411E1             0120*  @note_end1:
0411E1             0121*  
0411E1 DD CB 02 4E 0122*      bit 1,(ix+2)
0411E5 CA 55 12 04 0123*      jp z,@note_end2
0411E9             0124*  
0411E9 3A 5F 0D 04 0125*      ld a,(drawbar_volumes+0)
0411ED 21 3E 10 04 0126*      ld hl,tonewheel_frequencies+154
0411F1 BE          0127*      cp (hl)
0411F2 38 01       0128*      db 0x38, 0x01 ; jr c,1
0411F4 77          0129*      ld (hl),a
0411F5             0130*  
0411F5 3A 60 0D 04 0131*      ld a,(drawbar_volumes+1)
0411F9 21 8A 10 04 0132*      ld hl,tonewheel_frequencies+230
0411FD BE          0133*      cp (hl)
0411FE 38 01       0134*      db 0x38, 0x01 ; jr c,1
041200 77          0135*      ld (hl),a
041201             0136*  
041201 3A 61 0D 04 0137*      ld a,(drawbar_volumes+2)
041205 21 6E 10 04 0138*      ld hl,tonewheel_frequencies+202
041209 BE          0139*      cp (hl)
04120A 38 01       0140*      db 0x38, 0x01 ; jr c,1
04120C 77          0141*      ld (hl),a
04120D             0142*  
04120D 3A 62 0D 04 0143*      ld a,(drawbar_volumes+3)
041211 21 9E 10 04 0144*      ld hl,tonewheel_frequencies+250
041215 BE          0145*      cp (hl)
041216 38 01       0146*      db 0x38, 0x01 ; jr c,1
041218 77          0147*      ld (hl),a
041219             0148*  
041219 3A 63 0D 04 0149*      ld a,(drawbar_volumes+4)
04121D 21 CE 10 04 0150*      ld hl,tonewheel_frequencies+298
041221 BE          0151*      cp (hl)
041222 38 01       0152*      db 0x38, 0x01 ; jr c,1
041224 77          0153*      ld (hl),a
041225             0154*  
041225 3A 64 0D 04 0155*      ld a,(drawbar_volumes+5)
041229 21 E2 10 04 0156*      ld hl,tonewheel_frequencies+318
04122D BE          0157*      cp (hl)
04122E 38 01       0158*      db 0x38, 0x01 ; jr c,1
041230 77          0159*      ld (hl),a
041231             0160*  
041231 3A 65 0D 04 0161*      ld a,(drawbar_volumes+6)
041235 21 F2 10 04 0162*      ld hl,tonewheel_frequencies+334
041239 BE          0163*      cp (hl)
04123A 38 01       0164*      db 0x38, 0x01 ; jr c,1
04123C 77          0165*      ld (hl),a
04123D             0166*  
04123D 3A 66 0D 04 0167*      ld a,(drawbar_volumes+7)
041241 21 CE 10 04 0168*      ld hl,tonewheel_frequencies+298
041245 BE          0169*      cp (hl)
041246 38 01       0170*      db 0x38, 0x01 ; jr c,1
041248 77          0171*      ld (hl),a
041249             0172*  
041249 3A 67 0D 04 0173*      ld a,(drawbar_volumes+8)
04124D 21 E2 10 04 0174*      ld hl,tonewheel_frequencies+318
041251 BE          0175*      cp (hl)
041252 38 01       0176*      db 0x38, 0x01 ; jr c,1
041254 77          0177*      ld (hl),a
041255             0178*  
041255             0179*  @note_end2:
041255             0180*  
041255 DD CB 02 56 0181*      bit 2,(ix+2)
041259 CA C9 12 04 0182*      jp z,@note_end3
04125D             0183*  
04125D 3A 5F 0D 04 0184*      ld a,(drawbar_volumes+0)
041261 21 42 10 04 0185*      ld hl,tonewheel_frequencies+158
041265 BE          0186*      cp (hl)
041266 38 01       0187*      db 0x38, 0x01 ; jr c,1
041268 77          0188*      ld (hl),a
041269             0189*  
041269 3A 60 0D 04 0190*      ld a,(drawbar_volumes+1)
04126D 21 8E 10 04 0191*      ld hl,tonewheel_frequencies+234
041271 BE          0192*      cp (hl)
041272 38 01       0193*      db 0x38, 0x01 ; jr c,1
041274 77          0194*      ld (hl),a
041275             0195*  
041275 3A 61 0D 04 0196*      ld a,(drawbar_volumes+2)
041279 21 72 10 04 0197*      ld hl,tonewheel_frequencies+206
04127D BE          0198*      cp (hl)
04127E 38 01       0199*      db 0x38, 0x01 ; jr c,1
041280 77          0200*      ld (hl),a
041281             0201*  
041281 3A 62 0D 04 0202*      ld a,(drawbar_volumes+3)
041285 21 A2 10 04 0203*      ld hl,tonewheel_frequencies+254
041289 BE          0204*      cp (hl)
04128A 38 01       0205*      db 0x38, 0x01 ; jr c,1
04128C 77          0206*      ld (hl),a
04128D             0207*  
04128D 3A 63 0D 04 0208*      ld a,(drawbar_volumes+4)
041291 21 D2 10 04 0209*      ld hl,tonewheel_frequencies+302
041295 BE          0210*      cp (hl)
041296 38 01       0211*      db 0x38, 0x01 ; jr c,1
041298 77          0212*      ld (hl),a
041299             0213*  
041299 3A 64 0D 04 0214*      ld a,(drawbar_volumes+5)
04129D 21 E6 10 04 0215*      ld hl,tonewheel_frequencies+322
0412A1 BE          0216*      cp (hl)
0412A2 38 01       0217*      db 0x38, 0x01 ; jr c,1
0412A4 77          0218*      ld (hl),a
0412A5             0219*  
0412A5 3A 65 0D 04 0220*      ld a,(drawbar_volumes+6)
0412A9 21 B2 10 04 0221*      ld hl,tonewheel_frequencies+270
0412AD BE          0222*      cp (hl)
0412AE 38 01       0223*      db 0x38, 0x01 ; jr c,1
0412B0 77          0224*      ld (hl),a
0412B1             0225*  
0412B1 3A 66 0D 04 0226*      ld a,(drawbar_volumes+7)
0412B5 21 D2 10 04 0227*      ld hl,tonewheel_frequencies+302
0412B9 BE          0228*      cp (hl)
0412BA 38 01       0229*      db 0x38, 0x01 ; jr c,1
0412BC 77          0230*      ld (hl),a
0412BD             0231*  
0412BD 3A 67 0D 04 0232*      ld a,(drawbar_volumes+8)
0412C1 21 E6 10 04 0233*      ld hl,tonewheel_frequencies+322
0412C5 BE          0234*      cp (hl)
0412C6 38 01       0235*      db 0x38, 0x01 ; jr c,1
0412C8 77          0236*      ld (hl),a
0412C9             0237*  
0412C9             0238*  @note_end3:
0412C9             0239*  
0412C9 DD CB 02 5E 0240*      bit 3,(ix+2)
0412CD CA 3D 13 04 0241*      jp z,@note_end4
0412D1             0242*  
0412D1 3A 5F 0D 04 0243*      ld a,(drawbar_volumes+0)
0412D5 21 46 10 04 0244*      ld hl,tonewheel_frequencies+162
0412D9 BE          0245*      cp (hl)
0412DA 38 01       0246*      db 0x38, 0x01 ; jr c,1
0412DC 77          0247*      ld (hl),a
0412DD             0248*  
0412DD 3A 60 0D 04 0249*      ld a,(drawbar_volumes+1)
0412E1 21 92 10 04 0250*      ld hl,tonewheel_frequencies+238
0412E5 BE          0251*      cp (hl)
0412E6 38 01       0252*      db 0x38, 0x01 ; jr c,1
0412E8 77          0253*      ld (hl),a
0412E9             0254*  
0412E9 3A 61 0D 04 0255*      ld a,(drawbar_volumes+2)
0412ED 21 76 10 04 0256*      ld hl,tonewheel_frequencies+210
0412F1 BE          0257*      cp (hl)
0412F2 38 01       0258*      db 0x38, 0x01 ; jr c,1
0412F4 77          0259*      ld (hl),a
0412F5             0260*  
0412F5 3A 62 0D 04 0261*      ld a,(drawbar_volumes+3)
0412F9 21 A6 10 04 0262*      ld hl,tonewheel_frequencies+258
0412FD BE          0263*      cp (hl)
0412FE 38 01       0264*      db 0x38, 0x01 ; jr c,1
041300 77          0265*      ld (hl),a
041301             0266*  
041301 3A 63 0D 04 0267*      ld a,(drawbar_volumes+4)
041305 21 D6 10 04 0268*      ld hl,tonewheel_frequencies+306
041309 BE          0269*      cp (hl)
04130A 38 01       0270*      db 0x38, 0x01 ; jr c,1
04130C 77          0271*      ld (hl),a
04130D             0272*  
04130D 3A 64 0D 04 0273*      ld a,(drawbar_volumes+5)
041311 21 EA 10 04 0274*      ld hl,tonewheel_frequencies+326
041315 BE          0275*      cp (hl)
041316 38 01       0276*      db 0x38, 0x01 ; jr c,1
041318 77          0277*      ld (hl),a
041319             0278*  
041319 3A 65 0D 04 0279*      ld a,(drawbar_volumes+6)
04131D 21 B6 10 04 0280*      ld hl,tonewheel_frequencies+274
041321 BE          0281*      cp (hl)
041322 38 01       0282*      db 0x38, 0x01 ; jr c,1
041324 77          0283*      ld (hl),a
041325             0284*  
041325 3A 66 0D 04 0285*      ld a,(drawbar_volumes+7)
041329 21 D6 10 04 0286*      ld hl,tonewheel_frequencies+306
04132D BE          0287*      cp (hl)
04132E 38 01       0288*      db 0x38, 0x01 ; jr c,1
041330 77          0289*      ld (hl),a
041331             0290*  
041331 3A 67 0D 04 0291*      ld a,(drawbar_volumes+8)
041335 21 EA 10 04 0292*      ld hl,tonewheel_frequencies+326
041339 BE          0293*      cp (hl)
04133A 38 01       0294*      db 0x38, 0x01 ; jr c,1
04133C 77          0295*      ld (hl),a
04133D             0296*  
04133D             0297*  @note_end4:
04133D             0298*  
04133D DD CB 06 66 0299*      bit 4,(ix+6)
041341 CA B1 13 04 0300*      jp z,@note_end5
041345             0301*  
041345 3A 5F 0D 04 0302*      ld a,(drawbar_volumes+0)
041349 21 52 10 04 0303*      ld hl,tonewheel_frequencies+174
04134D BE          0304*      cp (hl)
04134E 38 01       0305*      db 0x38, 0x01 ; jr c,1
041350 77          0306*      ld (hl),a
041351             0307*  
041351 3A 60 0D 04 0308*      ld a,(drawbar_volumes+1)
041355 21 9E 10 04 0309*      ld hl,tonewheel_frequencies+250
041359 BE          0310*      cp (hl)
04135A 38 01       0311*      db 0x38, 0x01 ; jr c,1
04135C 77          0312*      ld (hl),a
04135D             0313*  
04135D 3A 61 0D 04 0314*      ld a,(drawbar_volumes+2)
041361 21 82 10 04 0315*      ld hl,tonewheel_frequencies+222
041365 BE          0316*      cp (hl)
041366 38 01       0317*      db 0x38, 0x01 ; jr c,1
041368 77          0318*      ld (hl),a
041369             0319*  
041369 3A 62 0D 04 0320*      ld a,(drawbar_volumes+3)
04136D 21 B2 10 04 0321*      ld hl,tonewheel_frequencies+270
041371 BE          0322*      cp (hl)
041372 38 01       0323*      db 0x38, 0x01 ; jr c,1
041374 77          0324*      ld (hl),a
041375             0325*  
041375 3A 63 0D 04 0326*      ld a,(drawbar_volumes+4)
041379 21 E2 10 04 0327*      ld hl,tonewheel_frequencies+318
04137D BE          0328*      cp (hl)
04137E 38 01       0329*      db 0x38, 0x01 ; jr c,1
041380 77          0330*      ld (hl),a
041381             0331*  
041381 3A 64 0D 04 0332*      ld a,(drawbar_volumes+5)
041385 21 B2 10 04 0333*      ld hl,tonewheel_frequencies+270
041389 BE          0334*      cp (hl)
04138A 38 01       0335*      db 0x38, 0x01 ; jr c,1
04138C 77          0336*      ld (hl),a
04138D             0337*  
04138D 3A 65 0D 04 0338*      ld a,(drawbar_volumes+6)
041391 21 C2 10 04 0339*      ld hl,tonewheel_frequencies+286
041395 BE          0340*      cp (hl)
041396 38 01       0341*      db 0x38, 0x01 ; jr c,1
041398 77          0342*      ld (hl),a
041399             0343*  
041399 3A 66 0D 04 0344*      ld a,(drawbar_volumes+7)
04139D 21 E2 10 04 0345*      ld hl,tonewheel_frequencies+318
0413A1 BE          0346*      cp (hl)
0413A2 38 01       0347*      db 0x38, 0x01 ; jr c,1
0413A4 77          0348*      ld (hl),a
0413A5             0349*  
0413A5 3A 67 0D 04 0350*      ld a,(drawbar_volumes+8)
0413A9 21 B2 10 04 0351*      ld hl,tonewheel_frequencies+270
0413AD BE          0352*      cp (hl)
0413AE 38 01       0353*      db 0x38, 0x01 ; jr c,1
0413B0 77          0354*      ld (hl),a
0413B1             0355*  
0413B1             0356*  @note_end5:
0413B1             0357*  
0413B1 DD CB 04 66 0358*      bit 4,(ix+4)
0413B5 CA 25 14 04 0359*      jp z,@note_end6
0413B9             0360*  
0413B9 3A 5F 0D 04 0361*      ld a,(drawbar_volumes+0)
0413BD 21 5A 10 04 0362*      ld hl,tonewheel_frequencies+182
0413C1 BE          0363*      cp (hl)
0413C2 38 01       0364*      db 0x38, 0x01 ; jr c,1
0413C4 77          0365*      ld (hl),a
0413C5             0366*  
0413C5 3A 60 0D 04 0367*      ld a,(drawbar_volumes+1)
0413C9 21 A6 10 04 0368*      ld hl,tonewheel_frequencies+258
0413CD BE          0369*      cp (hl)
0413CE 38 01       0370*      db 0x38, 0x01 ; jr c,1
0413D0 77          0371*      ld (hl),a
0413D1             0372*  
0413D1 3A 61 0D 04 0373*      ld a,(drawbar_volumes+2)
0413D5 21 8A 10 04 0374*      ld hl,tonewheel_frequencies+230
0413D9 BE          0375*      cp (hl)
0413DA 38 01       0376*      db 0x38, 0x01 ; jr c,1
0413DC 77          0377*      ld (hl),a
0413DD             0378*  
0413DD 3A 62 0D 04 0379*      ld a,(drawbar_volumes+3)
0413E1 21 BA 10 04 0380*      ld hl,tonewheel_frequencies+278
0413E5 BE          0381*      cp (hl)
0413E6 38 01       0382*      db 0x38, 0x01 ; jr c,1
0413E8 77          0383*      ld (hl),a
0413E9             0384*  
0413E9 3A 63 0D 04 0385*      ld a,(drawbar_volumes+4)
0413ED 21 EA 10 04 0386*      ld hl,tonewheel_frequencies+326
0413F1 BE          0387*      cp (hl)
0413F2 38 01       0388*      db 0x38, 0x01 ; jr c,1
0413F4 77          0389*      ld (hl),a
0413F5             0390*  
0413F5 3A 64 0D 04 0391*      ld a,(drawbar_volumes+5)
0413F9 21 BA 10 04 0392*      ld hl,tonewheel_frequencies+278
0413FD BE          0393*      cp (hl)
0413FE 38 01       0394*      db 0x38, 0x01 ; jr c,1
041400 77          0395*      ld (hl),a
041401             0396*  
041401 3A 65 0D 04 0397*      ld a,(drawbar_volumes+6)
041405 21 DE 10 04 0398*      ld hl,tonewheel_frequencies+314
041409 BE          0399*      cp (hl)
04140A 38 01       0400*      db 0x38, 0x01 ; jr c,1
04140C 77          0401*      ld (hl),a
04140D             0402*  
04140D 3A 66 0D 04 0403*      ld a,(drawbar_volumes+7)
041411 21 EA 10 04 0404*      ld hl,tonewheel_frequencies+326
041415 BE          0405*      cp (hl)
041416 38 01       0406*      db 0x38, 0x01 ; jr c,1
041418 77          0407*      ld (hl),a
041419             0408*  
041419 3A 67 0D 04 0409*      ld a,(drawbar_volumes+8)
04141D 21 BA 10 04 0410*      ld hl,tonewheel_frequencies+278
041421 BE          0411*      cp (hl)
041422 38 01       0412*      db 0x38, 0x01 ; jr c,1
041424 77          0413*      ld (hl),a
041425             0414*  
041425             0415*  @note_end6:
041425             0416*  
041425 DD CB 02 6E 0417*      bit 5,(ix+2)
041429 CA 99 14 04 0418*      jp z,@note_end7
04142D             0419*  
04142D 3A 5F 0D 04 0420*      ld a,(drawbar_volumes+0)
041431 21 66 10 04 0421*      ld hl,tonewheel_frequencies+194
041435 BE          0422*      cp (hl)
041436 38 01       0423*      db 0x38, 0x01 ; jr c,1
041438 77          0424*      ld (hl),a
041439             0425*  
041439 3A 60 0D 04 0426*      ld a,(drawbar_volumes+1)
04143D 21 C6 10 04 0427*      ld hl,tonewheel_frequencies+290
041441 BE          0428*      cp (hl)
041442 38 01       0429*      db 0x38, 0x01 ; jr c,1
041444 77          0430*      ld (hl),a
041445             0431*  
041445 3A 61 0D 04 0432*      ld a,(drawbar_volumes+2)
041449 21 96 10 04 0433*      ld hl,tonewheel_frequencies+242
04144D BE          0434*      cp (hl)
04144E 38 01       0435*      db 0x38, 0x01 ; jr c,1
041450 77          0436*      ld (hl),a
041451             0437*  
041451 3A 62 0D 04 0438*      ld a,(drawbar_volumes+3)
041455 21 DA 10 04 0439*      ld hl,tonewheel_frequencies+310
041459 BE          0440*      cp (hl)
04145A 38 01       0441*      db 0x38, 0x01 ; jr c,1
04145C 77          0442*      ld (hl),a
04145D             0443*  
04145D 3A 63 0D 04 0444*      ld a,(drawbar_volumes+4)
041461 21 C6 10 04 0445*      ld hl,tonewheel_frequencies+290
041465 BE          0446*      cp (hl)
041466 38 01       0447*      db 0x38, 0x01 ; jr c,1
041468 77          0448*      ld (hl),a
041469             0449*  
041469 3A 64 0D 04 0450*      ld a,(drawbar_volumes+5)
04146D 21 DA 10 04 0451*      ld hl,tonewheel_frequencies+310
041471 BE          0452*      cp (hl)
041472 38 01       0453*      db 0x38, 0x01 ; jr c,1
041474 77          0454*      ld (hl),a
041475             0455*  
041475 3A 65 0D 04 0456*      ld a,(drawbar_volumes+6)
041479 21 EA 10 04 0457*      ld hl,tonewheel_frequencies+326
04147D BE          0458*      cp (hl)
04147E 38 01       0459*      db 0x38, 0x01 ; jr c,1
041480 77          0460*      ld (hl),a
041481             0461*  
041481 3A 66 0D 04 0462*      ld a,(drawbar_volumes+7)
041485 21 C6 10 04 0463*      ld hl,tonewheel_frequencies+290
041489 BE          0464*      cp (hl)
04148A 38 01       0465*      db 0x38, 0x01 ; jr c,1
04148C 77          0466*      ld (hl),a
04148D             0467*  
04148D 3A 67 0D 04 0468*      ld a,(drawbar_volumes+8)
041491 21 DA 10 04 0469*      ld hl,tonewheel_frequencies+310
041495 BE          0470*      cp (hl)
041496 38 01       0471*      db 0x38, 0x01 ; jr c,1
041498 77          0472*      ld (hl),a
041499             0473*  
041499             0474*  @note_end7:
041499             0475*  
041499 DD CB 04 76 0476*      bit 6,(ix+4)
04149D CA 0D 15 04 0477*      jp z,@note_end8
0414A1             0478*  
0414A1 3A 5F 0D 04 0479*      ld a,(drawbar_volumes+0)
0414A5 21 6E 10 04 0480*      ld hl,tonewheel_frequencies+202
0414A9 BE          0481*      cp (hl)
0414AA 38 01       0482*      db 0x38, 0x01 ; jr c,1
0414AC 77          0483*      ld (hl),a
0414AD             0484*  
0414AD 3A 60 0D 04 0485*      ld a,(drawbar_volumes+1)
0414B1 21 CE 10 04 0486*      ld hl,tonewheel_frequencies+298
0414B5 BE          0487*      cp (hl)
0414B6 38 01       0488*      db 0x38, 0x01 ; jr c,1
0414B8 77          0489*      ld (hl),a
0414B9             0490*  
0414B9 3A 61 0D 04 0491*      ld a,(drawbar_volumes+2)
0414BD 21 9E 10 04 0492*      ld hl,tonewheel_frequencies+250
0414C1 BE          0493*      cp (hl)
0414C2 38 01       0494*      db 0x38, 0x01 ; jr c,1
0414C4 77          0495*      ld (hl),a
0414C5             0496*  
0414C5 3A 62 0D 04 0497*      ld a,(drawbar_volumes+3)
0414C9 21 E2 10 04 0498*      ld hl,tonewheel_frequencies+318
0414CD BE          0499*      cp (hl)
0414CE 38 01       0500*      db 0x38, 0x01 ; jr c,1
0414D0 77          0501*      ld (hl),a
0414D1             0502*  
0414D1 3A 63 0D 04 0503*      ld a,(drawbar_volumes+4)
0414D5 21 CE 10 04 0504*      ld hl,tonewheel_frequencies+298
0414D9 BE          0505*      cp (hl)
0414DA 38 01       0506*      db 0x38, 0x01 ; jr c,1
0414DC 77          0507*      ld (hl),a
0414DD             0508*  
0414DD 3A 64 0D 04 0509*      ld a,(drawbar_volumes+5)
0414E1 21 E2 10 04 0510*      ld hl,tonewheel_frequencies+318
0414E5 BE          0511*      cp (hl)
0414E6 38 01       0512*      db 0x38, 0x01 ; jr c,1
0414E8 77          0513*      ld (hl),a
0414E9             0514*  
0414E9 3A 65 0D 04 0515*      ld a,(drawbar_volumes+6)
0414ED 21 F2 10 04 0516*      ld hl,tonewheel_frequencies+334
0414F1 BE          0517*      cp (hl)
0414F2 38 01       0518*      db 0x38, 0x01 ; jr c,1
0414F4 77          0519*      ld (hl),a
0414F5             0520*  
0414F5 3A 66 0D 04 0521*      ld a,(drawbar_volumes+7)
0414F9 21 CE 10 04 0522*      ld hl,tonewheel_frequencies+298
0414FD BE          0523*      cp (hl)
0414FE 38 01       0524*      db 0x38, 0x01 ; jr c,1
041500 77          0525*      ld (hl),a
041501             0526*  
041501 3A 67 0D 04 0527*      ld a,(drawbar_volumes+8)
041505 21 E2 10 04 0528*      ld hl,tonewheel_frequencies+318
041509 BE          0529*      cp (hl)
04150A 38 01       0530*      db 0x38, 0x01 ; jr c,1
04150C 77          0531*      ld (hl),a
04150D             0532*  
04150D             0533*  @note_end8:
04150D             0534*  
04150D DD CB 04 7E 0535*      bit 7,(ix+4)
041511 CA 81 15 04 0536*      jp z,@note_end9
041515             0537*  
041515 3A 5F 0D 04 0538*      ld a,(drawbar_volumes+0)
041519 21 72 10 04 0539*      ld hl,tonewheel_frequencies+206
04151D BE          0540*      cp (hl)
04151E 38 01       0541*      db 0x38, 0x01 ; jr c,1
041520 77          0542*      ld (hl),a
041521             0543*  
041521 3A 60 0D 04 0544*      ld a,(drawbar_volumes+1)
041525 21 D2 10 04 0545*      ld hl,tonewheel_frequencies+302
041529 BE          0546*      cp (hl)
04152A 38 01       0547*      db 0x38, 0x01 ; jr c,1
04152C 77          0548*      ld (hl),a
04152D             0549*  
04152D 3A 61 0D 04 0550*      ld a,(drawbar_volumes+2)
041531 21 A2 10 04 0551*      ld hl,tonewheel_frequencies+254
041535 BE          0552*      cp (hl)
041536 38 01       0553*      db 0x38, 0x01 ; jr c,1
041538 77          0554*      ld (hl),a
041539             0555*  
041539 3A 62 0D 04 0556*      ld a,(drawbar_volumes+3)
04153D 21 E6 10 04 0557*      ld hl,tonewheel_frequencies+322
041541 BE          0558*      cp (hl)
041542 38 01       0559*      db 0x38, 0x01 ; jr c,1
041544 77          0560*      ld (hl),a
041545             0561*  
041545 3A 63 0D 04 0562*      ld a,(drawbar_volumes+4)
041549 21 D2 10 04 0563*      ld hl,tonewheel_frequencies+302
04154D BE          0564*      cp (hl)
04154E 38 01       0565*      db 0x38, 0x01 ; jr c,1
041550 77          0566*      ld (hl),a
041551             0567*  
041551 3A 64 0D 04 0568*      ld a,(drawbar_volumes+5)
041555 21 E6 10 04 0569*      ld hl,tonewheel_frequencies+322
041559 BE          0570*      cp (hl)
04155A 38 01       0571*      db 0x38, 0x01 ; jr c,1
04155C 77          0572*      ld (hl),a
04155D             0573*  
04155D 3A 65 0D 04 0574*      ld a,(drawbar_volumes+6)
041561 21 B2 10 04 0575*      ld hl,tonewheel_frequencies+270
041565 BE          0576*      cp (hl)
041566 38 01       0577*      db 0x38, 0x01 ; jr c,1
041568 77          0578*      ld (hl),a
041569             0579*  
041569 3A 66 0D 04 0580*      ld a,(drawbar_volumes+7)
04156D 21 D2 10 04 0581*      ld hl,tonewheel_frequencies+302
041571 BE          0582*      cp (hl)
041572 38 01       0583*      db 0x38, 0x01 ; jr c,1
041574 77          0584*      ld (hl),a
041575             0585*  
041575 3A 67 0D 04 0586*      ld a,(drawbar_volumes+8)
041579 21 E6 10 04 0587*      ld hl,tonewheel_frequencies+322
04157D BE          0588*      cp (hl)
04157E 38 01       0589*      db 0x38, 0x01 ; jr c,1
041580 77          0590*      ld (hl),a
041581             0591*  
041581             0592*  @note_end9:
041581             0593*  
041581 C9          0594*      ret
041582             0159       include "organ/src/asm/organ_notes_bank_2.asm"
041582             0001*  organ_notes_bank_2:
041582 FD 21 BF 0B 0002*      ld iy,cmd0
       04          
041587             0003*  
041587 DD CB 02 46 0004*      bit 0,(ix+2)
04158B CA FB 15 04 0005*      jp z,@note_end0
04158F             0006*  
04158F 3A 5F 0D 04 0007*      ld a,(drawbar_volumes+0)
041593 21 FA 0F 04 0008*      ld hl,tonewheel_frequencies+86
041597 BE          0009*      cp (hl)
041598 38 01       0010*      db 0x38, 0x01 ; jr c,1
04159A 77          0011*      ld (hl),a
04159B             0012*  
04159B 3A 60 0D 04 0013*      ld a,(drawbar_volumes+1)
04159F 21 46 10 04 0014*      ld hl,tonewheel_frequencies+162
0415A3 BE          0015*      cp (hl)
0415A4 38 01       0016*      db 0x38, 0x01 ; jr c,1
0415A6 77          0017*      ld (hl),a
0415A7             0018*  
0415A7 3A 61 0D 04 0019*      ld a,(drawbar_volumes+2)
0415AB 21 2A 10 04 0020*      ld hl,tonewheel_frequencies+134
0415AF BE          0021*      cp (hl)
0415B0 38 01       0022*      db 0x38, 0x01 ; jr c,1
0415B2 77          0023*      ld (hl),a
0415B3             0024*  
0415B3 3A 62 0D 04 0025*      ld a,(drawbar_volumes+3)
0415B7 21 5A 10 04 0026*      ld hl,tonewheel_frequencies+182
0415BB BE          0027*      cp (hl)
0415BC 38 01       0028*      db 0x38, 0x01 ; jr c,1
0415BE 77          0029*      ld (hl),a
0415BF             0030*  
0415BF 3A 63 0D 04 0031*      ld a,(drawbar_volumes+4)
0415C3 21 76 10 04 0032*      ld hl,tonewheel_frequencies+210
0415C7 BE          0033*      cp (hl)
0415C8 38 01       0034*      db 0x38, 0x01 ; jr c,1
0415CA 77          0035*      ld (hl),a
0415CB             0036*  
0415CB 3A 64 0D 04 0037*      ld a,(drawbar_volumes+5)
0415CF 21 8A 10 04 0038*      ld hl,tonewheel_frequencies+230
0415D3 BE          0039*      cp (hl)
0415D4 38 01       0040*      db 0x38, 0x01 ; jr c,1
0415D6 77          0041*      ld (hl),a
0415D7             0042*  
0415D7 3A 65 0D 04 0043*      ld a,(drawbar_volumes+6)
0415DB 21 9A 10 04 0044*      ld hl,tonewheel_frequencies+246
0415DF BE          0045*      cp (hl)
0415E0 38 01       0046*      db 0x38, 0x01 ; jr c,1
0415E2 77          0047*      ld (hl),a
0415E3             0048*  
0415E3 3A 66 0D 04 0049*      ld a,(drawbar_volumes+7)
0415E7 21 A6 10 04 0050*      ld hl,tonewheel_frequencies+258
0415EB BE          0051*      cp (hl)
0415EC 38 01       0052*      db 0x38, 0x01 ; jr c,1
0415EE 77          0053*      ld (hl),a
0415EF             0054*  
0415EF 3A 67 0D 04 0055*      ld a,(drawbar_volumes+8)
0415F3 21 BA 10 04 0056*      ld hl,tonewheel_frequencies+278
0415F7 BE          0057*      cp (hl)
0415F8 38 01       0058*      db 0x38, 0x01 ; jr c,1
0415FA 77          0059*      ld (hl),a
0415FB             0060*  
0415FB             0061*  @note_end0:
0415FB             0062*  
0415FB DD CB 04 4E 0063*      bit 1,(ix+4)
0415FF CA 6F 16 04 0064*      jp z,@note_end1
041603             0065*  
041603 3A 5F 0D 04 0066*      ld a,(drawbar_volumes+0)
041607 21 06 10 04 0067*      ld hl,tonewheel_frequencies+98
04160B BE          0068*      cp (hl)
04160C 38 01       0069*      db 0x38, 0x01 ; jr c,1
04160E 77          0070*      ld (hl),a
04160F             0071*  
04160F 3A 60 0D 04 0072*      ld a,(drawbar_volumes+1)
041613 21 52 10 04 0073*      ld hl,tonewheel_frequencies+174
041617 BE          0074*      cp (hl)
041618 38 01       0075*      db 0x38, 0x01 ; jr c,1
04161A 77          0076*      ld (hl),a
04161B             0077*  
04161B 3A 61 0D 04 0078*      ld a,(drawbar_volumes+2)
04161F 21 36 10 04 0079*      ld hl,tonewheel_frequencies+146
041623 BE          0080*      cp (hl)
041624 38 01       0081*      db 0x38, 0x01 ; jr c,1
041626 77          0082*      ld (hl),a
041627             0083*  
041627 3A 62 0D 04 0084*      ld a,(drawbar_volumes+3)
04162B 21 66 10 04 0085*      ld hl,tonewheel_frequencies+194
04162F BE          0086*      cp (hl)
041630 38 01       0087*      db 0x38, 0x01 ; jr c,1
041632 77          0088*      ld (hl),a
041633             0089*  
041633 3A 63 0D 04 0090*      ld a,(drawbar_volumes+4)
041637 21 82 10 04 0091*      ld hl,tonewheel_frequencies+222
04163B BE          0092*      cp (hl)
04163C 38 01       0093*      db 0x38, 0x01 ; jr c,1
04163E 77          0094*      ld (hl),a
04163F             0095*  
04163F 3A 64 0D 04 0096*      ld a,(drawbar_volumes+5)
041643 21 96 10 04 0097*      ld hl,tonewheel_frequencies+242
041647 BE          0098*      cp (hl)
041648 38 01       0099*      db 0x38, 0x01 ; jr c,1
04164A 77          0100*      ld (hl),a
04164B             0101*  
04164B 3A 65 0D 04 0102*      ld a,(drawbar_volumes+6)
04164F 21 A6 10 04 0103*      ld hl,tonewheel_frequencies+258
041653 BE          0104*      cp (hl)
041654 38 01       0105*      db 0x38, 0x01 ; jr c,1
041656 77          0106*      ld (hl),a
041657             0107*  
041657 3A 66 0D 04 0108*      ld a,(drawbar_volumes+7)
04165B 21 C6 10 04 0109*      ld hl,tonewheel_frequencies+290
04165F BE          0110*      cp (hl)
041660 38 01       0111*      db 0x38, 0x01 ; jr c,1
041662 77          0112*      ld (hl),a
041663             0113*  
041663 3A 67 0D 04 0114*      ld a,(drawbar_volumes+8)
041667 21 DA 10 04 0115*      ld hl,tonewheel_frequencies+310
04166B BE          0116*      cp (hl)
04166C 38 01       0117*      db 0x38, 0x01 ; jr c,1
04166E 77          0118*      ld (hl),a
04166F             0119*  
04166F             0120*  @note_end1:
04166F             0121*  
04166F DD CB 04 56 0122*      bit 2,(ix+4)
041673 CA E3 16 04 0123*      jp z,@note_end2
041677             0124*  
041677 3A 5F 0D 04 0125*      ld a,(drawbar_volumes+0)
04167B 21 0E 10 04 0126*      ld hl,tonewheel_frequencies+106
04167F BE          0127*      cp (hl)
041680 38 01       0128*      db 0x38, 0x01 ; jr c,1
041682 77          0129*      ld (hl),a
041683             0130*  
041683 3A 60 0D 04 0131*      ld a,(drawbar_volumes+1)
041687 21 5A 10 04 0132*      ld hl,tonewheel_frequencies+182
04168B BE          0133*      cp (hl)
04168C 38 01       0134*      db 0x38, 0x01 ; jr c,1
04168E 77          0135*      ld (hl),a
04168F             0136*  
04168F 3A 61 0D 04 0137*      ld a,(drawbar_volumes+2)
041693 21 3E 10 04 0138*      ld hl,tonewheel_frequencies+154
041697 BE          0139*      cp (hl)
041698 38 01       0140*      db 0x38, 0x01 ; jr c,1
04169A 77          0141*      ld (hl),a
04169B             0142*  
04169B 3A 62 0D 04 0143*      ld a,(drawbar_volumes+3)
04169F 21 6E 10 04 0144*      ld hl,tonewheel_frequencies+202
0416A3 BE          0145*      cp (hl)
0416A4 38 01       0146*      db 0x38, 0x01 ; jr c,1
0416A6 77          0147*      ld (hl),a
0416A7             0148*  
0416A7 3A 63 0D 04 0149*      ld a,(drawbar_volumes+4)
0416AB 21 8A 10 04 0150*      ld hl,tonewheel_frequencies+230
0416AF BE          0151*      cp (hl)
0416B0 38 01       0152*      db 0x38, 0x01 ; jr c,1
0416B2 77          0153*      ld (hl),a
0416B3             0154*  
0416B3 3A 64 0D 04 0155*      ld a,(drawbar_volumes+5)
0416B7 21 9E 10 04 0156*      ld hl,tonewheel_frequencies+250
0416BB BE          0157*      cp (hl)
0416BC 38 01       0158*      db 0x38, 0x01 ; jr c,1
0416BE 77          0159*      ld (hl),a
0416BF             0160*  
0416BF 3A 65 0D 04 0161*      ld a,(drawbar_volumes+6)
0416C3 21 AE 10 04 0162*      ld hl,tonewheel_frequencies+266
0416C7 BE          0163*      cp (hl)
0416C8 38 01       0164*      db 0x38, 0x01 ; jr c,1
0416CA 77          0165*      ld (hl),a
0416CB             0166*  
0416CB 3A 66 0D 04 0167*      ld a,(drawbar_volumes+7)
0416CF 21 CE 10 04 0168*      ld hl,tonewheel_frequencies+298
0416D3 BE          0169*      cp (hl)
0416D4 38 01       0170*      db 0x38, 0x01 ; jr c,1
0416D6 77          0171*      ld (hl),a
0416D7             0172*  
0416D7 3A 67 0D 04 0173*      ld a,(drawbar_volumes+8)
0416DB 21 E2 10 04 0174*      ld hl,tonewheel_frequencies+318
0416DF BE          0175*      cp (hl)
0416E0 38 01       0176*      db 0x38, 0x01 ; jr c,1
0416E2 77          0177*      ld (hl),a
0416E3             0178*  
0416E3             0179*  @note_end2:
0416E3             0180*  
0416E3 DD CB 06 5E 0181*      bit 3,(ix+6)
0416E7 CA 57 17 04 0182*      jp z,@note_end3
0416EB             0183*  
0416EB 3A 5F 0D 04 0184*      ld a,(drawbar_volumes+0)
0416EF 21 12 10 04 0185*      ld hl,tonewheel_frequencies+110
0416F3 BE          0186*      cp (hl)
0416F4 38 01       0187*      db 0x38, 0x01 ; jr c,1
0416F6 77          0188*      ld (hl),a
0416F7             0189*  
0416F7 3A 60 0D 04 0190*      ld a,(drawbar_volumes+1)
0416FB 21 5E 10 04 0191*      ld hl,tonewheel_frequencies+186
0416FF BE          0192*      cp (hl)
041700 38 01       0193*      db 0x38, 0x01 ; jr c,1
041702 77          0194*      ld (hl),a
041703             0195*  
041703 3A 61 0D 04 0196*      ld a,(drawbar_volumes+2)
041707 21 42 10 04 0197*      ld hl,tonewheel_frequencies+158
04170B BE          0198*      cp (hl)
04170C 38 01       0199*      db 0x38, 0x01 ; jr c,1
04170E 77          0200*      ld (hl),a
04170F             0201*  
04170F 3A 62 0D 04 0202*      ld a,(drawbar_volumes+3)
041713 21 72 10 04 0203*      ld hl,tonewheel_frequencies+206
041717 BE          0204*      cp (hl)
041718 38 01       0205*      db 0x38, 0x01 ; jr c,1
04171A 77          0206*      ld (hl),a
04171B             0207*  
04171B 3A 63 0D 04 0208*      ld a,(drawbar_volumes+4)
04171F 21 8E 10 04 0209*      ld hl,tonewheel_frequencies+234
041723 BE          0210*      cp (hl)
041724 38 01       0211*      db 0x38, 0x01 ; jr c,1
041726 77          0212*      ld (hl),a
041727             0213*  
041727 3A 64 0D 04 0214*      ld a,(drawbar_volumes+5)
04172B 21 A2 10 04 0215*      ld hl,tonewheel_frequencies+254
04172F BE          0216*      cp (hl)
041730 38 01       0217*      db 0x38, 0x01 ; jr c,1
041732 77          0218*      ld (hl),a
041733             0219*  
041733 3A 65 0D 04 0220*      ld a,(drawbar_volumes+6)
041737 21 B2 10 04 0221*      ld hl,tonewheel_frequencies+270
04173B BE          0222*      cp (hl)
04173C 38 01       0223*      db 0x38, 0x01 ; jr c,1
04173E 77          0224*      ld (hl),a
04173F             0225*  
04173F 3A 66 0D 04 0226*      ld a,(drawbar_volumes+7)
041743 21 D2 10 04 0227*      ld hl,tonewheel_frequencies+302
041747 BE          0228*      cp (hl)
041748 38 01       0229*      db 0x38, 0x01 ; jr c,1
04174A 77          0230*      ld (hl),a
04174B             0231*  
04174B 3A 67 0D 04 0232*      ld a,(drawbar_volumes+8)
04174F 21 E6 10 04 0233*      ld hl,tonewheel_frequencies+322
041753 BE          0234*      cp (hl)
041754 38 01       0235*      db 0x38, 0x01 ; jr c,1
041756 77          0236*      ld (hl),a
041757             0237*  
041757             0238*  @note_end3:
041757             0239*  
041757 DD CB 04 5E 0240*      bit 3,(ix+4)
04175B CA CB 17 04 0241*      jp z,@note_end4
04175F             0242*  
04175F 3A 5F 0D 04 0243*      ld a,(drawbar_volumes+0)
041763 21 16 10 04 0244*      ld hl,tonewheel_frequencies+114
041767 BE          0245*      cp (hl)
041768 38 01       0246*      db 0x38, 0x01 ; jr c,1
04176A 77          0247*      ld (hl),a
04176B             0248*  
04176B 3A 60 0D 04 0249*      ld a,(drawbar_volumes+1)
04176F 21 62 10 04 0250*      ld hl,tonewheel_frequencies+190
041773 BE          0251*      cp (hl)
041774 38 01       0252*      db 0x38, 0x01 ; jr c,1
041776 77          0253*      ld (hl),a
041777             0254*  
041777 3A 61 0D 04 0255*      ld a,(drawbar_volumes+2)
04177B 21 46 10 04 0256*      ld hl,tonewheel_frequencies+162
04177F BE          0257*      cp (hl)
041780 38 01       0258*      db 0x38, 0x01 ; jr c,1
041782 77          0259*      ld (hl),a
041783             0260*  
041783 3A 62 0D 04 0261*      ld a,(drawbar_volumes+3)
041787 21 76 10 04 0262*      ld hl,tonewheel_frequencies+210
04178B BE          0263*      cp (hl)
04178C 38 01       0264*      db 0x38, 0x01 ; jr c,1
04178E 77          0265*      ld (hl),a
04178F             0266*  
04178F 3A 63 0D 04 0267*      ld a,(drawbar_volumes+4)
041793 21 92 10 04 0268*      ld hl,tonewheel_frequencies+238
041797 BE          0269*      cp (hl)
041798 38 01       0270*      db 0x38, 0x01 ; jr c,1
04179A 77          0271*      ld (hl),a
04179B             0272*  
04179B 3A 64 0D 04 0273*      ld a,(drawbar_volumes+5)
04179F 21 A6 10 04 0274*      ld hl,tonewheel_frequencies+258
0417A3 BE          0275*      cp (hl)
0417A4 38 01       0276*      db 0x38, 0x01 ; jr c,1
0417A6 77          0277*      ld (hl),a
0417A7             0278*  
0417A7 3A 65 0D 04 0279*      ld a,(drawbar_volumes+6)
0417AB 21 B6 10 04 0280*      ld hl,tonewheel_frequencies+274
0417AF BE          0281*      cp (hl)
0417B0 38 01       0282*      db 0x38, 0x01 ; jr c,1
0417B2 77          0283*      ld (hl),a
0417B3             0284*  
0417B3 3A 66 0D 04 0285*      ld a,(drawbar_volumes+7)
0417B7 21 D6 10 04 0286*      ld hl,tonewheel_frequencies+306
0417BB BE          0287*      cp (hl)
0417BC 38 01       0288*      db 0x38, 0x01 ; jr c,1
0417BE 77          0289*      ld (hl),a
0417BF             0290*  
0417BF 3A 67 0D 04 0291*      ld a,(drawbar_volumes+8)
0417C3 21 EA 10 04 0292*      ld hl,tonewheel_frequencies+326
0417C7 BE          0293*      cp (hl)
0417C8 38 01       0294*      db 0x38, 0x01 ; jr c,1
0417CA 77          0295*      ld (hl),a
0417CB             0296*  
0417CB             0297*  @note_end4:
0417CB             0298*  
0417CB DD CB 08 66 0299*      bit 4,(ix+8)
0417CF CA 3F 18 04 0300*      jp z,@note_end5
0417D3             0301*  
0417D3 3A 5F 0D 04 0302*      ld a,(drawbar_volumes+0)
0417D7 21 22 10 04 0303*      ld hl,tonewheel_frequencies+126
0417DB BE          0304*      cp (hl)
0417DC 38 01       0305*      db 0x38, 0x01 ; jr c,1
0417DE 77          0306*      ld (hl),a
0417DF             0307*  
0417DF 3A 60 0D 04 0308*      ld a,(drawbar_volumes+1)
0417E3 21 6E 10 04 0309*      ld hl,tonewheel_frequencies+202
0417E7 BE          0310*      cp (hl)
0417E8 38 01       0311*      db 0x38, 0x01 ; jr c,1
0417EA 77          0312*      ld (hl),a
0417EB             0313*  
0417EB 3A 61 0D 04 0314*      ld a,(drawbar_volumes+2)
0417EF 21 52 10 04 0315*      ld hl,tonewheel_frequencies+174
0417F3 BE          0316*      cp (hl)
0417F4 38 01       0317*      db 0x38, 0x01 ; jr c,1
0417F6 77          0318*      ld (hl),a
0417F7             0319*  
0417F7 3A 62 0D 04 0320*      ld a,(drawbar_volumes+3)
0417FB 21 82 10 04 0321*      ld hl,tonewheel_frequencies+222
0417FF BE          0322*      cp (hl)
041800 38 01       0323*      db 0x38, 0x01 ; jr c,1
041802 77          0324*      ld (hl),a
041803             0325*  
041803 3A 63 0D 04 0326*      ld a,(drawbar_volumes+4)
041807 21 9E 10 04 0327*      ld hl,tonewheel_frequencies+250
04180B BE          0328*      cp (hl)
04180C 38 01       0329*      db 0x38, 0x01 ; jr c,1
04180E 77          0330*      ld (hl),a
04180F             0331*  
04180F 3A 64 0D 04 0332*      ld a,(drawbar_volumes+5)
041813 21 B2 10 04 0333*      ld hl,tonewheel_frequencies+270
041817 BE          0334*      cp (hl)
041818 38 01       0335*      db 0x38, 0x01 ; jr c,1
04181A 77          0336*      ld (hl),a
04181B             0337*  
04181B 3A 65 0D 04 0338*      ld a,(drawbar_volumes+6)
04181F 21 C2 10 04 0339*      ld hl,tonewheel_frequencies+286
041823 BE          0340*      cp (hl)
041824 38 01       0341*      db 0x38, 0x01 ; jr c,1
041826 77          0342*      ld (hl),a
041827             0343*  
041827 3A 66 0D 04 0344*      ld a,(drawbar_volumes+7)
04182B 21 E2 10 04 0345*      ld hl,tonewheel_frequencies+318
04182F BE          0346*      cp (hl)
041830 38 01       0347*      db 0x38, 0x01 ; jr c,1
041832 77          0348*      ld (hl),a
041833             0349*  
041833 3A 67 0D 04 0350*      ld a,(drawbar_volumes+8)
041837 21 B2 10 04 0351*      ld hl,tonewheel_frequencies+270
04183B BE          0352*      cp (hl)
04183C 38 01       0353*      db 0x38, 0x01 ; jr c,1
04183E 77          0354*      ld (hl),a
04183F             0355*  
04183F             0356*  @note_end5:
04183F             0357*  
04183F DD CB 06 6E 0358*      bit 5,(ix+6)
041843 CA B3 18 04 0359*      jp z,@note_end6
041847             0360*  
041847 3A 5F 0D 04 0361*      ld a,(drawbar_volumes+0)
04184B 21 2A 10 04 0362*      ld hl,tonewheel_frequencies+134
04184F BE          0363*      cp (hl)
041850 38 01       0364*      db 0x38, 0x01 ; jr c,1
041852 77          0365*      ld (hl),a
041853             0366*  
041853 3A 60 0D 04 0367*      ld a,(drawbar_volumes+1)
041857 21 76 10 04 0368*      ld hl,tonewheel_frequencies+210
04185B BE          0369*      cp (hl)
04185C 38 01       0370*      db 0x38, 0x01 ; jr c,1
04185E 77          0371*      ld (hl),a
04185F             0372*  
04185F 3A 61 0D 04 0373*      ld a,(drawbar_volumes+2)
041863 21 5A 10 04 0374*      ld hl,tonewheel_frequencies+182
041867 BE          0375*      cp (hl)
041868 38 01       0376*      db 0x38, 0x01 ; jr c,1
04186A 77          0377*      ld (hl),a
04186B             0378*  
04186B 3A 62 0D 04 0379*      ld a,(drawbar_volumes+3)
04186F 21 8A 10 04 0380*      ld hl,tonewheel_frequencies+230
041873 BE          0381*      cp (hl)
041874 38 01       0382*      db 0x38, 0x01 ; jr c,1
041876 77          0383*      ld (hl),a
041877             0384*  
041877 3A 63 0D 04 0385*      ld a,(drawbar_volumes+4)
04187B 21 A6 10 04 0386*      ld hl,tonewheel_frequencies+258
04187F BE          0387*      cp (hl)
041880 38 01       0388*      db 0x38, 0x01 ; jr c,1
041882 77          0389*      ld (hl),a
041883             0390*  
041883 3A 64 0D 04 0391*      ld a,(drawbar_volumes+5)
041887 21 BA 10 04 0392*      ld hl,tonewheel_frequencies+278
04188B BE          0393*      cp (hl)
04188C 38 01       0394*      db 0x38, 0x01 ; jr c,1
04188E 77          0395*      ld (hl),a
04188F             0396*  
04188F 3A 65 0D 04 0397*      ld a,(drawbar_volumes+6)
041893 21 DE 10 04 0398*      ld hl,tonewheel_frequencies+314
041897 BE          0399*      cp (hl)
041898 38 01       0400*      db 0x38, 0x01 ; jr c,1
04189A 77          0401*      ld (hl),a
04189B             0402*  
04189B 3A 66 0D 04 0403*      ld a,(drawbar_volumes+7)
04189F 21 EA 10 04 0404*      ld hl,tonewheel_frequencies+326
0418A3 BE          0405*      cp (hl)
0418A4 38 01       0406*      db 0x38, 0x01 ; jr c,1
0418A6 77          0407*      ld (hl),a
0418A7             0408*  
0418A7 3A 67 0D 04 0409*      ld a,(drawbar_volumes+8)
0418AB 21 BA 10 04 0410*      ld hl,tonewheel_frequencies+278
0418AF BE          0411*      cp (hl)
0418B0 38 01       0412*      db 0x38, 0x01 ; jr c,1
0418B2 77          0413*      ld (hl),a
0418B3             0414*  
0418B3             0415*  @note_end6:
0418B3             0416*  
0418B3 DD CB 04 6E 0417*      bit 5,(ix+4)
0418B7 CA 27 19 04 0418*      jp z,@note_end7
0418BB             0419*  
0418BB 3A 5F 0D 04 0420*      ld a,(drawbar_volumes+0)
0418BF 21 36 10 04 0421*      ld hl,tonewheel_frequencies+146
0418C3 BE          0422*      cp (hl)
0418C4 38 01       0423*      db 0x38, 0x01 ; jr c,1
0418C6 77          0424*      ld (hl),a
0418C7             0425*  
0418C7 3A 60 0D 04 0426*      ld a,(drawbar_volumes+1)
0418CB 21 82 10 04 0427*      ld hl,tonewheel_frequencies+222
0418CF BE          0428*      cp (hl)
0418D0 38 01       0429*      db 0x38, 0x01 ; jr c,1
0418D2 77          0430*      ld (hl),a
0418D3             0431*  
0418D3 3A 61 0D 04 0432*      ld a,(drawbar_volumes+2)
0418D7 21 66 10 04 0433*      ld hl,tonewheel_frequencies+194
0418DB BE          0434*      cp (hl)
0418DC 38 01       0435*      db 0x38, 0x01 ; jr c,1
0418DE 77          0436*      ld (hl),a
0418DF             0437*  
0418DF 3A 62 0D 04 0438*      ld a,(drawbar_volumes+3)
0418E3 21 96 10 04 0439*      ld hl,tonewheel_frequencies+242
0418E7 BE          0440*      cp (hl)
0418E8 38 01       0441*      db 0x38, 0x01 ; jr c,1
0418EA 77          0442*      ld (hl),a
0418EB             0443*  
0418EB 3A 63 0D 04 0444*      ld a,(drawbar_volumes+4)
0418EF 21 C6 10 04 0445*      ld hl,tonewheel_frequencies+290
0418F3 BE          0446*      cp (hl)
0418F4 38 01       0447*      db 0x38, 0x01 ; jr c,1
0418F6 77          0448*      ld (hl),a
0418F7             0449*  
0418F7 3A 64 0D 04 0450*      ld a,(drawbar_volumes+5)
0418FB 21 DA 10 04 0451*      ld hl,tonewheel_frequencies+310
0418FF BE          0452*      cp (hl)
041900 38 01       0453*      db 0x38, 0x01 ; jr c,1
041902 77          0454*      ld (hl),a
041903             0455*  
041903 3A 65 0D 04 0456*      ld a,(drawbar_volumes+6)
041907 21 EA 10 04 0457*      ld hl,tonewheel_frequencies+326
04190B BE          0458*      cp (hl)
04190C 38 01       0459*      db 0x38, 0x01 ; jr c,1
04190E 77          0460*      ld (hl),a
04190F             0461*  
04190F 3A 66 0D 04 0462*      ld a,(drawbar_volumes+7)
041913 21 C6 10 04 0463*      ld hl,tonewheel_frequencies+290
041917 BE          0464*      cp (hl)
041918 38 01       0465*      db 0x38, 0x01 ; jr c,1
04191A 77          0466*      ld (hl),a
04191B             0467*  
04191B 3A 67 0D 04 0468*      ld a,(drawbar_volumes+8)
04191F 21 DA 10 04 0469*      ld hl,tonewheel_frequencies+310
041923 BE          0470*      cp (hl)
041924 38 01       0471*      db 0x38, 0x01 ; jr c,1
041926 77          0472*      ld (hl),a
041927             0473*  
041927             0474*  @note_end7:
041927             0475*  
041927 DD CB 06 76 0476*      bit 6,(ix+6)
04192B CA 9B 19 04 0477*      jp z,@note_end8
04192F             0478*  
04192F 3A 5F 0D 04 0479*      ld a,(drawbar_volumes+0)
041933 21 3E 10 04 0480*      ld hl,tonewheel_frequencies+154
041937 BE          0481*      cp (hl)
041938 38 01       0482*      db 0x38, 0x01 ; jr c,1
04193A 77          0483*      ld (hl),a
04193B             0484*  
04193B 3A 60 0D 04 0485*      ld a,(drawbar_volumes+1)
04193F 21 8A 10 04 0486*      ld hl,tonewheel_frequencies+230
041943 BE          0487*      cp (hl)
041944 38 01       0488*      db 0x38, 0x01 ; jr c,1
041946 77          0489*      ld (hl),a
041947             0490*  
041947 3A 61 0D 04 0491*      ld a,(drawbar_volumes+2)
04194B 21 6E 10 04 0492*      ld hl,tonewheel_frequencies+202
04194F BE          0493*      cp (hl)
041950 38 01       0494*      db 0x38, 0x01 ; jr c,1
041952 77          0495*      ld (hl),a
041953             0496*  
041953 3A 62 0D 04 0497*      ld a,(drawbar_volumes+3)
041957 21 9E 10 04 0498*      ld hl,tonewheel_frequencies+250
04195B BE          0499*      cp (hl)
04195C 38 01       0500*      db 0x38, 0x01 ; jr c,1
04195E 77          0501*      ld (hl),a
04195F             0502*  
04195F 3A 63 0D 04 0503*      ld a,(drawbar_volumes+4)
041963 21 CE 10 04 0504*      ld hl,tonewheel_frequencies+298
041967 BE          0505*      cp (hl)
041968 38 01       0506*      db 0x38, 0x01 ; jr c,1
04196A 77          0507*      ld (hl),a
04196B             0508*  
04196B 3A 64 0D 04 0509*      ld a,(drawbar_volumes+5)
04196F 21 E2 10 04 0510*      ld hl,tonewheel_frequencies+318
041973 BE          0511*      cp (hl)
041974 38 01       0512*      db 0x38, 0x01 ; jr c,1
041976 77          0513*      ld (hl),a
041977             0514*  
041977 3A 65 0D 04 0515*      ld a,(drawbar_volumes+6)
04197B 21 F2 10 04 0516*      ld hl,tonewheel_frequencies+334
04197F BE          0517*      cp (hl)
041980 38 01       0518*      db 0x38, 0x01 ; jr c,1
041982 77          0519*      ld (hl),a
041983             0520*  
041983 3A 66 0D 04 0521*      ld a,(drawbar_volumes+7)
041987 21 CE 10 04 0522*      ld hl,tonewheel_frequencies+298
04198B BE          0523*      cp (hl)
04198C 38 01       0524*      db 0x38, 0x01 ; jr c,1
04198E 77          0525*      ld (hl),a
04198F             0526*  
04198F 3A 67 0D 04 0527*      ld a,(drawbar_volumes+8)
041993 21 E2 10 04 0528*      ld hl,tonewheel_frequencies+318
041997 BE          0529*      cp (hl)
041998 38 01       0530*      db 0x38, 0x01 ; jr c,1
04199A 77          0531*      ld (hl),a
04199B             0532*  
04199B             0533*  @note_end8:
04199B             0534*  
04199B DD CB 06 7E 0535*      bit 7,(ix+6)
04199F CA 0F 1A 04 0536*      jp z,@note_end9
0419A3             0537*  
0419A3 3A 5F 0D 04 0538*      ld a,(drawbar_volumes+0)
0419A7 21 42 10 04 0539*      ld hl,tonewheel_frequencies+158
0419AB BE          0540*      cp (hl)
0419AC 38 01       0541*      db 0x38, 0x01 ; jr c,1
0419AE 77          0542*      ld (hl),a
0419AF             0543*  
0419AF 3A 60 0D 04 0544*      ld a,(drawbar_volumes+1)
0419B3 21 8E 10 04 0545*      ld hl,tonewheel_frequencies+234
0419B7 BE          0546*      cp (hl)
0419B8 38 01       0547*      db 0x38, 0x01 ; jr c,1
0419BA 77          0548*      ld (hl),a
0419BB             0549*  
0419BB 3A 61 0D 04 0550*      ld a,(drawbar_volumes+2)
0419BF 21 72 10 04 0551*      ld hl,tonewheel_frequencies+206
0419C3 BE          0552*      cp (hl)
0419C4 38 01       0553*      db 0x38, 0x01 ; jr c,1
0419C6 77          0554*      ld (hl),a
0419C7             0555*  
0419C7 3A 62 0D 04 0556*      ld a,(drawbar_volumes+3)
0419CB 21 A2 10 04 0557*      ld hl,tonewheel_frequencies+254
0419CF BE          0558*      cp (hl)
0419D0 38 01       0559*      db 0x38, 0x01 ; jr c,1
0419D2 77          0560*      ld (hl),a
0419D3             0561*  
0419D3 3A 63 0D 04 0562*      ld a,(drawbar_volumes+4)
0419D7 21 D2 10 04 0563*      ld hl,tonewheel_frequencies+302
0419DB BE          0564*      cp (hl)
0419DC 38 01       0565*      db 0x38, 0x01 ; jr c,1
0419DE 77          0566*      ld (hl),a
0419DF             0567*  
0419DF 3A 64 0D 04 0568*      ld a,(drawbar_volumes+5)
0419E3 21 E6 10 04 0569*      ld hl,tonewheel_frequencies+322
0419E7 BE          0570*      cp (hl)
0419E8 38 01       0571*      db 0x38, 0x01 ; jr c,1
0419EA 77          0572*      ld (hl),a
0419EB             0573*  
0419EB 3A 65 0D 04 0574*      ld a,(drawbar_volumes+6)
0419EF 21 B2 10 04 0575*      ld hl,tonewheel_frequencies+270
0419F3 BE          0576*      cp (hl)
0419F4 38 01       0577*      db 0x38, 0x01 ; jr c,1
0419F6 77          0578*      ld (hl),a
0419F7             0579*  
0419F7 3A 66 0D 04 0580*      ld a,(drawbar_volumes+7)
0419FB 21 D2 10 04 0581*      ld hl,tonewheel_frequencies+302
0419FF BE          0582*      cp (hl)
041A00 38 01       0583*      db 0x38, 0x01 ; jr c,1
041A02 77          0584*      ld (hl),a
041A03             0585*  
041A03 3A 67 0D 04 0586*      ld a,(drawbar_volumes+8)
041A07 21 E6 10 04 0587*      ld hl,tonewheel_frequencies+322
041A0B BE          0588*      cp (hl)
041A0C 38 01       0589*      db 0x38, 0x01 ; jr c,1
041A0E 77          0590*      ld (hl),a
041A0F             0591*  
041A0F             0592*  @note_end9:
041A0F             0593*  
041A0F C9          0594*      ret
041A10             0160       include "organ/src/asm/organ_notes_bank_3.asm"
041A10             0001*  organ_notes_bank_3:
041A10 FD 21 BF 0B 0002*      ld iy,cmd0
       04          
041A15             0003*  
041A15 DD CB 08 4E 0004*      bit 1,(ix+8)
041A19 CA 89 1A 04 0005*      jp z,@note_end0
041A1D             0006*  
041A1D 3A 5F 0D 04 0007*      ld a,(drawbar_volumes+0)
041A21 21 CA 0F 04 0008*      ld hl,tonewheel_frequencies+38
041A25 BE          0009*      cp (hl)
041A26 38 01       0010*      db 0x38, 0x01 ; jr c,1
041A28 77          0011*      ld (hl),a
041A29             0012*  
041A29 3A 60 0D 04 0013*      ld a,(drawbar_volumes+1)
041A2D 21 16 10 04 0014*      ld hl,tonewheel_frequencies+114
041A31 BE          0015*      cp (hl)
041A32 38 01       0016*      db 0x38, 0x01 ; jr c,1
041A34 77          0017*      ld (hl),a
041A35             0018*  
041A35 3A 61 0D 04 0019*      ld a,(drawbar_volumes+2)
041A39 21 FA 0F 04 0020*      ld hl,tonewheel_frequencies+86
041A3D BE          0021*      cp (hl)
041A3E 38 01       0022*      db 0x38, 0x01 ; jr c,1
041A40 77          0023*      ld (hl),a
041A41             0024*  
041A41 3A 62 0D 04 0025*      ld a,(drawbar_volumes+3)
041A45 21 2A 10 04 0026*      ld hl,tonewheel_frequencies+134
041A49 BE          0027*      cp (hl)
041A4A 38 01       0028*      db 0x38, 0x01 ; jr c,1
041A4C 77          0029*      ld (hl),a
041A4D             0030*  
041A4D 3A 63 0D 04 0031*      ld a,(drawbar_volumes+4)
041A51 21 46 10 04 0032*      ld hl,tonewheel_frequencies+162
041A55 BE          0033*      cp (hl)
041A56 38 01       0034*      db 0x38, 0x01 ; jr c,1
041A58 77          0035*      ld (hl),a
041A59             0036*  
041A59 3A 64 0D 04 0037*      ld a,(drawbar_volumes+5)
041A5D 21 5A 10 04 0038*      ld hl,tonewheel_frequencies+182
041A61 BE          0039*      cp (hl)
041A62 38 01       0040*      db 0x38, 0x01 ; jr c,1
041A64 77          0041*      ld (hl),a
041A65             0042*  
041A65 3A 65 0D 04 0043*      ld a,(drawbar_volumes+6)
041A69 21 6A 10 04 0044*      ld hl,tonewheel_frequencies+198
041A6D BE          0045*      cp (hl)
041A6E 38 01       0046*      db 0x38, 0x01 ; jr c,1
041A70 77          0047*      ld (hl),a
041A71             0048*  
041A71 3A 66 0D 04 0049*      ld a,(drawbar_volumes+7)
041A75 21 76 10 04 0050*      ld hl,tonewheel_frequencies+210
041A79 BE          0051*      cp (hl)
041A7A 38 01       0052*      db 0x38, 0x01 ; jr c,1
041A7C 77          0053*      ld (hl),a
041A7D             0054*  
041A7D 3A 67 0D 04 0055*      ld a,(drawbar_volumes+8)
041A81 21 8A 10 04 0056*      ld hl,tonewheel_frequencies+230
041A85 BE          0057*      cp (hl)
041A86 38 01       0058*      db 0x38, 0x01 ; jr c,1
041A88 77          0059*      ld (hl),a
041A89             0060*  
041A89             0061*  @note_end0:
041A89             0062*  
041A89 DD CB 0A 4E 0063*      bit 1,(ix+10)
041A8D CA FD 1A 04 0064*      jp z,@note_end1
041A91             0065*  
041A91 3A 5F 0D 04 0066*      ld a,(drawbar_volumes+0)
041A95 21 D6 0F 04 0067*      ld hl,tonewheel_frequencies+50
041A99 BE          0068*      cp (hl)
041A9A 38 01       0069*      db 0x38, 0x01 ; jr c,1
041A9C 77          0070*      ld (hl),a
041A9D             0071*  
041A9D 3A 60 0D 04 0072*      ld a,(drawbar_volumes+1)
041AA1 21 22 10 04 0073*      ld hl,tonewheel_frequencies+126
041AA5 BE          0074*      cp (hl)
041AA6 38 01       0075*      db 0x38, 0x01 ; jr c,1
041AA8 77          0076*      ld (hl),a
041AA9             0077*  
041AA9 3A 61 0D 04 0078*      ld a,(drawbar_volumes+2)
041AAD 21 06 10 04 0079*      ld hl,tonewheel_frequencies+98
041AB1 BE          0080*      cp (hl)
041AB2 38 01       0081*      db 0x38, 0x01 ; jr c,1
041AB4 77          0082*      ld (hl),a
041AB5             0083*  
041AB5 3A 62 0D 04 0084*      ld a,(drawbar_volumes+3)
041AB9 21 36 10 04 0085*      ld hl,tonewheel_frequencies+146
041ABD BE          0086*      cp (hl)
041ABE 38 01       0087*      db 0x38, 0x01 ; jr c,1
041AC0 77          0088*      ld (hl),a
041AC1             0089*  
041AC1 3A 63 0D 04 0090*      ld a,(drawbar_volumes+4)
041AC5 21 52 10 04 0091*      ld hl,tonewheel_frequencies+174
041AC9 BE          0092*      cp (hl)
041ACA 38 01       0093*      db 0x38, 0x01 ; jr c,1
041ACC 77          0094*      ld (hl),a
041ACD             0095*  
041ACD 3A 64 0D 04 0096*      ld a,(drawbar_volumes+5)
041AD1 21 66 10 04 0097*      ld hl,tonewheel_frequencies+194
041AD5 BE          0098*      cp (hl)
041AD6 38 01       0099*      db 0x38, 0x01 ; jr c,1
041AD8 77          0100*      ld (hl),a
041AD9             0101*  
041AD9 3A 65 0D 04 0102*      ld a,(drawbar_volumes+6)
041ADD 21 76 10 04 0103*      ld hl,tonewheel_frequencies+210
041AE1 BE          0104*      cp (hl)
041AE2 38 01       0105*      db 0x38, 0x01 ; jr c,1
041AE4 77          0106*      ld (hl),a
041AE5             0107*  
041AE5 3A 66 0D 04 0108*      ld a,(drawbar_volumes+7)
041AE9 21 82 10 04 0109*      ld hl,tonewheel_frequencies+222
041AED BE          0110*      cp (hl)
041AEE 38 01       0111*      db 0x38, 0x01 ; jr c,1
041AF0 77          0112*      ld (hl),a
041AF1             0113*  
041AF1 3A 67 0D 04 0114*      ld a,(drawbar_volumes+8)
041AF5 21 96 10 04 0115*      ld hl,tonewheel_frequencies+242
041AF9 BE          0116*      cp (hl)
041AFA 38 01       0117*      db 0x38, 0x01 ; jr c,1
041AFC 77          0118*      ld (hl),a
041AFD             0119*  
041AFD             0120*  @note_end1:
041AFD             0121*  
041AFD DD CB 06 56 0122*      bit 2,(ix+6)
041B01 CA 71 1B 04 0123*      jp z,@note_end2
041B05             0124*  
041B05 3A 5F 0D 04 0125*      ld a,(drawbar_volumes+0)
041B09 21 DE 0F 04 0126*      ld hl,tonewheel_frequencies+58
041B0D BE          0127*      cp (hl)
041B0E 38 01       0128*      db 0x38, 0x01 ; jr c,1
041B10 77          0129*      ld (hl),a
041B11             0130*  
041B11 3A 60 0D 04 0131*      ld a,(drawbar_volumes+1)
041B15 21 2A 10 04 0132*      ld hl,tonewheel_frequencies+134
041B19 BE          0133*      cp (hl)
041B1A 38 01       0134*      db 0x38, 0x01 ; jr c,1
041B1C 77          0135*      ld (hl),a
041B1D             0136*  
041B1D 3A 61 0D 04 0137*      ld a,(drawbar_volumes+2)
041B21 21 0E 10 04 0138*      ld hl,tonewheel_frequencies+106
041B25 BE          0139*      cp (hl)
041B26 38 01       0140*      db 0x38, 0x01 ; jr c,1
041B28 77          0141*      ld (hl),a
041B29             0142*  
041B29 3A 62 0D 04 0143*      ld a,(drawbar_volumes+3)
041B2D 21 3E 10 04 0144*      ld hl,tonewheel_frequencies+154
041B31 BE          0145*      cp (hl)
041B32 38 01       0146*      db 0x38, 0x01 ; jr c,1
041B34 77          0147*      ld (hl),a
041B35             0148*  
041B35 3A 63 0D 04 0149*      ld a,(drawbar_volumes+4)
041B39 21 5A 10 04 0150*      ld hl,tonewheel_frequencies+182
041B3D BE          0151*      cp (hl)
041B3E 38 01       0152*      db 0x38, 0x01 ; jr c,1
041B40 77          0153*      ld (hl),a
041B41             0154*  
041B41 3A 64 0D 04 0155*      ld a,(drawbar_volumes+5)
041B45 21 6E 10 04 0156*      ld hl,tonewheel_frequencies+202
041B49 BE          0157*      cp (hl)
041B4A 38 01       0158*      db 0x38, 0x01 ; jr c,1
041B4C 77          0159*      ld (hl),a
041B4D             0160*  
041B4D 3A 65 0D 04 0161*      ld a,(drawbar_volumes+6)
041B51 21 7E 10 04 0162*      ld hl,tonewheel_frequencies+218
041B55 BE          0163*      cp (hl)
041B56 38 01       0164*      db 0x38, 0x01 ; jr c,1
041B58 77          0165*      ld (hl),a
041B59             0166*  
041B59 3A 66 0D 04 0167*      ld a,(drawbar_volumes+7)
041B5D 21 8A 10 04 0168*      ld hl,tonewheel_frequencies+230
041B61 BE          0169*      cp (hl)
041B62 38 01       0170*      db 0x38, 0x01 ; jr c,1
041B64 77          0171*      ld (hl),a
041B65             0172*  
041B65 3A 67 0D 04 0173*      ld a,(drawbar_volumes+8)
041B69 21 9E 10 04 0174*      ld hl,tonewheel_frequencies+250
041B6D BE          0175*      cp (hl)
041B6E 38 01       0176*      db 0x38, 0x01 ; jr c,1
041B70 77          0177*      ld (hl),a
041B71             0178*  
041B71             0179*  @note_end2:
041B71             0180*  
041B71 DD CB 08 5E 0181*      bit 3,(ix+8)
041B75 CA E5 1B 04 0182*      jp z,@note_end3
041B79             0183*  
041B79 3A 5F 0D 04 0184*      ld a,(drawbar_volumes+0)
041B7D 21 E2 0F 04 0185*      ld hl,tonewheel_frequencies+62
041B81 BE          0186*      cp (hl)
041B82 38 01       0187*      db 0x38, 0x01 ; jr c,1
041B84 77          0188*      ld (hl),a
041B85             0189*  
041B85 3A 60 0D 04 0190*      ld a,(drawbar_volumes+1)
041B89 21 2E 10 04 0191*      ld hl,tonewheel_frequencies+138
041B8D BE          0192*      cp (hl)
041B8E 38 01       0193*      db 0x38, 0x01 ; jr c,1
041B90 77          0194*      ld (hl),a
041B91             0195*  
041B91 3A 61 0D 04 0196*      ld a,(drawbar_volumes+2)
041B95 21 12 10 04 0197*      ld hl,tonewheel_frequencies+110
041B99 BE          0198*      cp (hl)
041B9A 38 01       0199*      db 0x38, 0x01 ; jr c,1
041B9C 77          0200*      ld (hl),a
041B9D             0201*  
041B9D 3A 62 0D 04 0202*      ld a,(drawbar_volumes+3)
041BA1 21 42 10 04 0203*      ld hl,tonewheel_frequencies+158
041BA5 BE          0204*      cp (hl)
041BA6 38 01       0205*      db 0x38, 0x01 ; jr c,1
041BA8 77          0206*      ld (hl),a
041BA9             0207*  
041BA9 3A 63 0D 04 0208*      ld a,(drawbar_volumes+4)
041BAD 21 5E 10 04 0209*      ld hl,tonewheel_frequencies+186
041BB1 BE          0210*      cp (hl)
041BB2 38 01       0211*      db 0x38, 0x01 ; jr c,1
041BB4 77          0212*      ld (hl),a
041BB5             0213*  
041BB5 3A 64 0D 04 0214*      ld a,(drawbar_volumes+5)
041BB9 21 72 10 04 0215*      ld hl,tonewheel_frequencies+206
041BBD BE          0216*      cp (hl)
041BBE 38 01       0217*      db 0x38, 0x01 ; jr c,1
041BC0 77          0218*      ld (hl),a
041BC1             0219*  
041BC1 3A 65 0D 04 0220*      ld a,(drawbar_volumes+6)
041BC5 21 82 10 04 0221*      ld hl,tonewheel_frequencies+222
041BC9 BE          0222*      cp (hl)
041BCA 38 01       0223*      db 0x38, 0x01 ; jr c,1
041BCC 77          0224*      ld (hl),a
041BCD             0225*  
041BCD 3A 66 0D 04 0226*      ld a,(drawbar_volumes+7)
041BD1 21 8E 10 04 0227*      ld hl,tonewheel_frequencies+234
041BD5 BE          0228*      cp (hl)
041BD6 38 01       0229*      db 0x38, 0x01 ; jr c,1
041BD8 77          0230*      ld (hl),a
041BD9             0231*  
041BD9 3A 67 0D 04 0232*      ld a,(drawbar_volumes+8)
041BDD 21 A2 10 04 0233*      ld hl,tonewheel_frequencies+254
041BE1 BE          0234*      cp (hl)
041BE2 38 01       0235*      db 0x38, 0x01 ; jr c,1
041BE4 77          0236*      ld (hl),a
041BE5             0237*  
041BE5             0238*  @note_end3:
041BE5             0239*  
041BE5 DD CB 0A 5E 0240*      bit 3,(ix+10)
041BE9 CA 59 1C 04 0241*      jp z,@note_end4
041BED             0242*  
041BED 3A 5F 0D 04 0243*      ld a,(drawbar_volumes+0)
041BF1 21 E6 0F 04 0244*      ld hl,tonewheel_frequencies+66
041BF5 BE          0245*      cp (hl)
041BF6 38 01       0246*      db 0x38, 0x01 ; jr c,1
041BF8 77          0247*      ld (hl),a
041BF9             0248*  
041BF9 3A 60 0D 04 0249*      ld a,(drawbar_volumes+1)
041BFD 21 32 10 04 0250*      ld hl,tonewheel_frequencies+142
041C01 BE          0251*      cp (hl)
041C02 38 01       0252*      db 0x38, 0x01 ; jr c,1
041C04 77          0253*      ld (hl),a
041C05             0254*  
041C05 3A 61 0D 04 0255*      ld a,(drawbar_volumes+2)
041C09 21 16 10 04 0256*      ld hl,tonewheel_frequencies+114
041C0D BE          0257*      cp (hl)
041C0E 38 01       0258*      db 0x38, 0x01 ; jr c,1
041C10 77          0259*      ld (hl),a
041C11             0260*  
041C11 3A 62 0D 04 0261*      ld a,(drawbar_volumes+3)
041C15 21 46 10 04 0262*      ld hl,tonewheel_frequencies+162
041C19 BE          0263*      cp (hl)
041C1A 38 01       0264*      db 0x38, 0x01 ; jr c,1
041C1C 77          0265*      ld (hl),a
041C1D             0266*  
041C1D 3A 63 0D 04 0267*      ld a,(drawbar_volumes+4)
041C21 21 62 10 04 0268*      ld hl,tonewheel_frequencies+190
041C25 BE          0269*      cp (hl)
041C26 38 01       0270*      db 0x38, 0x01 ; jr c,1
041C28 77          0271*      ld (hl),a
041C29             0272*  
041C29 3A 64 0D 04 0273*      ld a,(drawbar_volumes+5)
041C2D 21 76 10 04 0274*      ld hl,tonewheel_frequencies+210
041C31 BE          0275*      cp (hl)
041C32 38 01       0276*      db 0x38, 0x01 ; jr c,1
041C34 77          0277*      ld (hl),a
041C35             0278*  
041C35 3A 65 0D 04 0279*      ld a,(drawbar_volumes+6)
041C39 21 86 10 04 0280*      ld hl,tonewheel_frequencies+226
041C3D BE          0281*      cp (hl)
041C3E 38 01       0282*      db 0x38, 0x01 ; jr c,1
041C40 77          0283*      ld (hl),a
041C41             0284*  
041C41 3A 66 0D 04 0285*      ld a,(drawbar_volumes+7)
041C45 21 92 10 04 0286*      ld hl,tonewheel_frequencies+238
041C49 BE          0287*      cp (hl)
041C4A 38 01       0288*      db 0x38, 0x01 ; jr c,1
041C4C 77          0289*      ld (hl),a
041C4D             0290*  
041C4D 3A 67 0D 04 0291*      ld a,(drawbar_volumes+8)
041C51 21 A6 10 04 0292*      ld hl,tonewheel_frequencies+258
041C55 BE          0293*      cp (hl)
041C56 38 01       0294*      db 0x38, 0x01 ; jr c,1
041C58 77          0295*      ld (hl),a
041C59             0296*  
041C59             0297*  @note_end4:
041C59             0298*  
041C59 DD CB 0A 66 0299*      bit 4,(ix+10)
041C5D CA CD 1C 04 0300*      jp z,@note_end5
041C61             0301*  
041C61 3A 5F 0D 04 0302*      ld a,(drawbar_volumes+0)
041C65 21 F2 0F 04 0303*      ld hl,tonewheel_frequencies+78
041C69 BE          0304*      cp (hl)
041C6A 38 01       0305*      db 0x38, 0x01 ; jr c,1
041C6C 77          0306*      ld (hl),a
041C6D             0307*  
041C6D 3A 60 0D 04 0308*      ld a,(drawbar_volumes+1)
041C71 21 3E 10 04 0309*      ld hl,tonewheel_frequencies+154
041C75 BE          0310*      cp (hl)
041C76 38 01       0311*      db 0x38, 0x01 ; jr c,1
041C78 77          0312*      ld (hl),a
041C79             0313*  
041C79 3A 61 0D 04 0314*      ld a,(drawbar_volumes+2)
041C7D 21 22 10 04 0315*      ld hl,tonewheel_frequencies+126
041C81 BE          0316*      cp (hl)
041C82 38 01       0317*      db 0x38, 0x01 ; jr c,1
041C84 77          0318*      ld (hl),a
041C85             0319*  
041C85 3A 62 0D 04 0320*      ld a,(drawbar_volumes+3)
041C89 21 52 10 04 0321*      ld hl,tonewheel_frequencies+174
041C8D BE          0322*      cp (hl)
041C8E 38 01       0323*      db 0x38, 0x01 ; jr c,1
041C90 77          0324*      ld (hl),a
041C91             0325*  
041C91 3A 63 0D 04 0326*      ld a,(drawbar_volumes+4)
041C95 21 6E 10 04 0327*      ld hl,tonewheel_frequencies+202
041C99 BE          0328*      cp (hl)
041C9A 38 01       0329*      db 0x38, 0x01 ; jr c,1
041C9C 77          0330*      ld (hl),a
041C9D             0331*  
041C9D 3A 64 0D 04 0332*      ld a,(drawbar_volumes+5)
041CA1 21 82 10 04 0333*      ld hl,tonewheel_frequencies+222
041CA5 BE          0334*      cp (hl)
041CA6 38 01       0335*      db 0x38, 0x01 ; jr c,1
041CA8 77          0336*      ld (hl),a
041CA9             0337*  
041CA9 3A 65 0D 04 0338*      ld a,(drawbar_volumes+6)
041CAD 21 92 10 04 0339*      ld hl,tonewheel_frequencies+238
041CB1 BE          0340*      cp (hl)
041CB2 38 01       0341*      db 0x38, 0x01 ; jr c,1
041CB4 77          0342*      ld (hl),a
041CB5             0343*  
041CB5 3A 66 0D 04 0344*      ld a,(drawbar_volumes+7)
041CB9 21 9E 10 04 0345*      ld hl,tonewheel_frequencies+250
041CBD BE          0346*      cp (hl)
041CBE 38 01       0347*      db 0x38, 0x01 ; jr c,1
041CC0 77          0348*      ld (hl),a
041CC1             0349*  
041CC1 3A 67 0D 04 0350*      ld a,(drawbar_volumes+8)
041CC5 21 B2 10 04 0351*      ld hl,tonewheel_frequencies+270
041CC9 BE          0352*      cp (hl)
041CCA 38 01       0353*      db 0x38, 0x01 ; jr c,1
041CCC 77          0354*      ld (hl),a
041CCD             0355*  
041CCD             0356*  @note_end5:
041CCD             0357*  
041CCD DD CB 08 6E 0358*      bit 5,(ix+8)
041CD1 CA 41 1D 04 0359*      jp z,@note_end6
041CD5             0360*  
041CD5 3A 5F 0D 04 0361*      ld a,(drawbar_volumes+0)
041CD9 21 FA 0F 04 0362*      ld hl,tonewheel_frequencies+86
041CDD BE          0363*      cp (hl)
041CDE 38 01       0364*      db 0x38, 0x01 ; jr c,1
041CE0 77          0365*      ld (hl),a
041CE1             0366*  
041CE1 3A 60 0D 04 0367*      ld a,(drawbar_volumes+1)
041CE5 21 46 10 04 0368*      ld hl,tonewheel_frequencies+162
041CE9 BE          0369*      cp (hl)
041CEA 38 01       0370*      db 0x38, 0x01 ; jr c,1
041CEC 77          0371*      ld (hl),a
041CED             0372*  
041CED 3A 61 0D 04 0373*      ld a,(drawbar_volumes+2)
041CF1 21 2A 10 04 0374*      ld hl,tonewheel_frequencies+134
041CF5 BE          0375*      cp (hl)
041CF6 38 01       0376*      db 0x38, 0x01 ; jr c,1
041CF8 77          0377*      ld (hl),a
041CF9             0378*  
041CF9 3A 62 0D 04 0379*      ld a,(drawbar_volumes+3)
041CFD 21 5A 10 04 0380*      ld hl,tonewheel_frequencies+182
041D01 BE          0381*      cp (hl)
041D02 38 01       0382*      db 0x38, 0x01 ; jr c,1
041D04 77          0383*      ld (hl),a
041D05             0384*  
041D05 3A 63 0D 04 0385*      ld a,(drawbar_volumes+4)
041D09 21 76 10 04 0386*      ld hl,tonewheel_frequencies+210
041D0D BE          0387*      cp (hl)
041D0E 38 01       0388*      db 0x38, 0x01 ; jr c,1
041D10 77          0389*      ld (hl),a
041D11             0390*  
041D11 3A 64 0D 04 0391*      ld a,(drawbar_volumes+5)
041D15 21 8A 10 04 0392*      ld hl,tonewheel_frequencies+230
041D19 BE          0393*      cp (hl)
041D1A 38 01       0394*      db 0x38, 0x01 ; jr c,1
041D1C 77          0395*      ld (hl),a
041D1D             0396*  
041D1D 3A 65 0D 04 0397*      ld a,(drawbar_volumes+6)
041D21 21 9A 10 04 0398*      ld hl,tonewheel_frequencies+246
041D25 BE          0399*      cp (hl)
041D26 38 01       0400*      db 0x38, 0x01 ; jr c,1
041D28 77          0401*      ld (hl),a
041D29             0402*  
041D29 3A 66 0D 04 0403*      ld a,(drawbar_volumes+7)
041D2D 21 A6 10 04 0404*      ld hl,tonewheel_frequencies+258
041D31 BE          0405*      cp (hl)
041D32 38 01       0406*      db 0x38, 0x01 ; jr c,1
041D34 77          0407*      ld (hl),a
041D35             0408*  
041D35 3A 67 0D 04 0409*      ld a,(drawbar_volumes+8)
041D39 21 BA 10 04 0410*      ld hl,tonewheel_frequencies+278
041D3D BE          0411*      cp (hl)
041D3E 38 01       0412*      db 0x38, 0x01 ; jr c,1
041D40 77          0413*      ld (hl),a
041D41             0414*  
041D41             0415*  @note_end6:
041D41             0416*  
041D41 DD CB 08 76 0417*      bit 6,(ix+8)
041D45 CA B5 1D 04 0418*      jp z,@note_end7
041D49             0419*  
041D49 3A 5F 0D 04 0420*      ld a,(drawbar_volumes+0)
041D4D 21 06 10 04 0421*      ld hl,tonewheel_frequencies+98
041D51 BE          0422*      cp (hl)
041D52 38 01       0423*      db 0x38, 0x01 ; jr c,1
041D54 77          0424*      ld (hl),a
041D55             0425*  
041D55 3A 60 0D 04 0426*      ld a,(drawbar_volumes+1)
041D59 21 52 10 04 0427*      ld hl,tonewheel_frequencies+174
041D5D BE          0428*      cp (hl)
041D5E 38 01       0429*      db 0x38, 0x01 ; jr c,1
041D60 77          0430*      ld (hl),a
041D61             0431*  
041D61 3A 61 0D 04 0432*      ld a,(drawbar_volumes+2)
041D65 21 36 10 04 0433*      ld hl,tonewheel_frequencies+146
041D69 BE          0434*      cp (hl)
041D6A 38 01       0435*      db 0x38, 0x01 ; jr c,1
041D6C 77          0436*      ld (hl),a
041D6D             0437*  
041D6D 3A 62 0D 04 0438*      ld a,(drawbar_volumes+3)
041D71 21 66 10 04 0439*      ld hl,tonewheel_frequencies+194
041D75 BE          0440*      cp (hl)
041D76 38 01       0441*      db 0x38, 0x01 ; jr c,1
041D78 77          0442*      ld (hl),a
041D79             0443*  
041D79 3A 63 0D 04 0444*      ld a,(drawbar_volumes+4)
041D7D 21 82 10 04 0445*      ld hl,tonewheel_frequencies+222
041D81 BE          0446*      cp (hl)
041D82 38 01       0447*      db 0x38, 0x01 ; jr c,1
041D84 77          0448*      ld (hl),a
041D85             0449*  
041D85 3A 64 0D 04 0450*      ld a,(drawbar_volumes+5)
041D89 21 96 10 04 0451*      ld hl,tonewheel_frequencies+242
041D8D BE          0452*      cp (hl)
041D8E 38 01       0453*      db 0x38, 0x01 ; jr c,1
041D90 77          0454*      ld (hl),a
041D91             0455*  
041D91 3A 65 0D 04 0456*      ld a,(drawbar_volumes+6)
041D95 21 A6 10 04 0457*      ld hl,tonewheel_frequencies+258
041D99 BE          0458*      cp (hl)
041D9A 38 01       0459*      db 0x38, 0x01 ; jr c,1
041D9C 77          0460*      ld (hl),a
041D9D             0461*  
041D9D 3A 66 0D 04 0462*      ld a,(drawbar_volumes+7)
041DA1 21 C6 10 04 0463*      ld hl,tonewheel_frequencies+290
041DA5 BE          0464*      cp (hl)
041DA6 38 01       0465*      db 0x38, 0x01 ; jr c,1
041DA8 77          0466*      ld (hl),a
041DA9             0467*  
041DA9 3A 67 0D 04 0468*      ld a,(drawbar_volumes+8)
041DAD 21 DA 10 04 0469*      ld hl,tonewheel_frequencies+310
041DB1 BE          0470*      cp (hl)
041DB2 38 01       0471*      db 0x38, 0x01 ; jr c,1
041DB4 77          0472*      ld (hl),a
041DB5             0473*  
041DB5             0474*  @note_end7:
041DB5             0475*  
041DB5 DD CB 0A 76 0476*      bit 6,(ix+10)
041DB9 CA 29 1E 04 0477*      jp z,@note_end8
041DBD             0478*  
041DBD 3A 5F 0D 04 0479*      ld a,(drawbar_volumes+0)
041DC1 21 0E 10 04 0480*      ld hl,tonewheel_frequencies+106
041DC5 BE          0481*      cp (hl)
041DC6 38 01       0482*      db 0x38, 0x01 ; jr c,1
041DC8 77          0483*      ld (hl),a
041DC9             0484*  
041DC9 3A 60 0D 04 0485*      ld a,(drawbar_volumes+1)
041DCD 21 5A 10 04 0486*      ld hl,tonewheel_frequencies+182
041DD1 BE          0487*      cp (hl)
041DD2 38 01       0488*      db 0x38, 0x01 ; jr c,1
041DD4 77          0489*      ld (hl),a
041DD5             0490*  
041DD5 3A 61 0D 04 0491*      ld a,(drawbar_volumes+2)
041DD9 21 3E 10 04 0492*      ld hl,tonewheel_frequencies+154
041DDD BE          0493*      cp (hl)
041DDE 38 01       0494*      db 0x38, 0x01 ; jr c,1
041DE0 77          0495*      ld (hl),a
041DE1             0496*  
041DE1 3A 62 0D 04 0497*      ld a,(drawbar_volumes+3)
041DE5 21 6E 10 04 0498*      ld hl,tonewheel_frequencies+202
041DE9 BE          0499*      cp (hl)
041DEA 38 01       0500*      db 0x38, 0x01 ; jr c,1
041DEC 77          0501*      ld (hl),a
041DED             0502*  
041DED 3A 63 0D 04 0503*      ld a,(drawbar_volumes+4)
041DF1 21 8A 10 04 0504*      ld hl,tonewheel_frequencies+230
041DF5 BE          0505*      cp (hl)
041DF6 38 01       0506*      db 0x38, 0x01 ; jr c,1
041DF8 77          0507*      ld (hl),a
041DF9             0508*  
041DF9 3A 64 0D 04 0509*      ld a,(drawbar_volumes+5)
041DFD 21 9E 10 04 0510*      ld hl,tonewheel_frequencies+250
041E01 BE          0511*      cp (hl)
041E02 38 01       0512*      db 0x38, 0x01 ; jr c,1
041E04 77          0513*      ld (hl),a
041E05             0514*  
041E05 3A 65 0D 04 0515*      ld a,(drawbar_volumes+6)
041E09 21 AE 10 04 0516*      ld hl,tonewheel_frequencies+266
041E0D BE          0517*      cp (hl)
041E0E 38 01       0518*      db 0x38, 0x01 ; jr c,1
041E10 77          0519*      ld (hl),a
041E11             0520*  
041E11 3A 66 0D 04 0521*      ld a,(drawbar_volumes+7)
041E15 21 CE 10 04 0522*      ld hl,tonewheel_frequencies+298
041E19 BE          0523*      cp (hl)
041E1A 38 01       0524*      db 0x38, 0x01 ; jr c,1
041E1C 77          0525*      ld (hl),a
041E1D             0526*  
041E1D 3A 67 0D 04 0527*      ld a,(drawbar_volumes+8)
041E21 21 E2 10 04 0528*      ld hl,tonewheel_frequencies+318
041E25 BE          0529*      cp (hl)
041E26 38 01       0530*      db 0x38, 0x01 ; jr c,1
041E28 77          0531*      ld (hl),a
041E29             0532*  
041E29             0533*  @note_end8:
041E29             0534*  
041E29 DD CB 0A 7E 0535*      bit 7,(ix+10)
041E2D CA 9D 1E 04 0536*      jp z,@note_end9
041E31             0537*  
041E31 3A 5F 0D 04 0538*      ld a,(drawbar_volumes+0)
041E35 21 12 10 04 0539*      ld hl,tonewheel_frequencies+110
041E39 BE          0540*      cp (hl)
041E3A 38 01       0541*      db 0x38, 0x01 ; jr c,1
041E3C 77          0542*      ld (hl),a
041E3D             0543*  
041E3D 3A 60 0D 04 0544*      ld a,(drawbar_volumes+1)
041E41 21 5E 10 04 0545*      ld hl,tonewheel_frequencies+186
041E45 BE          0546*      cp (hl)
041E46 38 01       0547*      db 0x38, 0x01 ; jr c,1
041E48 77          0548*      ld (hl),a
041E49             0549*  
041E49 3A 61 0D 04 0550*      ld a,(drawbar_volumes+2)
041E4D 21 42 10 04 0551*      ld hl,tonewheel_frequencies+158
041E51 BE          0552*      cp (hl)
041E52 38 01       0553*      db 0x38, 0x01 ; jr c,1
041E54 77          0554*      ld (hl),a
041E55             0555*  
041E55 3A 62 0D 04 0556*      ld a,(drawbar_volumes+3)
041E59 21 72 10 04 0557*      ld hl,tonewheel_frequencies+206
041E5D BE          0558*      cp (hl)
041E5E 38 01       0559*      db 0x38, 0x01 ; jr c,1
041E60 77          0560*      ld (hl),a
041E61             0561*  
041E61 3A 63 0D 04 0562*      ld a,(drawbar_volumes+4)
041E65 21 8E 10 04 0563*      ld hl,tonewheel_frequencies+234
041E69 BE          0564*      cp (hl)
041E6A 38 01       0565*      db 0x38, 0x01 ; jr c,1
041E6C 77          0566*      ld (hl),a
041E6D             0567*  
041E6D 3A 64 0D 04 0568*      ld a,(drawbar_volumes+5)
041E71 21 A2 10 04 0569*      ld hl,tonewheel_frequencies+254
041E75 BE          0570*      cp (hl)
041E76 38 01       0571*      db 0x38, 0x01 ; jr c,1
041E78 77          0572*      ld (hl),a
041E79             0573*  
041E79 3A 65 0D 04 0574*      ld a,(drawbar_volumes+6)
041E7D 21 B2 10 04 0575*      ld hl,tonewheel_frequencies+270
041E81 BE          0576*      cp (hl)
041E82 38 01       0577*      db 0x38, 0x01 ; jr c,1
041E84 77          0578*      ld (hl),a
041E85             0579*  
041E85 3A 66 0D 04 0580*      ld a,(drawbar_volumes+7)
041E89 21 D2 10 04 0581*      ld hl,tonewheel_frequencies+302
041E8D BE          0582*      cp (hl)
041E8E 38 01       0583*      db 0x38, 0x01 ; jr c,1
041E90 77          0584*      ld (hl),a
041E91             0585*  
041E91 3A 67 0D 04 0586*      ld a,(drawbar_volumes+8)
041E95 21 E6 10 04 0587*      ld hl,tonewheel_frequencies+322
041E99 BE          0588*      cp (hl)
041E9A 38 01       0589*      db 0x38, 0x01 ; jr c,1
041E9C 77          0590*      ld (hl),a
041E9D             0591*  
041E9D             0592*  @note_end9:
041E9D             0593*  
041E9D C9          0594*      ret
041E9E             0161       include "organ/src/asm/organ_notes_bank_4.asm"
041E9E             0001*  organ_notes_bank_4:
041E9E FD 21 BF 0B 0002*      ld iy,cmd0
       04          
041EA3             0003*  
041EA3 DD CB 0C 4E 0004*      bit 1,(ix+12)
041EA7 CA 17 1F 04 0005*      jp z,@note_end0
041EAB             0006*  
041EAB 3A 5F 0D 04 0007*      ld a,(drawbar_volumes+0)
041EAF 21 CA 0F 04 0008*      ld hl,tonewheel_frequencies+38
041EB3 BE          0009*      cp (hl)
041EB4 38 01       0010*      db 0x38, 0x01 ; jr c,1
041EB6 77          0011*      ld (hl),a
041EB7             0012*  
041EB7 3A 60 0D 04 0013*      ld a,(drawbar_volumes+1)
041EBB 21 E6 0F 04 0014*      ld hl,tonewheel_frequencies+66
041EBF BE          0015*      cp (hl)
041EC0 38 01       0016*      db 0x38, 0x01 ; jr c,1
041EC2 77          0017*      ld (hl),a
041EC3             0018*  
041EC3 3A 61 0D 04 0019*      ld a,(drawbar_volumes+2)
041EC7 21 CA 0F 04 0020*      ld hl,tonewheel_frequencies+38
041ECB BE          0021*      cp (hl)
041ECC 38 01       0022*      db 0x38, 0x01 ; jr c,1
041ECE 77          0023*      ld (hl),a
041ECF             0024*  
041ECF 3A 62 0D 04 0025*      ld a,(drawbar_volumes+3)
041ED3 21 FA 0F 04 0026*      ld hl,tonewheel_frequencies+86
041ED7 BE          0027*      cp (hl)
041ED8 38 01       0028*      db 0x38, 0x01 ; jr c,1
041EDA 77          0029*      ld (hl),a
041EDB             0030*  
041EDB 3A 63 0D 04 0031*      ld a,(drawbar_volumes+4)
041EDF 21 16 10 04 0032*      ld hl,tonewheel_frequencies+114
041EE3 BE          0033*      cp (hl)
041EE4 38 01       0034*      db 0x38, 0x01 ; jr c,1
041EE6 77          0035*      ld (hl),a
041EE7             0036*  
041EE7 3A 64 0D 04 0037*      ld a,(drawbar_volumes+5)
041EEB 21 2A 10 04 0038*      ld hl,tonewheel_frequencies+134
041EEF BE          0039*      cp (hl)
041EF0 38 01       0040*      db 0x38, 0x01 ; jr c,1
041EF2 77          0041*      ld (hl),a
041EF3             0042*  
041EF3 3A 65 0D 04 0043*      ld a,(drawbar_volumes+6)
041EF7 21 3A 10 04 0044*      ld hl,tonewheel_frequencies+150
041EFB BE          0045*      cp (hl)
041EFC 38 01       0046*      db 0x38, 0x01 ; jr c,1
041EFE 77          0047*      ld (hl),a
041EFF             0048*  
041EFF 3A 66 0D 04 0049*      ld a,(drawbar_volumes+7)
041F03 21 46 10 04 0050*      ld hl,tonewheel_frequencies+162
041F07 BE          0051*      cp (hl)
041F08 38 01       0052*      db 0x38, 0x01 ; jr c,1
041F0A 77          0053*      ld (hl),a
041F0B             0054*  
041F0B 3A 67 0D 04 0055*      ld a,(drawbar_volumes+8)
041F0F 21 5A 10 04 0056*      ld hl,tonewheel_frequencies+182
041F13 BE          0057*      cp (hl)
041F14 38 01       0058*      db 0x38, 0x01 ; jr c,1
041F16 77          0059*      ld (hl),a
041F17             0060*  
041F17             0061*  @note_end0:
041F17             0062*  
041F17 DD CB 08 56 0063*      bit 2,(ix+8)
041F1B CA 8B 1F 04 0064*      jp z,@note_end1
041F1F             0065*  
041F1F 3A 5F 0D 04 0066*      ld a,(drawbar_volumes+0)
041F23 21 A6 0F 04 0067*      ld hl,tonewheel_frequencies+2
041F27 BE          0068*      cp (hl)
041F28 38 01       0069*      db 0x38, 0x01 ; jr c,1
041F2A 77          0070*      ld (hl),a
041F2B             0071*  
041F2B 3A 60 0D 04 0072*      ld a,(drawbar_volumes+1)
041F2F 21 F2 0F 04 0073*      ld hl,tonewheel_frequencies+78
041F33 BE          0074*      cp (hl)
041F34 38 01       0075*      db 0x38, 0x01 ; jr c,1
041F36 77          0076*      ld (hl),a
041F37             0077*  
041F37 3A 61 0D 04 0078*      ld a,(drawbar_volumes+2)
041F3B 21 D6 0F 04 0079*      ld hl,tonewheel_frequencies+50
041F3F BE          0080*      cp (hl)
041F40 38 01       0081*      db 0x38, 0x01 ; jr c,1
041F42 77          0082*      ld (hl),a
041F43             0083*  
041F43 3A 62 0D 04 0084*      ld a,(drawbar_volumes+3)
041F47 21 06 10 04 0085*      ld hl,tonewheel_frequencies+98
041F4B BE          0086*      cp (hl)
041F4C 38 01       0087*      db 0x38, 0x01 ; jr c,1
041F4E 77          0088*      ld (hl),a
041F4F             0089*  
041F4F 3A 63 0D 04 0090*      ld a,(drawbar_volumes+4)
041F53 21 22 10 04 0091*      ld hl,tonewheel_frequencies+126
041F57 BE          0092*      cp (hl)
041F58 38 01       0093*      db 0x38, 0x01 ; jr c,1
041F5A 77          0094*      ld (hl),a
041F5B             0095*  
041F5B 3A 64 0D 04 0096*      ld a,(drawbar_volumes+5)
041F5F 21 36 10 04 0097*      ld hl,tonewheel_frequencies+146
041F63 BE          0098*      cp (hl)
041F64 38 01       0099*      db 0x38, 0x01 ; jr c,1
041F66 77          0100*      ld (hl),a
041F67             0101*  
041F67 3A 65 0D 04 0102*      ld a,(drawbar_volumes+6)
041F6B 21 46 10 04 0103*      ld hl,tonewheel_frequencies+162
041F6F BE          0104*      cp (hl)
041F70 38 01       0105*      db 0x38, 0x01 ; jr c,1
041F72 77          0106*      ld (hl),a
041F73             0107*  
041F73 3A 66 0D 04 0108*      ld a,(drawbar_volumes+7)
041F77 21 52 10 04 0109*      ld hl,tonewheel_frequencies+174
041F7B BE          0110*      cp (hl)
041F7C 38 01       0111*      db 0x38, 0x01 ; jr c,1
041F7E 77          0112*      ld (hl),a
041F7F             0113*  
041F7F 3A 67 0D 04 0114*      ld a,(drawbar_volumes+8)
041F83 21 66 10 04 0115*      ld hl,tonewheel_frequencies+194
041F87 BE          0116*      cp (hl)
041F88 38 01       0117*      db 0x38, 0x01 ; jr c,1
041F8A 77          0118*      ld (hl),a
041F8B             0119*  
041F8B             0120*  @note_end1:
041F8B             0121*  
041F8B DD CB 0A 56 0122*      bit 2,(ix+10)
041F8F CA FF 1F 04 0123*      jp z,@note_end2
041F93             0124*  
041F93 3A 5F 0D 04 0125*      ld a,(drawbar_volumes+0)
041F97 21 AE 0F 04 0126*      ld hl,tonewheel_frequencies+10
041F9B BE          0127*      cp (hl)
041F9C 38 01       0128*      db 0x38, 0x01 ; jr c,1
041F9E 77          0129*      ld (hl),a
041F9F             0130*  
041F9F 3A 60 0D 04 0131*      ld a,(drawbar_volumes+1)
041FA3 21 FA 0F 04 0132*      ld hl,tonewheel_frequencies+86
041FA7 BE          0133*      cp (hl)
041FA8 38 01       0134*      db 0x38, 0x01 ; jr c,1
041FAA 77          0135*      ld (hl),a
041FAB             0136*  
041FAB 3A 61 0D 04 0137*      ld a,(drawbar_volumes+2)
041FAF 21 DE 0F 04 0138*      ld hl,tonewheel_frequencies+58
041FB3 BE          0139*      cp (hl)
041FB4 38 01       0140*      db 0x38, 0x01 ; jr c,1
041FB6 77          0141*      ld (hl),a
041FB7             0142*  
041FB7 3A 62 0D 04 0143*      ld a,(drawbar_volumes+3)
041FBB 21 0E 10 04 0144*      ld hl,tonewheel_frequencies+106
041FBF BE          0145*      cp (hl)
041FC0 38 01       0146*      db 0x38, 0x01 ; jr c,1
041FC2 77          0147*      ld (hl),a
041FC3             0148*  
041FC3 3A 63 0D 04 0149*      ld a,(drawbar_volumes+4)
041FC7 21 2A 10 04 0150*      ld hl,tonewheel_frequencies+134
041FCB BE          0151*      cp (hl)
041FCC 38 01       0152*      db 0x38, 0x01 ; jr c,1
041FCE 77          0153*      ld (hl),a
041FCF             0154*  
041FCF 3A 64 0D 04 0155*      ld a,(drawbar_volumes+5)
041FD3 21 3E 10 04 0156*      ld hl,tonewheel_frequencies+154
041FD7 BE          0157*      cp (hl)
041FD8 38 01       0158*      db 0x38, 0x01 ; jr c,1
041FDA 77          0159*      ld (hl),a
041FDB             0160*  
041FDB 3A 65 0D 04 0161*      ld a,(drawbar_volumes+6)
041FDF 21 4E 10 04 0162*      ld hl,tonewheel_frequencies+170
041FE3 BE          0163*      cp (hl)
041FE4 38 01       0164*      db 0x38, 0x01 ; jr c,1
041FE6 77          0165*      ld (hl),a
041FE7             0166*  
041FE7 3A 66 0D 04 0167*      ld a,(drawbar_volumes+7)
041FEB 21 5A 10 04 0168*      ld hl,tonewheel_frequencies+182
041FEF BE          0169*      cp (hl)
041FF0 38 01       0170*      db 0x38, 0x01 ; jr c,1
041FF2 77          0171*      ld (hl),a
041FF3             0172*  
041FF3 3A 67 0D 04 0173*      ld a,(drawbar_volumes+8)
041FF7 21 6E 10 04 0174*      ld hl,tonewheel_frequencies+202
041FFB BE          0175*      cp (hl)
041FFC 38 01       0176*      db 0x38, 0x01 ; jr c,1
041FFE 77          0177*      ld (hl),a
041FFF             0178*  
041FFF             0179*  @note_end2:
041FFF             0180*  
041FFF DD CB 0C 5E 0181*      bit 3,(ix+12)
042003 CA 73 20 04 0182*      jp z,@note_end3
042007             0183*  
042007 3A 5F 0D 04 0184*      ld a,(drawbar_volumes+0)
04200B 21 B2 0F 04 0185*      ld hl,tonewheel_frequencies+14
04200F BE          0186*      cp (hl)
042010 38 01       0187*      db 0x38, 0x01 ; jr c,1
042012 77          0188*      ld (hl),a
042013             0189*  
042013 3A 60 0D 04 0190*      ld a,(drawbar_volumes+1)
042017 21 FE 0F 04 0191*      ld hl,tonewheel_frequencies+90
04201B BE          0192*      cp (hl)
04201C 38 01       0193*      db 0x38, 0x01 ; jr c,1
04201E 77          0194*      ld (hl),a
04201F             0195*  
04201F 3A 61 0D 04 0196*      ld a,(drawbar_volumes+2)
042023 21 E2 0F 04 0197*      ld hl,tonewheel_frequencies+62
042027 BE          0198*      cp (hl)
042028 38 01       0199*      db 0x38, 0x01 ; jr c,1
04202A 77          0200*      ld (hl),a
04202B             0201*  
04202B 3A 62 0D 04 0202*      ld a,(drawbar_volumes+3)
04202F 21 12 10 04 0203*      ld hl,tonewheel_frequencies+110
042033 BE          0204*      cp (hl)
042034 38 01       0205*      db 0x38, 0x01 ; jr c,1
042036 77          0206*      ld (hl),a
042037             0207*  
042037 3A 63 0D 04 0208*      ld a,(drawbar_volumes+4)
04203B 21 2E 10 04 0209*      ld hl,tonewheel_frequencies+138
04203F BE          0210*      cp (hl)
042040 38 01       0211*      db 0x38, 0x01 ; jr c,1
042042 77          0212*      ld (hl),a
042043             0213*  
042043 3A 64 0D 04 0214*      ld a,(drawbar_volumes+5)
042047 21 42 10 04 0215*      ld hl,tonewheel_frequencies+158
04204B BE          0216*      cp (hl)
04204C 38 01       0217*      db 0x38, 0x01 ; jr c,1
04204E 77          0218*      ld (hl),a
04204F             0219*  
04204F 3A 65 0D 04 0220*      ld a,(drawbar_volumes+6)
042053 21 52 10 04 0221*      ld hl,tonewheel_frequencies+174
042057 BE          0222*      cp (hl)
042058 38 01       0223*      db 0x38, 0x01 ; jr c,1
04205A 77          0224*      ld (hl),a
04205B             0225*  
04205B 3A 66 0D 04 0226*      ld a,(drawbar_volumes+7)
04205F 21 5E 10 04 0227*      ld hl,tonewheel_frequencies+186
042063 BE          0228*      cp (hl)
042064 38 01       0229*      db 0x38, 0x01 ; jr c,1
042066 77          0230*      ld (hl),a
042067             0231*  
042067 3A 67 0D 04 0232*      ld a,(drawbar_volumes+8)
04206B 21 72 10 04 0233*      ld hl,tonewheel_frequencies+206
04206F BE          0234*      cp (hl)
042070 38 01       0235*      db 0x38, 0x01 ; jr c,1
042072 77          0236*      ld (hl),a
042073             0237*  
042073             0238*  @note_end3:
042073             0239*  
042073 DD CB 0C 66 0240*      bit 4,(ix+12)
042077 CA E7 20 04 0241*      jp z,@note_end4
04207B             0242*  
04207B 3A 5F 0D 04 0243*      ld a,(drawbar_volumes+0)
04207F 21 B6 0F 04 0244*      ld hl,tonewheel_frequencies+18
042083 BE          0245*      cp (hl)
042084 38 01       0246*      db 0x38, 0x01 ; jr c,1
042086 77          0247*      ld (hl),a
042087             0248*  
042087 3A 60 0D 04 0249*      ld a,(drawbar_volumes+1)
04208B 21 02 10 04 0250*      ld hl,tonewheel_frequencies+94
04208F BE          0251*      cp (hl)
042090 38 01       0252*      db 0x38, 0x01 ; jr c,1
042092 77          0253*      ld (hl),a
042093             0254*  
042093 3A 61 0D 04 0255*      ld a,(drawbar_volumes+2)
042097 21 E6 0F 04 0256*      ld hl,tonewheel_frequencies+66
04209B BE          0257*      cp (hl)
04209C 38 01       0258*      db 0x38, 0x01 ; jr c,1
04209E 77          0259*      ld (hl),a
04209F             0260*  
04209F 3A 62 0D 04 0261*      ld a,(drawbar_volumes+3)
0420A3 21 16 10 04 0262*      ld hl,tonewheel_frequencies+114
0420A7 BE          0263*      cp (hl)
0420A8 38 01       0264*      db 0x38, 0x01 ; jr c,1
0420AA 77          0265*      ld (hl),a
0420AB             0266*  
0420AB 3A 63 0D 04 0267*      ld a,(drawbar_volumes+4)
0420AF 21 32 10 04 0268*      ld hl,tonewheel_frequencies+142
0420B3 BE          0269*      cp (hl)
0420B4 38 01       0270*      db 0x38, 0x01 ; jr c,1
0420B6 77          0271*      ld (hl),a
0420B7             0272*  
0420B7 3A 64 0D 04 0273*      ld a,(drawbar_volumes+5)
0420BB 21 46 10 04 0274*      ld hl,tonewheel_frequencies+162
0420BF BE          0275*      cp (hl)
0420C0 38 01       0276*      db 0x38, 0x01 ; jr c,1
0420C2 77          0277*      ld (hl),a
0420C3             0278*  
0420C3 3A 65 0D 04 0279*      ld a,(drawbar_volumes+6)
0420C7 21 56 10 04 0280*      ld hl,tonewheel_frequencies+178
0420CB BE          0281*      cp (hl)
0420CC 38 01       0282*      db 0x38, 0x01 ; jr c,1
0420CE 77          0283*      ld (hl),a
0420CF             0284*  
0420CF 3A 66 0D 04 0285*      ld a,(drawbar_volumes+7)
0420D3 21 62 10 04 0286*      ld hl,tonewheel_frequencies+190
0420D7 BE          0287*      cp (hl)
0420D8 38 01       0288*      db 0x38, 0x01 ; jr c,1
0420DA 77          0289*      ld (hl),a
0420DB             0290*  
0420DB 3A 67 0D 04 0291*      ld a,(drawbar_volumes+8)
0420DF 21 76 10 04 0292*      ld hl,tonewheel_frequencies+210
0420E3 BE          0293*      cp (hl)
0420E4 38 01       0294*      db 0x38, 0x01 ; jr c,1
0420E6 77          0295*      ld (hl),a
0420E7             0296*  
0420E7             0297*  @note_end4:
0420E7             0298*  
0420E7 DD CB 0A 6E 0299*      bit 5,(ix+10)
0420EB CA 5B 21 04 0300*      jp z,@note_end5
0420EF             0301*  
0420EF 3A 5F 0D 04 0302*      ld a,(drawbar_volumes+0)
0420F3 21 C2 0F 04 0303*      ld hl,tonewheel_frequencies+30
0420F7 BE          0304*      cp (hl)
0420F8 38 01       0305*      db 0x38, 0x01 ; jr c,1
0420FA 77          0306*      ld (hl),a
0420FB             0307*  
0420FB 3A 60 0D 04 0308*      ld a,(drawbar_volumes+1)
0420FF 21 0E 10 04 0309*      ld hl,tonewheel_frequencies+106
042103 BE          0310*      cp (hl)
042104 38 01       0311*      db 0x38, 0x01 ; jr c,1
042106 77          0312*      ld (hl),a
042107             0313*  
042107 3A 61 0D 04 0314*      ld a,(drawbar_volumes+2)
04210B 21 F2 0F 04 0315*      ld hl,tonewheel_frequencies+78
04210F BE          0316*      cp (hl)
042110 38 01       0317*      db 0x38, 0x01 ; jr c,1
042112 77          0318*      ld (hl),a
042113             0319*  
042113 3A 62 0D 04 0320*      ld a,(drawbar_volumes+3)
042117 21 22 10 04 0321*      ld hl,tonewheel_frequencies+126
04211B BE          0322*      cp (hl)
04211C 38 01       0323*      db 0x38, 0x01 ; jr c,1
04211E 77          0324*      ld (hl),a
04211F             0325*  
04211F 3A 63 0D 04 0326*      ld a,(drawbar_volumes+4)
042123 21 3E 10 04 0327*      ld hl,tonewheel_frequencies+154
042127 BE          0328*      cp (hl)
042128 38 01       0329*      db 0x38, 0x01 ; jr c,1
04212A 77          0330*      ld (hl),a
04212B             0331*  
04212B 3A 64 0D 04 0332*      ld a,(drawbar_volumes+5)
04212F 21 52 10 04 0333*      ld hl,tonewheel_frequencies+174
042133 BE          0334*      cp (hl)
042134 38 01       0335*      db 0x38, 0x01 ; jr c,1
042136 77          0336*      ld (hl),a
042137             0337*  
042137 3A 65 0D 04 0338*      ld a,(drawbar_volumes+6)
04213B 21 62 10 04 0339*      ld hl,tonewheel_frequencies+190
04213F BE          0340*      cp (hl)
042140 38 01       0341*      db 0x38, 0x01 ; jr c,1
042142 77          0342*      ld (hl),a
042143             0343*  
042143 3A 66 0D 04 0344*      ld a,(drawbar_volumes+7)
042147 21 6E 10 04 0345*      ld hl,tonewheel_frequencies+202
04214B BE          0346*      cp (hl)
04214C 38 01       0347*      db 0x38, 0x01 ; jr c,1
04214E 77          0348*      ld (hl),a
04214F             0349*  
04214F 3A 67 0D 04 0350*      ld a,(drawbar_volumes+8)
042153 21 82 10 04 0351*      ld hl,tonewheel_frequencies+222
042157 BE          0352*      cp (hl)
042158 38 01       0353*      db 0x38, 0x01 ; jr c,1
04215A 77          0354*      ld (hl),a
04215B             0355*  
04215B             0356*  @note_end5:
04215B             0357*  
04215B DD CB 0C 6E 0358*      bit 5,(ix+12)
04215F CA CF 21 04 0359*      jp z,@note_end6
042163             0360*  
042163 3A 5F 0D 04 0361*      ld a,(drawbar_volumes+0)
042167 21 CA 0F 04 0362*      ld hl,tonewheel_frequencies+38
04216B BE          0363*      cp (hl)
04216C 38 01       0364*      db 0x38, 0x01 ; jr c,1
04216E 77          0365*      ld (hl),a
04216F             0366*  
04216F 3A 60 0D 04 0367*      ld a,(drawbar_volumes+1)
042173 21 16 10 04 0368*      ld hl,tonewheel_frequencies+114
042177 BE          0369*      cp (hl)
042178 38 01       0370*      db 0x38, 0x01 ; jr c,1
04217A 77          0371*      ld (hl),a
04217B             0372*  
04217B 3A 61 0D 04 0373*      ld a,(drawbar_volumes+2)
04217F 21 FA 0F 04 0374*      ld hl,tonewheel_frequencies+86
042183 BE          0375*      cp (hl)
042184 38 01       0376*      db 0x38, 0x01 ; jr c,1
042186 77          0377*      ld (hl),a
042187             0378*  
042187 3A 62 0D 04 0379*      ld a,(drawbar_volumes+3)
04218B 21 2A 10 04 0380*      ld hl,tonewheel_frequencies+134
04218F BE          0381*      cp (hl)
042190 38 01       0382*      db 0x38, 0x01 ; jr c,1
042192 77          0383*      ld (hl),a
042193             0384*  
042193 3A 63 0D 04 0385*      ld a,(drawbar_volumes+4)
042197 21 46 10 04 0386*      ld hl,tonewheel_frequencies+162
04219B BE          0387*      cp (hl)
04219C 38 01       0388*      db 0x38, 0x01 ; jr c,1
04219E 77          0389*      ld (hl),a
04219F             0390*  
04219F 3A 64 0D 04 0391*      ld a,(drawbar_volumes+5)
0421A3 21 5A 10 04 0392*      ld hl,tonewheel_frequencies+182
0421A7 BE          0393*      cp (hl)
0421A8 38 01       0394*      db 0x38, 0x01 ; jr c,1
0421AA 77          0395*      ld (hl),a
0421AB             0396*  
0421AB 3A 65 0D 04 0397*      ld a,(drawbar_volumes+6)
0421AF 21 6A 10 04 0398*      ld hl,tonewheel_frequencies+198
0421B3 BE          0399*      cp (hl)
0421B4 38 01       0400*      db 0x38, 0x01 ; jr c,1
0421B6 77          0401*      ld (hl),a
0421B7             0402*  
0421B7 3A 66 0D 04 0403*      ld a,(drawbar_volumes+7)
0421BB 21 76 10 04 0404*      ld hl,tonewheel_frequencies+210
0421BF BE          0405*      cp (hl)
0421C0 38 01       0406*      db 0x38, 0x01 ; jr c,1
0421C2 77          0407*      ld (hl),a
0421C3             0408*  
0421C3 3A 67 0D 04 0409*      ld a,(drawbar_volumes+8)
0421C7 21 8A 10 04 0410*      ld hl,tonewheel_frequencies+230
0421CB BE          0411*      cp (hl)
0421CC 38 01       0412*      db 0x38, 0x01 ; jr c,1
0421CE 77          0413*      ld (hl),a
0421CF             0414*  
0421CF             0415*  @note_end6:
0421CF             0416*  
0421CF DD CB 0C 76 0417*      bit 6,(ix+12)
0421D3 CA 43 22 04 0418*      jp z,@note_end7
0421D7             0419*  
0421D7 3A 5F 0D 04 0420*      ld a,(drawbar_volumes+0)
0421DB 21 D6 0F 04 0421*      ld hl,tonewheel_frequencies+50
0421DF BE          0422*      cp (hl)
0421E0 38 01       0423*      db 0x38, 0x01 ; jr c,1
0421E2 77          0424*      ld (hl),a
0421E3             0425*  
0421E3 3A 60 0D 04 0426*      ld a,(drawbar_volumes+1)
0421E7 21 22 10 04 0427*      ld hl,tonewheel_frequencies+126
0421EB BE          0428*      cp (hl)
0421EC 38 01       0429*      db 0x38, 0x01 ; jr c,1
0421EE 77          0430*      ld (hl),a
0421EF             0431*  
0421EF 3A 61 0D 04 0432*      ld a,(drawbar_volumes+2)
0421F3 21 06 10 04 0433*      ld hl,tonewheel_frequencies+98
0421F7 BE          0434*      cp (hl)
0421F8 38 01       0435*      db 0x38, 0x01 ; jr c,1
0421FA 77          0436*      ld (hl),a
0421FB             0437*  
0421FB 3A 62 0D 04 0438*      ld a,(drawbar_volumes+3)
0421FF 21 36 10 04 0439*      ld hl,tonewheel_frequencies+146
042203 BE          0440*      cp (hl)
042204 38 01       0441*      db 0x38, 0x01 ; jr c,1
042206 77          0442*      ld (hl),a
042207             0443*  
042207 3A 63 0D 04 0444*      ld a,(drawbar_volumes+4)
04220B 21 52 10 04 0445*      ld hl,tonewheel_frequencies+174
04220F BE          0446*      cp (hl)
042210 38 01       0447*      db 0x38, 0x01 ; jr c,1
042212 77          0448*      ld (hl),a
042213             0449*  
042213 3A 64 0D 04 0450*      ld a,(drawbar_volumes+5)
042217 21 66 10 04 0451*      ld hl,tonewheel_frequencies+194
04221B BE          0452*      cp (hl)
04221C 38 01       0453*      db 0x38, 0x01 ; jr c,1
04221E 77          0454*      ld (hl),a
04221F             0455*  
04221F 3A 65 0D 04 0456*      ld a,(drawbar_volumes+6)
042223 21 76 10 04 0457*      ld hl,tonewheel_frequencies+210
042227 BE          0458*      cp (hl)
042228 38 01       0459*      db 0x38, 0x01 ; jr c,1
04222A 77          0460*      ld (hl),a
04222B             0461*  
04222B 3A 66 0D 04 0462*      ld a,(drawbar_volumes+7)
04222F 21 82 10 04 0463*      ld hl,tonewheel_frequencies+222
042233 BE          0464*      cp (hl)
042234 38 01       0465*      db 0x38, 0x01 ; jr c,1
042236 77          0466*      ld (hl),a
042237             0467*  
042237 3A 67 0D 04 0468*      ld a,(drawbar_volumes+8)
04223B 21 96 10 04 0469*      ld hl,tonewheel_frequencies+242
04223F BE          0470*      cp (hl)
042240 38 01       0471*      db 0x38, 0x01 ; jr c,1
042242 77          0472*      ld (hl),a
042243             0473*  
042243             0474*  @note_end7:
042243             0475*  
042243 DD CB 0C 7E 0476*      bit 7,(ix+12)
042247 CA B7 22 04 0477*      jp z,@note_end8
04224B             0478*  
04224B 3A 5F 0D 04 0479*      ld a,(drawbar_volumes+0)
04224F 21 DE 0F 04 0480*      ld hl,tonewheel_frequencies+58
042253 BE          0481*      cp (hl)
042254 38 01       0482*      db 0x38, 0x01 ; jr c,1
042256 77          0483*      ld (hl),a
042257             0484*  
042257 3A 60 0D 04 0485*      ld a,(drawbar_volumes+1)
04225B 21 2A 10 04 0486*      ld hl,tonewheel_frequencies+134
04225F BE          0487*      cp (hl)
042260 38 01       0488*      db 0x38, 0x01 ; jr c,1
042262 77          0489*      ld (hl),a
042263             0490*  
042263 3A 61 0D 04 0491*      ld a,(drawbar_volumes+2)
042267 21 0E 10 04 0492*      ld hl,tonewheel_frequencies+106
04226B BE          0493*      cp (hl)
04226C 38 01       0494*      db 0x38, 0x01 ; jr c,1
04226E 77          0495*      ld (hl),a
04226F             0496*  
04226F 3A 62 0D 04 0497*      ld a,(drawbar_volumes+3)
042273 21 3E 10 04 0498*      ld hl,tonewheel_frequencies+154
042277 BE          0499*      cp (hl)
042278 38 01       0500*      db 0x38, 0x01 ; jr c,1
04227A 77          0501*      ld (hl),a
04227B             0502*  
04227B 3A 63 0D 04 0503*      ld a,(drawbar_volumes+4)
04227F 21 5A 10 04 0504*      ld hl,tonewheel_frequencies+182
042283 BE          0505*      cp (hl)
042284 38 01       0506*      db 0x38, 0x01 ; jr c,1
042286 77          0507*      ld (hl),a
042287             0508*  
042287 3A 64 0D 04 0509*      ld a,(drawbar_volumes+5)
04228B 21 6E 10 04 0510*      ld hl,tonewheel_frequencies+202
04228F BE          0511*      cp (hl)
042290 38 01       0512*      db 0x38, 0x01 ; jr c,1
042292 77          0513*      ld (hl),a
042293             0514*  
042293 3A 65 0D 04 0515*      ld a,(drawbar_volumes+6)
042297 21 7E 10 04 0516*      ld hl,tonewheel_frequencies+218
04229B BE          0517*      cp (hl)
04229C 38 01       0518*      db 0x38, 0x01 ; jr c,1
04229E 77          0519*      ld (hl),a
04229F             0520*  
04229F 3A 66 0D 04 0521*      ld a,(drawbar_volumes+7)
0422A3 21 8A 10 04 0522*      ld hl,tonewheel_frequencies+230
0422A7 BE          0523*      cp (hl)
0422A8 38 01       0524*      db 0x38, 0x01 ; jr c,1
0422AA 77          0525*      ld (hl),a
0422AB             0526*  
0422AB 3A 67 0D 04 0527*      ld a,(drawbar_volumes+8)
0422AF 21 9E 10 04 0528*      ld hl,tonewheel_frequencies+250
0422B3 BE          0529*      cp (hl)
0422B4 38 01       0530*      db 0x38, 0x01 ; jr c,1
0422B6 77          0531*      ld (hl),a
0422B7             0532*  
0422B7             0533*  @note_end8:
0422B7             0534*  
0422B7 DD CB 0D 46 0535*      bit 0,(ix+13)
0422BB CA 2B 23 04 0536*      jp z,@note_end9
0422BF             0537*  
0422BF 3A 5F 0D 04 0538*      ld a,(drawbar_volumes+0)
0422C3 21 E2 0F 04 0539*      ld hl,tonewheel_frequencies+62
0422C7 BE          0540*      cp (hl)
0422C8 38 01       0541*      db 0x38, 0x01 ; jr c,1
0422CA 77          0542*      ld (hl),a
0422CB             0543*  
0422CB 3A 60 0D 04 0544*      ld a,(drawbar_volumes+1)
0422CF 21 2E 10 04 0545*      ld hl,tonewheel_frequencies+138
0422D3 BE          0546*      cp (hl)
0422D4 38 01       0547*      db 0x38, 0x01 ; jr c,1
0422D6 77          0548*      ld (hl),a
0422D7             0549*  
0422D7 3A 61 0D 04 0550*      ld a,(drawbar_volumes+2)
0422DB 21 12 10 04 0551*      ld hl,tonewheel_frequencies+110
0422DF BE          0552*      cp (hl)
0422E0 38 01       0553*      db 0x38, 0x01 ; jr c,1
0422E2 77          0554*      ld (hl),a
0422E3             0555*  
0422E3 3A 62 0D 04 0556*      ld a,(drawbar_volumes+3)
0422E7 21 42 10 04 0557*      ld hl,tonewheel_frequencies+158
0422EB BE          0558*      cp (hl)
0422EC 38 01       0559*      db 0x38, 0x01 ; jr c,1
0422EE 77          0560*      ld (hl),a
0422EF             0561*  
0422EF 3A 63 0D 04 0562*      ld a,(drawbar_volumes+4)
0422F3 21 5E 10 04 0563*      ld hl,tonewheel_frequencies+186
0422F7 BE          0564*      cp (hl)
0422F8 38 01       0565*      db 0x38, 0x01 ; jr c,1
0422FA 77          0566*      ld (hl),a
0422FB             0567*  
0422FB 3A 64 0D 04 0568*      ld a,(drawbar_volumes+5)
0422FF 21 72 10 04 0569*      ld hl,tonewheel_frequencies+206
042303 BE          0570*      cp (hl)
042304 38 01       0571*      db 0x38, 0x01 ; jr c,1
042306 77          0572*      ld (hl),a
042307             0573*  
042307 3A 65 0D 04 0574*      ld a,(drawbar_volumes+6)
04230B 21 82 10 04 0575*      ld hl,tonewheel_frequencies+222
04230F BE          0576*      cp (hl)
042310 38 01       0577*      db 0x38, 0x01 ; jr c,1
042312 77          0578*      ld (hl),a
042313             0579*  
042313 3A 66 0D 04 0580*      ld a,(drawbar_volumes+7)
042317 21 8E 10 04 0581*      ld hl,tonewheel_frequencies+234
04231B BE          0582*      cp (hl)
04231C 38 01       0583*      db 0x38, 0x01 ; jr c,1
04231E 77          0584*      ld (hl),a
04231F             0585*  
04231F 3A 67 0D 04 0586*      ld a,(drawbar_volumes+8)
042323 21 A2 10 04 0587*      ld hl,tonewheel_frequencies+254
042327 BE          0588*      cp (hl)
042328 38 01       0589*      db 0x38, 0x01 ; jr c,1
04232A 77          0590*      ld (hl),a
04232B             0591*  
04232B             0592*  @note_end9:
04232B             0593*  
04232B C9          0594*      ret
04232C             0162   
04232C 7F          0163   master_volume: db 127
04232D             0164   hammer_curr: ds 17
04233E             0165   hammer_last: ds 17
04234F             0166   hammer_cmd: ds 17
042360             0167   
042360             0168   cmd_frequency: equ frequency0-cmd0
042360             0169   cmd_volume: equ volume0-cmd0
042360             0170   cmd_bytes: equ cmd1-cmd0
042360 00          0171   notes_played: db 0
042361 43 68 61 6E 0172   str_channels_playing: db "Channels playing: ",0
       6E 65 6C 73 
       20 70 6C 61 
       79 69 6E 67 
       3A 20 00    
042374             0173   
042374             0174   ; ###############################################
042374             0175   ; Main loop
042374             0176   ; ###############################################
042374             0177   
042374             0178   main:
042374 CD A6 08 04 0179       call vdu_home_cursor
042378             0180   
042378             0181   ; set set default volume to 0 for all channels
042378 AF          0182       xor a
042379 32 CB 0B 04 0183       ld (volume0),a
04237D 32 D8 0B 04 0184       ld (volume1),a
042381 32 E5 0B 04 0185       ld (volume2),a
042385 32 F2 0B 04 0186       ld (volume3),a
042389 32 FF 0B 04 0187       ld (volume4),a
04238D 32 0C 0C 04 0188       ld (volume5),a
042391 32 19 0C 04 0189       ld (volume6),a
042395 32 26 0C 04 0190       ld (volume7),a
042399 32 33 0C 04 0191       ld (volume8),a
04239D 32 40 0C 04 0192       ld (volume9),a
0423A1 32 4D 0C 04 0193       ld (volume10),a
0423A5 32 5A 0C 04 0194       ld (volume11),a
0423A9 32 67 0C 04 0195       ld (volume12),a
0423AD 32 74 0C 04 0196       ld (volume13),a
0423B1 32 81 0C 04 0197       ld (volume14),a
0423B5 32 8E 0C 04 0198       ld (volume15),a
0423B9 32 9B 0C 04 0199       ld (volume16),a
0423BD 32 A8 0C 04 0200       ld (volume17),a
0423C1 32 B5 0C 04 0201       ld (volume18),a
0423C5 32 C2 0C 04 0202       ld (volume19),a
0423C9 32 CF 0C 04 0203       ld (volume20),a
0423CD 32 DC 0C 04 0204       ld (volume21),a
0423D1 32 E9 0C 04 0205       ld (volume22),a
0423D5 32 F6 0C 04 0206       ld (volume23),a
0423D9 32 03 0D 04 0207       ld (volume24),a
0423DD 32 10 0D 04 0208       ld (volume25),a
0423E1 32 1D 0D 04 0209       ld (volume26),a
0423E5 32 2A 0D 04 0210       ld (volume27),a
0423E9 32 37 0D 04 0211       ld (volume28),a
0423ED 32 44 0D 04 0212       ld (volume29),a
0423F1 32 51 0D 04 0213       ld (volume30),a
0423F5 32 5E 0D 04 0214       ld (volume31),a
0423F9             0215   
0423F9             0216   ; advance vibrato value
0423F9 21 E4 0E 04 0217       ld hl,vibrato_lut
0423FD 3A E0 0E 04 0218       ld a,(vibrato_step)
042401 3C          0219       inc a
042402 E6 3F       0220       and 63 ; modulo 64
042404 32 E0 0E 04 0221       ld (vibrato_step),a
042408 5F          0222       ld e,a
042409 16 03       0223       ld d,3 ; three bytes per lut entry
04240B ED 5C       0224       mlt de
04240D 19          0225       add hl,de
04240E ED 27       0226       ld hl,(hl)
042410 22 E1 0E 04 0227       ld (vibrato_value),hl
042414             0228   
042414             0229   ; set tonewheel drawbar multipliers to 0
042414 AF          0230       xor a
042415 06 54       0231       ld b,84 ; number of tonewheels
042417 DD 21 A6 0F 0232       ld ix,tonewheel_frequencies+2
       04          
04241C             0233   @loop_tonewheels:
04241C DD 77 00    0234       ld (ix),a
04241F ED 32 04    0235       lea ix,ix+4 ; four bytes per record
042422 10 F8       0236       djnz @loop_tonewheels
042424             0237   
042424             0238   ; check key presses
042424             0239   	MOSCALL mos_getkbmap
042424 3E 1E       0001M  			LD	A, function
042426 5B CF       0002M  			RST.LIL	08h
042428             0240   
042428             0241   ; quit if escape key pressed
042428             0242   ; 113 Escape
042428 DD CB 0E 46 0243       bit 0,(ix+14)
04242C C2 71 24 04 0244       jp nz,main_exit
042430             0245   
042430             0246   ; display the virtual keys table
042430 DD E5       0247       push ix
042432 E1          0248       pop hl
042433 3E 11       0249       ld a,17
042435 CD 49 05 04 0250       call dumpMemoryHex
042439             0251   
042439             0252   ; set the drawbar values according to the keys pressed
042439 CD B7 0D 04 0253       call set_drawbars
04243D             0254   
04243D             0255   ; set channels to play according to the keys pressed
04243D CD F4 10 04 0256       call organ_notes_bank_1
042441 CD 82 15 04 0257       call organ_notes_bank_2
042445 CD 10 1A 04 0258       call organ_notes_bank_3
042449 CD 9E 1E 04 0259       call organ_notes_bank_4
04244D             0260   
04244D             0261   ; set channel volumes according to the activated tonewheels
04244D CD 99 0E 04 0262       call set_volumes
042451             0263   
042451             0264   ; print the number of channels playing
042451 21 61 23 04 0265       ld hl,str_channels_playing
042455 CD E0 01 04 0266       call printString
042459 3E 20       0267       ld a,32 ; number of channels
04245B 91          0268       sub c ; subtract remaining channel loop counter
04245C 21 00 00 00 0269       ld hl,0 ; make sure deu is 0
042460 6F          0270       ld l,a ; hl = number of channels playing
042461 CD 2E 02 04 0271       call printDec
042465             0272       ; call printNewline
042465             0273       ; ld hl,_printDecBuffer
042465             0274       ; ld a,9
042465             0275       ; call dumpMemoryHex
042465             0276   
042465             0277   ; play the notes
042465 CD B4 0B 04 0278       call play_notes
042469             0279   
042469             0280   ; wait a tick
042469             0281   ;     call vdu_flip
042469 CD 80 09 04 0282       call vdu_vblank
04246D             0283   
04246D C3 74 23 04 0284       jp main
042471             0285   
042471             0286   main_exit:
042471             0287   ; cleanup and exit
042471 3E 00       0288       ld a,0
042473 CD FB 07 04 0289       call vdu_set_screen_mode
042477 C9          0290       ret
